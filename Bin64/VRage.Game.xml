<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VRage.Game</name>
    </assembly>
    <members>
        <member name="T:VRage.Components.Block.MyBlockComponent.BlockMoved">
            <summary>
            Delegate used for OnMoving event.
            </summary>
            <param name="block">Block that was moved.</param>
            <param name="newGridData">New grid data component into which block was moved.</param>
        </member>
        <member name="E:VRage.Components.Block.MyBlockComponent.Move">
            <summary>
            Event fired when this block moves to another grid.
            
            Arguments are the block that is moving and the target entity.
            </summary>
        </member>
        <member name="P:VRage.Components.Block.MyBlockComponent.GridData">
            <summary>
            Grid data that contains the block this entity is bound to.
            </summary>
        </member>
        <member name="F:VRage.Components.Block.MyBlockComponent.m_blockId">
            <summary>
            Block this entity is bound to.
            </summary>
        </member>
        <member name="F:VRage.Components.Block.MyBlockComponent.m_block">
            <summary>
            Reference to the block.
            </summary>
        </member>
        <member name="F:VRage.Components.Block.MyBlockComponent.m_blockInventories">
            <summary>
            Block inventories, needed for updating mass on a block.
            </summary>
        </member>
        <member name="F:VRage.Components.Block.MyBlockComponent.m_physicsShapeComponent">
            <summary>
            Grid physics shape required for updating mass.
            </summary>
        </member>
        <member name="P:VRage.Components.Block.MyBlockComponent.Block">
            <summary>
            Gets block associated to Entity.
            </summary>
        </member>
        <member name="P:VRage.Components.Block.MyBlockComponent.BlockId">
            <summary>
            The id of the block that is represented by this component.
            </summary>
        </member>
        <member name="T:VRage.Components.Entity.Animations.MySkeletonComponent">
            <summary>
            The skeleton component holds animation skeleton. 
            It serves as a storage with several utility functions, other components 
            (MyAnimationControllerComponent, MyRagdollComponent) are actively using it.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.Animations.MySkeletonComponent.m_modelComponent">
            <summary>
            Link to the model component.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.Animations.MySkeletonComponent.RootBoneMatrix">
            <summary>
            Absolute bind transform of the root bone.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.Animations.MySkeletonComponent.RootBoneMatrixInv">
            <summary>
            Absolute bind transform of the root bone.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.Animations.MySkeletonComponent.m_bodyCapsuleInfo">
            <summary>
            Which bones should define the body capsules and how large the capsules should be
            </summary>
        </member>
        <member name="P:VRage.Components.Entity.Animations.MySkeletonComponent.CharacterBones">
            <summary>
            Storage of character bones. The bones are guaranteed to be hierarchically sorted (already in MWM).
            </summary>
        </member>
        <member name="P:VRage.Components.Entity.Animations.MySkeletonComponent.BoneAbsoluteTransforms">
            <summary>
            Storage of all bone absolute transforms (bone coordinates are in character local space).
            </summary>
        </member>
        <member name="P:VRage.Components.Entity.Animations.MySkeletonComponent.Definition">
            <summary>
            Link to the definition.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.Animations.MySkeletonComponent.BoneIndexFirstPersonCamera">
            <summary>
            Index of first person camera dummy bone.
            </summary>
        </member>
        <member name="P:VRage.Components.Entity.Animations.MySkeletonComponent.BodyCapsuleInfo">
            <summary>
            Get bone - capsule info.
            </summary>
        </member>
        <member name="P:VRage.Components.Entity.Animations.MySkeletonComponent.PoseVersion">
            <summary>
            Version number that is incremented when the pose changes. 
            </summary>
            <remarks>
            This value will only be automatically incremented to <see cref="M:VRage.Components.Entity.Animations.MySkeletonComponent.ComputeAbsoluteTransforms"/>,
            if you modify the pose via <see cref="M:VRageRender.Animations.MyCharacterBone.ComputeAbsoluteTransforms(VRageRender.Animations.MyCharacterBone[])"/> or similar you should manually increment this with <see cref="M:VRage.Components.Entity.Animations.MySkeletonComponent.MarkPoseChanged"/>
            </remarks>
        </member>
        <member name="E:VRage.Components.Entity.Animations.MySkeletonComponent.OnReloadBones">
            <summary>
            Callback that is triggered when the bones are reloaded.
            </summary>
        </member>
        <member name="E:VRage.Components.Entity.Animations.MySkeletonComponent.OnPoseChanged">
            <summary>
            Callback that is triggered when the pose changes.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.Animations.MySkeletonComponent.MarkPoseChanged">
            <summary>
            Increments <see cref="P:VRage.Components.Entity.Animations.MySkeletonComponent.PoseVersion"/>, indicating that the pose has changed.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.Animations.MySkeletonComponent.ReloadBones">
            <summary>
            Obtain array of bones from model component. 
            Resets animation controller and ragdoll.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.Animations.MySkeletonComponent.ComputeAbsoluteTransforms">
            <summary>
            Recompute absolute transforms (bone coordinates are brought to character local space).
            </summary>
            <remarks>
            Additionally increments <see cref="P:VRage.Components.Entity.Animations.MySkeletonComponent.PoseVersion"/>
            </remarks>
        </member>
        <member name="M:VRage.Components.Entity.Animations.MySkeletonComponent.FindBone(System.String,System.Int32@)">
            <summary>
            Find character bone having given name. If found, output parameter index is set.
            Returns reference to the bone or null if not found.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.Animations.MySkeletonComponent.CopyStateFrom(VRage.Components.Entity.Animations.MySkeletonComponent)">
            <summary>
            Copy skeleton bone transforms from another skeleton component to this component.
            Both skeleton component must use same definition (so they have same bone count and hierarchy).
            </summary>
            <param name="sourceSkeleton">the skeleton component used as copying source</param>
            <returns>true on success, false if any of sanity checks failed</returns>
        </member>
        <member name="M:VRage.Components.Entity.Animations.MySkeletonComponent.OnEntityModelsRefreshed(VRage.Entity.EntityComponents.MyModelComponent.ModelChangedArgs)">
            <summary>
            Wrapper delegate function calling ReloadBones after models changes.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.Animations.MySkeletonComponent.GetClosestBone(VRageMath.Vector3D,VRageMath.Matrix@)">
            <summary>
            Get the character bone closest to the specified world position.
            </summary>
            <param name="worldPos">World position.</param>
            <param name="transform">Absolute transform of the bone, in character space.</param>
            <returns>Closest bone, or null if no bones available.</returns>
        </member>
        <member name="M:VRage.Components.Entity.Camera.MyCameraShake.ComputeCameraShake(VRage.Components.Entity.Camera.MyCameraComponent,VRageMath.MatrixD@)">
            <summary>
            Update camera shake - process simulation.
            </summary>
            <param name="cameraComponent">link to the camera component currently using this shake</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Components.Entity.Camera.MyCameraShake.Start(System.Double,System.Double,System.Nullable{VRageMath.Vector3D})">
            <summary>
            Start the camera shake.
            </summary>
            <param name="duration">Shake duration</param>
            <param name="vigor">Shake strength</param>
            <param name="hint">Shake initial direction</param>
        </member>
        <member name="T:VRage.Components.Entity.Camera.MyFirstPersonCameraComponent">
            <summary>
            First person camera. 
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.Camera.MyFirstPersonCameraComponent.m_headBone">
            <summary>
            Link to the head bone.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.Camera.MyFirstPersonCameraComponent.m_pitch">
            <summary>
            Camera pitch rotation. (looking up/down, -pi/2, +pi/2)
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.Camera.MyFirstPersonCameraComponent.m_skeleton">
            <summary>
            Link to character skeleton component.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.Camera.MyFirstPersonCameraComponent.m_definition">
            <summary>
            Link to the definition.
            </summary>
        </member>
        <member name="P:VRage.Components.Entity.Camera.MyFirstPersonCameraComponent.Pitch">
            <summary>
            Camera pitch rotation. (looking up/down, -pi/2, +pi/2)
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.Camera.MyFirstPersonCameraComponent.TranslateBonesToMatchCamera">
            <summary>
            The camera needs to be placed in the middle of the entity/character capsule.
            This function translates all bones of the skeletal mesh so the camera is in the middle.
            </summary>
        </member>
        <member name="T:VRage.Components.Entity.Camera.MyCameraComponentProjectionSetup">
            <summary>
            Camera projection setup.
            The struct contains not only projection matrix but also additional fields that are unfortunatelly required by the renderer.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.Camera.MyCameraComponentProjectionSetup.ProjectionMatrix">
            <summary>
            Projection matrix.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.Camera.MyCameraComponentProjectionSetup.AspectRatio">
            <summary>
            Viewport aspect ratio.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.Camera.MyCameraComponentProjectionSetup.FieldOfView">
            <summary>
            Camera field of view in radians.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.Camera.MyCameraComponentProjectionSetup.NearPlane">
            <summary>
            Camera near plane.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.Camera.MyCameraComponentProjectionSetup.FarPlane">
            <summary>
            Camera far plane.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.Camera.MyCameraComponentProjectionSetup.BuildPerspectiveMatrix">
            <summary>
            Build perspective projection matrix.
            </summary>
        </member>
        <member name="T:VRage.Components.Entity.Camera.MyCameraComponent">
            <summary>
            Basic camera component. Camera position and rotation is welded to the entity.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.Camera.MyCameraComponent.m_projection">
            <summary>
            Current projection setup.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.Camera.MyCameraComponent.m_cachedWorld">
            Cached world matrix of the camera. If the value needs recomputing, m_invalidCache is set.
        </member>
        <member name="F:VRage.Components.Entity.Camera.MyCameraComponent.m_cachedView">
            Cached view matrix of the camera. If the value needs recomputing, m_invalidCache is set.
        </member>
        <member name="F:VRage.Components.Entity.Camera.MyCameraComponent.m_cachedViewProj">
            Cached view matrix of the camera. If the value needs recomputing, m_invalidCache is set.
        </member>
        <member name="F:VRage.Components.Entity.Camera.MyCameraComponent.m_cachedFrustum">
            Cached bounding frustum. If the value needs recomputing, m_invalidCache is set.
        </member>
        <member name="F:VRage.Components.Entity.Camera.MyCameraComponent.m_validCache">
            <summary>
            Flag indicating whether it is necessary to recompute world matrix, view matrix, view frustum.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.Camera.MyCameraComponent.DefaultProjectionSetup">
            <summary>
            Default projection values. Values are updated from the game loop.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.Camera.MyCameraComponent.DefaultViewport">
            <summary>
            Default viewport. Value is updated from the game loop.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.Camera.MyCameraComponent.m_activeCamera">
            <summary>
            Active camera in the scene.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.Camera.MyCameraComponent.GravityVecProvider">
            <summary>
            Callback providing gravity vector.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.Camera.MyCameraComponent.Shake">
            <summary>
            Camera shake effect.
            </summary>
        </member>
        <member name="P:VRage.Components.Entity.Camera.MyCameraComponent.ActiveCamera">
            <summary>
            Active camera in the scene.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.Camera.MyCameraComponent.ComputeWorldMatrix">
            <summary>
            Compute camera world matrix (camera is an object in scene as everything else).
            Resulting matrix is an inverse of view matrix.
            Override in children.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.Camera.MyCameraComponent.RecomputeCachedValues">
            <summary>
            Recompute cached matrices and other values.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.Camera.MyCameraComponent.GetProjectionSetup">
            <summary>
            Get current projection settings.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.Camera.MyCameraComponent.SetProjection(System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Set up the projection. Pass null to set default value.
            </summary>
            <param name="fieldOfView">camera field of view</param>
            <param name="aspectRatio">camera aspect ratio, pass null to use default aspect ratio</param>
            <param name="nearPlane">distance of the near clipping plane</param>
            <param name="farPlane">distance of the far clipping plane</param>
        </member>
        <member name="M:VRage.Components.Entity.Camera.MyCameraComponent.InvalidateCachedValues">
            <summary>
            Notify this object that the cached matrices and other values are no longer valid.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.Camera.MyCameraComponent.GetViewMatrix">
            <summary>
            Get current view matrix. This method can be overridden in subclasses.
            Default behavior: returns inverse of entity world matrix 
            (=view matrix bound to position and orientation of the parent entity)
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.Camera.MyCameraComponent.GetPosition">
            <summary>
            Get the camera position. The position is calculated from the view matrix.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.Camera.MyCameraComponent.DebugDraw">
            <summary>
            Draw camera frustum.
            </summary>
        </member>
        <member name="T:VRage.Components.Entity.Camera.MyThirdPersonCameraState">
            <summary>
            Structure fully describing third person camera state.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.Camera.MyThirdPersonCameraState.m_targetOffset">
            <summary>
            Offset from the entity position. The offset is in the local space of the entity.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.Camera.MyThirdPersonCameraState.m_pitch">
            <summary>
            Pitch represents vertical rotation (look down-up, -pi/2,+pi/2).
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.Camera.MyThirdPersonCameraState.m_yaw">
            <summary>
            Yaw represents horizontal rotation (look left-right, -pi,+pi).
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.Camera.MyThirdPersonCameraState.m_distance">
            <summary>
            Camera distance from the target.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.Camera.MyThirdPersonCameraState.m_frameOffset">
            <summary>
            Offset in meters that is added to the final camera position.
            It moves the camera in the frame space (perpendicular to the look direction).
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.Camera.MyThirdPersonCameraState.m_camera">
            <summary>
            Link to camera.
            </summary>
        </member>
        <member name="P:VRage.Components.Entity.Camera.MyThirdPersonCameraState.Pitch">
            <summary>
            Pitch represents vertical rotation (look down-up, -pi/2,+pi/2).
            </summary>
        </member>
        <member name="P:VRage.Components.Entity.Camera.MyThirdPersonCameraState.TargetOffset">
            <summary>
            Offset from the entity position. The offset is in the local space of the entity.
            </summary>
        </member>
        <member name="P:VRage.Components.Entity.Camera.MyThirdPersonCameraState.Yaw">
            <summary>
            Yaw represents horizontal rotation (look left-right, -pi,+pi).
            </summary>
        </member>
        <member name="P:VRage.Components.Entity.Camera.MyThirdPersonCameraState.Distance">
            <summary>
            Camera distance from the target. Minimum is zero.
            </summary>
        </member>
        <member name="P:VRage.Components.Entity.Camera.MyThirdPersonCameraState.FrameOffset">
            <summary>
            Offset in meters that is added to the final camera position.
            It moves the camera in the frame space (perpendicular to the look direction).
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.Camera.MyThirdPersonCameraState.ForcedOrientation">
            <summary>
            This property allows us to lock the orientation of the camera so it does not change any more.
            </summary>
        </member>
        <member name="T:VRage.Components.Entity.Camera.MyThirdPersonCameraComponent">
            <summary>
            Third person camera component. Provides representation in local coordinates relative to entity.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.Camera.MyThirdPersonCameraComponent.m_definition">
            <summary>
            Link to the definition.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.Camera.MyThirdPersonCameraComponent.m_characterBones">
            <summary>
            Link to character bones.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.Camera.MyThirdPersonCameraComponent.State">
            <summary>
            Current state of the camera.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.Camera.MyThirdPersonCameraComponent.DEFAULT_CAMERA_DISTANCE">
            <summary>
            Default camera distance.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.Camera.MyThirdPersonCameraComponent.ComputeWorldMatrix">
            <summary>
            Compute the world matrix of the camera.
            </summary>
            <returns></returns>
        </member>
        <member name="T:VRage.Components.Entity.CubeGrid.IMyMultiplayerComponent">
            <summary>
            MyMultiplayerComponent lives in sandbox, this interface provides access to it.
            </summary>
        </member>
        <member name="P:VRage.Components.Entity.CubeGrid.IMyMultiplayerComponent.ShouldStreamEntityObjectBuilder">
             <summary>
             Specifies whether the entity object builder should be streamed to the client.
             
             When set to true, object builder is generated and serialized on the server and then streamed to the client.
             Client then deserialized object builder and loads the entity from it.
            
             When set to false, only entity id is streamed to the client. Client then verifies if an entity having this entity id exists.      
             </summary>
        </member>
        <member name="T:VRage.Components.Entity.CubeGrid.MyGridBlockFracturingComponent">
            <summary>
            Grid block fracturing component tracks fractured blocks and provides methods to create them.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.CubeGrid.MyGridBlockFracturingComponent.m_blocksRemovedDuringDeserialization">
            <summary>
            List of blocks that we are removing during deserialization.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridBlockFracturingComponent.OnBeforeRemovedFromContainer">
            <inheritdoc />
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridBlockFracturingComponent.RemoveFracturedPiece(VRage.Entity.Block.MyBlock,System.UInt32,System.Boolean)">
            <summary>
            Remove fractured piece from the fractured block.
            </summary>
            <param name="block">target fractured block</param>
            <param name="sk">shape key of the child fractured piece</param>
            <param name="deferBlockRemoval">defer the block removal if all fracture pieces are gone</param>
            <returns>returns true if all the fractures are gone</returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridBlockFracturingComponent.RemoveFracturedPieces(VRage.Entity.Block.MyBlock,System.Collections.Generic.List{System.UInt32},System.Boolean)">
            <summary>
            Remove fractured piece from the fractured block.
            </summary>
            <param name="block">target fractured block</param>
            <param name="skList">shape keys to be removed</param>
            <param name="deserializing"></param>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridBlockFracturingComponent.ChipOffFracturedPiece(VRage.Entity.Block.MyBlock,System.UInt32,System.Boolean,System.Boolean@)">
            <summary>
            Chip off single fracture piece. 
            </summary>
            <param name="block">target fractured block</param>
            <param name="sk">shape key of part to be chipped off</param>
            <param name="deferBlockRemoval">defer the block removal if all fracture pieces are gone</param>
            <param name="destroyed">set to true internally when all fracture pieces are chipped off</param>
            <returns>chipped off entity</returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridBlockFracturingComponent.ChipOffFracturedPieces(VRage.Entity.Block.MyBlock,System.Collections.Generic.List{System.UInt32},System.Boolean,System.Boolean@,System.Collections.Generic.List{VRage.Game.Entity.MyEntity})">
            <summary>
            Chip off multiple fracture pieces. 
            </summary>
            <param name="block">target fractured block</param>
            <param name="skList">list of shape keys of part to be chipped off, can be null to chip off all</param>
            <param name="outFracturedPieces">output list of generated fractured pieces (entities), can be null</param>
            <param name="deferBlockRemoval">the block is not removed even if all fractured pieces are already chipped off</param>
            <param name="destroyed">set to true internally when all fracture pieces are chipped off</param>
        </member>
        <member name="T:VRage.Components.Entity.CubeGrid.MyGridConnectivityComponent">
            <summary>
            Grid connectivity component keeps connections between neighbouring blocks in the grid.
            Underlying graph is undirected.
            </summary>
        </member>
        <member name="T:VRage.Components.Entity.CubeGrid.MyGridConnectivityComponent.ConnectivityChanged">
            <summary>
            Delegate on connectivity changed.
            </summary>
            <param name="blockAdjacency1">First block adjecency.</param>
            <param name="blockAdjacency2">Second block adjecency.</param>
            <param name="connectionBB">Connection bounding box.</param>
        </member>
        <member name="E:VRage.Components.Entity.CubeGrid.MyGridConnectivityComponent.AfterGridSplit">
            <summary>
            Event triggered after grid was added to world (with blocks already moved to new grid).
            </summary>
        </member>
        <member name="E:VRage.Components.Entity.CubeGrid.MyGridConnectivityComponent.BeforeGridSplit">
            <summary>
            Event triggered after splitted grid is created (not added to world yet), but before blocks are actually moved to the new grid.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.CubeGrid.MyGridConnectivityComponent.AdjacencyResolver">
            <summary>
            Delegate checking if two blocks can be connected.
            </summary>
        </member>
        <member name="T:VRage.Components.Entity.CubeGrid.MyGridConnectivityComponent.BlockAdjacency">
            <summary>
            Class containing block connectivity (adjacency) information.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.CubeGrid.MyGridConnectivityComponent.BlockAdjacency.Self">
            <summary>
            Reference back to the block.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.CubeGrid.MyGridConnectivityComponent.BlockAdjacency.Connections">
            <summary>
            List of references to adjacency information of adjacent blocks. 
            We refer directly to block adjacency to reduce amounts of look-ups.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.CubeGrid.MyGridConnectivityComponent.BlockAdjacency.Tag">
            <summary>
            Arbitrary integral data.
            </summary>
        </member>
        <member name="T:VRage.Components.Entity.CubeGrid.MyGridConnectivityComponent.ConnectedGraphComponent">
            <summary>
            Class wrapping list of blocks which are connected to single component.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.CubeGrid.MyGridConnectivityComponent.m_blockAdjacencies">
            <summary>
            Dictionary mapping block id -> block adjacency information.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.CubeGrid.MyGridConnectivityComponent.m_gridDataComp">
            <summary>
            Link to grid data component.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridConnectivityComponent.GetBlockAdjacency(VRage.Entity.Block.MyBlock)">
            <summary>
            Get the adjacency information of the given block.
            If the instance is missing, it is created on the fly.
            </summary>
            <param name="block">Block which adjacency information we are interested in.</param>
            <returns>Block adjacency information instance.</returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridConnectivityComponent.AreNeighbours(VRage.Entity.Block.MyBlock,VRage.Entity.Block.MyBlock)">
            <summary>
            Check if the blocks are neighbours.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridConnectivityComponent.ConnectBlocks(VRage.Entity.Block.MyBlock,VRage.Entity.Block.MyBlock,VRageMath.BoundingBox@)">
            <summary>
            Connect two blocks (block1, block2).
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridConnectivityComponent.DisconnectBlocks(VRage.Entity.Block.MyBlock,VRage.Entity.Block.MyBlock)">
            <summary>
            Break the connection between block1, block2.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridConnectivityComponent.DisconnectBlocks(VRage.Components.Entity.CubeGrid.MyGridConnectivityComponent.BlockAdjacency,VRage.Components.Entity.CubeGrid.MyGridConnectivityComponent.BlockAdjacency)">
            <summary>
            Break the connection between block1, block2.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridConnectivityComponent.CanConnectAdjacentBlocks(VRage.Entity.Block.MyBlock,VRage.Entity.Block.MyBlock,VRageMath.BoundingBox@)">
            <summary>
            Checks two adjacent blocks can be connected.
            If no AdjacencyResolver is set, this function always returns true.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridConnectivityComponent.RecomputeGraphComponents">
            <summary>
            Recompute connected graph components and return their count.
            </summary>
            <returns>connected graph component count</returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridConnectivityComponent.RecomputeGraphComponents(System.Collections.Generic.List{VRage.Components.Entity.CubeGrid.MyGridConnectivityComponent.ConnectedGraphComponent}@,System.Int32)">
            <summary>
            Recompute connected graph components and fill them to the list.
            </summary>
            <param name="connectedComponents">output list with connected graph components</param>
            <param name="thresholdToFillList">threshold - how many components there should be at least to fill the output list</param>
            <returns>connected graph component count</returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridConnectivityComponent.SuspendSplitDetection">
            <summary>
            Suspend the detection of grid splits.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridConnectivityComponent.ResumeSplitDetection">
            <summary>
            Resume the detection of grid splits.
            </summary>
            <returns>True on success, returns false if there is somebody else suspending the detection.</returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridConnectivityComponent.OnBlockAdded(VRage.Entity.Block.MyBlock,VRage.Components.Entity.CubeGrid.MyGridDataComponent)">
            <summary>
            Event handler - block was added.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridConnectivityComponent.OnBlockRemoved(VRage.Entity.Block.MyBlock,VRage.Components.Entity.CubeGrid.MyGridDataComponent)">
            <summary>
            Event handler - block was removed.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridConnectivityComponent.FloodFillTag(VRage.Components.Entity.CubeGrid.MyGridConnectivityComponent.BlockAdjacency,System.Int32,System.Collections.Generic.Stack{VRage.Components.Entity.CubeGrid.MyGridConnectivityComponent.BlockAdjacency})">
            <summary>
            Flood fill the given tag value from the given initial block.
            Flood fill does not continue over blocks having same tag as the one that is being flood filled.
            </summary>
            <param name="initial">initial block (adjacency) instance</param>
            <param name="tag">flooded value</param>
            <param name="pooledStack">pass the reusable helper stack, this field can be null</param>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridConnectivityComponent.ResetBlockTags(System.Int32)">
            <summary>
            Reset tag value of all block adj instances to given value.
            </summary>
            <param name="newTagValue">New tag value</param>
        </member>
        <member name="T:VRage.Components.Entity.CubeGrid.MyGridConnectivityComponent.MyGridSplitting">
            <summary>
            Helper for grid splitting.
            </summary>
        </member>
        <member name="T:VRage.Components.Entity.CubeGrid.MyGridDataComponent">
            
             <summary>
             Grid data component stores cube blocks in sparse grid.
             It also provides cube data queries and modification commands.
             </summary>
        </member>
        <member name="T:VRage.Components.Entity.CubeGrid.MyGridDataComponent.BeforeMergeDelegate">
            <summary>
            Delegate used for before merge event. NOTE: thisBlocks and otherBlocks will be cleared after process is finished.
            </summary>
            <param name="finalGridData"></param>
            <param name="otherGridData"></param>
            <param name="thisBlocks">List of blocks from FINAL grid that triggered the merge. This list WILL BE CLEARED after proccess is finished.</param>
            <param name="otherBlocks">List of blocks from OTHER grid that triggered the merge. This list WILL BE CLEARED after proccess is finished.</param>
        </member>
        <member name="T:VRage.Components.Entity.CubeGrid.MyGridDataComponent.AfterMergeDelegate">
            <summary>
            Delegate used for before merge event. NOTE: thisBlocks and otherBlocks will be cleared after process is finished.
            </summary>
            <param name="finalGridData"></param>
            <param name="otherGridData"></param>
            <param name="thisBlocks">List of blocks from FINAL grid that triggered the merge. This list WILL BE CLEARED after proccess is finished.</param>
            <param name="otherBlocks">List of blocks from OTHER grid that triggered the merge. This list WILL BE CLEARED after proccess is finished.</param>
        </member>
        <member name="E:VRage.Components.Entity.CubeGrid.MyGridDataComponent.BlockAdded">
            <summary>
            Event fired when a single block is added to the grid.
            </summary>
        </member>
        <member name="E:VRage.Components.Entity.CubeGrid.MyGridDataComponent.BeforeBlockRemoved">
            <summary>
            Event fired right before a single block is removed from the grid.
            </summary>
        </member>
        <member name="E:VRage.Components.Entity.CubeGrid.MyGridDataComponent.BlockRemoved">
            <summary>
            Event fired when a single block is removed from the grid.
            </summary>
        </member>
        <member name="E:VRage.Components.Entity.CubeGrid.MyGridDataComponent.BlockChanged">
            <summary>
            Event fired when a single block is modified (either model or physics changed).
            </summary>
        </member>
        <member name="E:VRage.Components.Entity.CubeGrid.MyGridDataComponent.BeforeMerge">
            <summary>
            Event fired just before other grid is merged to this grid.
            This message is *only* called on the surviving grid.
            If you want something for your block components, use MyBlockComponent.Move instead.
            </summary>
        </member>
        <member name="E:VRage.Components.Entity.CubeGrid.MyGridDataComponent.AfterMerge">
            <summary>
            Event fired after other grid is merged to this grid.
            This message is *only* called on the surviving grid.
            If you want something for your block components, use MyBlockComponent.Move instead.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.AddBlock(VRage.Entity.Block.MyBlock,System.Boolean)">
            <summary>
            Add a block and optionally it's block entity to the grid.
            
            If the entity is not provide then only the slim block is added.
            </summary>
            <param name="block">Block to be added.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.RemoveBlock(VRage.Entity.Block.MyBlock,System.Boolean)">
            <summary>
            Remove a given block.
            
            This will also remove the fat block if any.
            
            If you remove the last block from the grid the grid will automatically close itself.
            </summary>
            <param name="block"></param>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.ClearBlocks(System.Boolean)">
            <summary>
            Local method for clearing all blocks, firing an event on each block removal if requested.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.ChangeModel(VRage.Entity.Block.MyBlock,VRage.Models.IMyModel)">
            <summary>
            Changes model of a block.
            </summary>
            <param name="block">Block of which the model will be changed.</param>
            <param name="newModel">New model to set.</param>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.NotifyBlockChanged(VRage.Entity.Block.MyBlock)">
            <summary>
            Notify the grid that a block has been modified and needs to be refreshed.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.GetBlockLocalMatrix(VRage.Entity.Block.MyBlock)">
            <summary>
            Gets blocks local transform in relation to this grid.
            The block center is used as a pivot point.
            </summary>
            <param name="block">Block to get transform for.</param>
            <returns>Local transform.</returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.GetBlockLocalTransform(VRage.Entity.Block.MyBlock)">
            <summary>
            Gets blocks local transform in relation to this grid.
            The block center is used as a pivot point.
            </summary>
            <param name="block">Block to get transform for.</param>
            <returns>Local transform.</returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.GetGridPositionLocalMatrix(VRageMath.Vector3I,VRageMath.MyBlockOrientation)">
            <summary>
            Gets Local Tranform relative to this grid.
            </summary>
            <param name="gridPosition">Grid position in this grid.</param>
            <param name="orientation">Orientation in this grid.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.GetGridPositionLocalTransform(VRageMath.Vector3I,VRageMath.MyBlockOrientation)">
            <summary>
            Gets Local Tranform relative to this grid.
            </summary>
            <param name="gridPosition">Grid position in this grid.</param>
            <param name="orientation">Orientation in this grid.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.GetBlockWorldMatrix(VRage.Entity.Block.MyBlock,System.Boolean)">
            <summary>
            Gets blocks world transform in relation to this grid.
            </summary>
            <param name="block">Block to caluculate transform for.</param>
            <param name="center">Indicates if position will be in the center of the block or at its grid coord position.</param>
            <returns>World matrix of the block.</returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.GetGridPositionWorldMatrix(VRageMath.Vector3I,VRageMath.MyBlockOrientation)">
            <summary>
            Get grid position world transform in relation to this grid.
            </summary>
            <param name="gridPosition">Grid position to calculate transform for.</param>
            <param name="orientation">Orientation</param>
            <returns>World matrix of the position.</returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.GetBlockWorldBounds(VRage.Entity.Block.MyBlock)">
            <summary>
            Gets Oriented world bounding box of given block;
            </summary>
            <param name="block">Block to get oriented bounding box for.</param>
            <returns>Oriented bounding box in world coordinates.</returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.GetBlockLocalBounds(VRage.Entity.Block.MyBlock)">
            <summary>
            Gets local bounding box of given block.
            </summary>
            <returns>Bounding box in local coordinates.</returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.GetGridLocalBounds(VRageMath.Vector3I,VRageMath.Vector3I)">
            <summary>
            Returns bounds in relation to this grid, where min and max are in this grid coordinates.
            </summary>
            <param name="min">Min position in this grid coordinates.</param>
            <param name="max">Max position in this grid coordinates.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.GetBlocks(VRageMath.Vector3I,System.Collections.Generic.List{VRage.Entity.Block.MyBlock})">
            <summary>
            Gets block at given grid coordinate. If result list is provided with blocks, the same blocks won't be added twice.
            </summary>
            <param name="gridCoordinate">Grid coordinate to return blocks for.</param>
            <param name="results">Blocks at given grid coordinate.</param>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.GetBlocks``1(VRageMath.Vector3I,System.Collections.Generic.List{VRage.Entity.Block.MyBlock})">
            <summary>
            Gets block at given grid coordinate. If result list is provided with blocks, the same blocks won't be added twice.
            </summary>
            <param name="gridCoordinate">Grid coordinate to return blocks for.</param>
            <param name="results">Blocks at given grid coordinate.</param>
            <typeparam name="T">Exact type of blocks to return. Does not return child classes of that type</typeparam>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.GetBlocks``1(VRageMath.Vector3I,System.Collections.Generic.List{VRage.Entity.Block.BlockId})">
            <summary>
            Gets block Ids at given grid coordinate. If result list is provided with blocks, the same blocks won't be added twice.
            </summary>
            <param name="gridCoordinate">Grid coordinate to return blocks for.</param>
            <param name="results">Block Ids at given grid coordinate.</param>
            <typeparam name="T">Exact type of blocks to return. Does not return child classes of that type</typeparam>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.GetBlocks(VRageMath.Vector3I,System.Collections.Generic.List{VRage.Entity.Block.BlockId})">
            <summary>
            Gets block Ids at given grid coordinate. If result list is provided with blocks, the same blocks won't be added twice.
            </summary>
            <param name="gridCoordinate">Grid coordinate to return blocks for.</param>
            <param name="results">Block Ids at given grid coordinate.</param>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.GetBlocks``1(System.Collections.Generic.List{``0})">
            <summary>
            Gets all blocks of particular type in the grid.
            </summary>
            <typeparam name="T">Type of the blocks to get</typeparam>
            <param name="results">All blocks of type T. You can provide list already with blocks. Blocks never repeat in results.</param>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.GetBlock(VRage.Entity.Block.BlockId)">
            <summary>
            Get the block with given id contained in this grid data.
            </summary>
            <param name="blockId">The id of the block to get.</param>
            <returns>The found block or null.</returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.TryGetBlock(VRage.Entity.Block.BlockId,VRage.Entity.Block.MyBlock@)">
            <summary>
            Try to find a block with given id.
            </summary>
            <param name="blockId"></param>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.Contains(VRage.Entity.Block.BlockId)">
            <summary>
            Whether this grid contains the requested block.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.GetAnyBlock(VRageMath.Vector3I)">
            <summary>
            Get the first block at the provided coordinates.
            </summary>
            <param name="gridCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.GetFirstBlock">
            <summary>
            Returns first found block in the data from grid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.GetBlocksInRange(VRageMath.Vector3I,VRageMath.Vector3I,System.Collections.Generic.List{VRage.Entity.Block.MyBlock})">
            <summary>
            Get blocks inside of grid range. If result list is provided with blocks, the same blocks won't be added twice.
            </summary>
            <param name="min">Minimum position in grid coordinates.</param>
            <param name="max">Maximum position in grid coordinates.</param>
            <param name="results">Blocks in range between minimum and maximum position.</param>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.GetBlocksInBoundingBox(VRageMath.OrientedBoundingBoxD@,System.Collections.Generic.List{VRage.Entity.Block.MyBlock})">
            <summary>
            Query blocks overlapping of local space obb. If result list is provided with blocks, the same blocks won't be added twice.
            </summary>
            <param name="box">Local Oriented bounding box to check with.</param>
            <param name="results">Blocks that are inside of the bounding box.</param>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.GetBlocksInLine(VRageMath.LineD,System.Collections.Generic.List{VRage.Entity.Block.MyBlock})">
            <summary>
            Get blocks overlapping local space line. If result list is provided with blocks, the same blocks won't be added twice.
            </summary>
            <param name="line">Line in local space to grid.</param>
            <param name="results">Blocks intersecting with line.</param>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.GetFirstBlockInLine(VRageMath.LineD,System.Double@)">
            <summary>
            Get closest block in local space.
            </summary>
            <param name="line">Line in local space to grid.</param>
            <returns>Null if no block in line.</returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.GetBlocksInSphere(VRageMath.BoundingSphereD,System.Collections.Generic.List{VRage.Entity.Block.MyBlock})">
            <summary>
            Get Blocks overlapping local space sphere. If result list is provided with blocks, the same blocks won't be added twice.
            </summary>
            <param name="sphere">Sphere in local space.</param>
            <param name="results">Blocks that are inside or intersecting with sphere.</param>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.GetNeighbors(VRage.Entity.Block.MyBlock,System.Collections.Generic.List{VRage.Entity.Block.MyBlock},System.Boolean)">
            <summary>
            Get neighbors of a block. It includes blocks that are in the same location (compounded).
            </summary>
            <param name="block">Block to check neighbors for.</param>
            <param name="neighboringBlocks">List of neighbor blocks that will be filled.</param>
            <param name="checkEdges">Indicates if edges should be check also. (Does not include corners)</param>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.CheckNeighbor(VRage.Entity.Block.MyBlock,VRageMath.Vector3I,System.Collections.Generic.List{VRage.Entity.Block.MyBlock})">
            <summary>
            Gets blocks neighboring grid coordinate.
            </summary>
            <param name="block"></param>
            <param name="gridCoord"></param>
            <param name="neighboringBlocks"></param>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.GetNeighbors(System.Collections.Generic.List{VRageMath.Vector3I},System.Collections.Generic.List{VRage.Entity.Block.MyBlock},VRage.Entity.Block.MyBlock,System.Boolean)">
            <summary>
            Get neighbors of grid position. It includes blocks that are in the same location (compounded).
            </summary>
            <param name="gridCoords">Grid coordinates to check for.</param>
            <param name="result">List of neighbor blocks that will be filled.</param>
            <param name="ignoreBlock">Block to ignore.</param>
            <param name="checkEdges">Indicates if edges should be check also. (Does not include corners)</param>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.SetCoordSystem(System.Int64)">
            <summary>
            Sets coordinate system on the grid and sends MP message to clients.
            </summary>
            <param name="coordSystemId"></param>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridDataComponent.Merge(VRage.Components.Entity.CubeGrid.MyGridDataComponent)">
            <summary>
            Merges two grid data to one.
            </summary>
            <param name="otherGridData">Grid data merged to this one.</param>
        </member>
        <member name="P:VRage.Components.Entity.CubeGrid.MyGridDataComponent.Blocks">
            <summary>
            Get all blocks on the grid.
            </summary>
        </member>
        <member name="P:VRage.Components.Entity.CubeGrid.MyGridDataComponent.BlockPositions">
            <summary>
            Get all occupied Grid positions.
            </summary>
        </member>
        <member name="P:VRage.Components.Entity.CubeGrid.MyGridDataComponent.Min">
            <summary>
            Gets min coordinate of the grid.
            </summary>
        </member>
        <member name="P:VRage.Components.Entity.CubeGrid.MyGridDataComponent.Max">
            <summary>
            Gets max exclusive coordinate of the grid.
            </summary>
        </member>
        <member name="P:VRage.Components.Entity.CubeGrid.MyGridDataComponent.Size">
            <summary>
            Gets block size of the grid.
            </summary>
        </member>
        <member name="P:VRage.Components.Entity.CubeGrid.MyGridDataComponent.GridFamilyId">
            <summary>
            Get the id of grid family.
            </summary>
        </member>
        <member name="P:VRage.Components.Entity.CubeGrid.MyGridDataComponent.LocalBoundingBox">
            <summary>
            Gets local bounding box of the grid.
            </summary>
        </member>
        <member name="P:VRage.Components.Entity.CubeGrid.MyGridDataComponent.WorldBoundingBox">
            <summary>
            Gets world oriented bounding box of the grid.
            </summary>
        </member>
        <member name="P:VRage.Components.Entity.CubeGrid.MyGridDataComponent.CoordinateSystem">
            <summary>
            Local coordinate system this grid is aligned to.
            </summary>
        </member>
        <member name="T:VRage.Components.Entity.CubeGrid.MyGridDataBlockPlaneCounter">
            <summary>
            This is a helper class that holds count of blocks in each cutting plane. 
            It is an optimization of bounding box generation and upkeep.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.CubeGrid.MyGridDataBlockPlaneCounter.m_xBlockCounter">
            <summary>
            Counting number of blocks in x-plane.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.CubeGrid.MyGridDataBlockPlaneCounter.m_yBlockCounter">
            <summary>
            Counting number of blocks in y-plane.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.CubeGrid.MyGridDataBlockPlaneCounter.m_zBlockCounter">
            <summary>
            Counting number of blocks in z-plane.
            </summary>
        </member>
        <member name="T:VRage.Components.Entity.CubeGrid.MyGridGeometry">
            <summary>
            Helper class that can perform several geometric operations inside a uniform grid.
            
            Important!: Cube Block {0,0,0} is centered at the origin, this is consistent across the engine
            (grids and voxels both use this convention).
            
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.CubeGrid.MyGridGeometry.m_size">
            <summary>
            The size of the block of the grid. (ex. big, small)
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.CubeGrid.MyGridGeometry.m_min">
            <summary>
            Min coordinate of the grid.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.CubeGrid.MyGridGeometry.m_max">
            <summary>
            Max coordinate of the grid.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridGeometry.#ctor(System.Single,VRageMath.Vector3I,VRageMath.Vector3I)">
            <summary>
            Create a new coordinate helper.
            </summary>
            <param name="size">Size of the block of the grid.</param>
            <param name="min">Minimum size of the grid.</param>
            <param name="max">Max size of the grid, including size.</param>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridGeometry.GridPosition(VRageMath.Vector3D)">
            <summary>
            Get a grid position from a local position.
            </summary>
            <param name="localPos"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridGeometry.BlockPosition(VRageMath.Vector3I)">
            <summary>
            get the position of the center of a cube from it's grid position.
            </summary>
            <param name="gridPos">Position of the cube.</param>
            <returns>Local space center of the cube.</returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridGeometry.CalculateBounds(VRageMath.Vector3I,VRageMath.Vector3I)">
            <summary>
            Calculate the bounding boxes of a range of cubes.
            </summary>
            <param name="min">Minimum cube coordinate.</param>
            <param name="max">Maximum cube coordinate including size.</param>
            <returns>The bounding box for cubes in the range.</returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridGeometry.RaycastBlocks(VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Perform a raycast over a cube range and return the cubes overlapped by the ray.
            
            The ray is clamped by the min/max grid coordinates.
            </summary>
            <param name="localStart">Origin of the ray.</param>
            <param name="localEnd">Final destination of the ray.</param>
            <returns>Enumeration of travelled cubes.</returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridGeometry.CubesInSphere(VRageMath.Vector3D,System.Double)">
            <summary>
            Overlap a sphere against the grid an determine all the cubes that overlap it.
            </summary>
            <param name="position">Position of the sphere in local space.</param>
            <param name="radius">Radius of the sphere.</param>
            <returns>Enumeration of overlapped cubes.</returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridGeometry.CubesInOBB(VRageMath.OrientedBoundingBoxD)">
            <summary>
            Overlap an oriented bounding box against the grid an determine all the cubes that overlap it.
            </summary>
            <param name="obb">The bounding box</param>
            <returns>Enumeration of overlapped cubes.</returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridGeometry.IsPointInside(VRageMath.Vector3D,VRageMath.Vector3I,VRageMath.Vector3I)">
            <summary>
            Checks if point in grid coordinates is inside min/max range.
            </summary>
            <param name="p">Point in GRID coordinates.</param>
            <param name="min">Min grid coordinate.</param>
            <param name="max">Max grid coordinate.</param>
            <returns>True if point inside.</returns>
        </member>
        <member name="T:VRage.Components.Entity.CubeGrid.MyGridHierarchyIdsComponent">
            <summary>
            Grid hierarchy component that contains just mapping from block id to entity id. Lightweight version of MyGridHierarchyComponent.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.CubeGrid.MyGridHierarchyIdsComponent.m_blockToEntityId">
            <summary>
            Block id to entity dictionary.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridHierarchyIdsComponent.TryGetEntityId(VRage.Entity.Block.BlockId,VRage.Scene.EntityId@)">
            <summary>
            Try to get the id of entity bound to given block.
            </summary>
        </member>
        <member name="T:VRage.Components.Entity.CubeGrid.MyGridHierarchyComponent">
            <summary>
            Grid hierarchy component. Contains mapping of block to entity. Internally adds/remove entity to/from base hierarchy.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.CubeGrid.MyGridHierarchyComponent.m_blockToEntity">
            <summary>
            Block id to entity dictionary.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.CubeGrid.MyGridHierarchyComponent.m_blockToEntityOb">
            <summary>
            Block id to entity object builders.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.CubeGrid.MyGridHierarchyComponent.m_gridDataComp">
            <summary>
            Reference to the grid data component.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.CubeGrid.MyGridHierarchyComponent.m_merging">
            <summary>
            Whether this grid is being merged to another.
            </summary>
            <remarks>
            This flag prevents block removals from affecting this component, which in turn lets use the cached data to properly move grid entities once the merge is done.
            </remarks>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridHierarchyComponent.OnBeforeMerge(VRage.Components.Entity.CubeGrid.MyGridDataComponent,VRage.Components.Entity.CubeGrid.MyGridDataComponent,System.Collections.Generic.List{VRage.Entity.Block.MyBlock},System.Collections.Generic.List{VRage.Entity.Block.MyBlock})">
            <summary>
            Move entities and flag the component so the dictionary does not get cleared.
            </summary>
            <param name="finalGridData"></param>
            <param name="otherGridData"></param>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridHierarchyComponent.OnAfterMerge(VRage.Components.Entity.CubeGrid.MyGridDataComponent,VRage.Components.Entity.CubeGrid.MyGridDataComponent,System.Collections.Generic.List{VRage.Entity.Block.MyBlock},System.Collections.Generic.List{VRage.Entity.Block.MyBlock})">
            <summary>
            Set blocks after the merge is done.
            </summary>
            <param name="finalGridData"></param>
            <param name="otherGridData"></param>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridHierarchyComponent.BeforeSplit(VRage.Game.Entity.MyEntity,VRage.Game.Entity.MyEntity,System.Collections.Generic.List{VRage.Entity.Block.MyBlock})">
            <summary>
            Move blocks before entity split.
            </summary>
            <param name="originalEntity"></param>
            <param name="splitEntity"></param>
            <param name="blocksMoved"></param>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridHierarchyComponent.OnAfterSplit(VRage.Game.Entity.MyEntity,VRage.Game.Entity.MyEntity,System.Collections.Generic.List{VRage.Entity.Block.MyBlock})">
            <summary>
            Set block ids after entity split.
            </summary>
            <param name="originalEntity"></param>
            <param name="splitEntity"></param>
            <param name="blocksMoved"></param>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridHierarchyComponent.OnBlockRemoved(VRage.Entity.Block.MyBlock,VRage.Components.Entity.CubeGrid.MyGridDataComponent)">
            <summary>
            Remoive block entity for removed block..
            </summary>
            <param name="myBlock">Block to remove.</param>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridHierarchyComponent.OnBlockAdded(VRage.Entity.Block.MyBlock,VRage.Components.Entity.CubeGrid.MyGridDataComponent)">
            <summary>
            Handle a block being added to the grid.
            </summary>
            <remarks>
            If the block has a matching entity container definition then a block entity is created for it.
            </remarks>
            <param name="myBlock">Block to add.</param>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridHierarchyComponent.Contains(VRage.Entity.Block.MyBlock)">
            <summary>
            Indicates if block exists in the hierarchy.
            </summary>
            <param name="block">Block to check</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridHierarchyComponent.GetBlockEntity(VRage.Entity.Block.BlockId)">
            <summary>
            Get fat part of the block (the entity).
            </summary>
            <param name="blockId">Block id to check for.</param>
            <returns>Returns Entity of the block, otherwise null.</returns>
        </member>
        <member name="F:VRage.Components.Entity.CubeGrid.MyGridPhysicsShapeComponent.m_blockAdditionalMassProviders">
            <summary>
            Custom callback delegates that can return additional mass per block.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridPhysicsShapeComponent.GenerateBlockShape(VRage.Entity.Block.MyBlock)">
            <summary>
            Generate physical shape and mass properties for gioven block.
            </summary>
            <param name="myBlock">reference to the block</param>
            <returns>shape description (hkshape, mass properties)</returns>
        </member>
        <member name="T:VRage.Components.Entity.CubeGrid.MyGridWorldGeometry">
            <summary>
            Helper class that can perform several geometric operations inside a uniform grid.
            
            This helper has knowledge of the grids world position and can perform world to local and local to world transformations.
            </summary>
        </member>
        <member name="P:VRage.Components.Entity.CubeGrid.MyGridWorldGeometry.LocalGeometry">
            <summary>
            Local space geometry helper.
            </summary>
        </member>
        <member name="F:VRage.Components.Entity.CubeGrid.MyGridWorldGeometry.m_transform">
            <summary>
            Position component of the grid.
            This is used for world to local and local to world conversions.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridWorldGeometry.GridPosition(VRageMath.Vector3D)">
            <summary>
            Get a grid position from a world position.
            </summary>
            <param name="world"></param>
            <returns>local grid position.</returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridWorldGeometry.BlockPosition(VRageMath.Vector3I)">
            <summary>
            Get the position of the center of a cube in world space from it's grid position.
            </summary>
            <param name="blockPositionInGrid">Position of the cube in relation to grid.</param>
            <returns>Local space center of the cube.</returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridWorldGeometry.BlockWorldTransform(VRageMath.Vector3I,VRageMath.MyBlockOrientation)">
            <summary>
            Gets block world transform from block position and orientation in the grid.
            </summary>
            <param name="blockPositionInGrid">Block position in grid.</param>
            <param name="orientation">Block orientation.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridWorldGeometry.TransformTo(VRage.Components.Entity.CubeGrid.MyGridWorldGeometry@,VRageMath.Vector3I,VRageMath.MyBlockOrientation,VRageMath.Vector3I@,VRageMath.MyBlockOrientation@)">
            <summary>
            Transform a block position/orientation from this grid to another grid.
            
            If the two grids do not have the same size the results of this operation are undefined.
            </summary>
            <param name="other">The other grid space.</param>
            <param name="gridPos">The position in this space.</param>
            <param name="orientation">The orientation in this space.</param>
            <param name="resultPosition">The resulting position on the other grid's space.</param>
            <param name="resultOrientation">The resulting orientation on the other grid's space.</param>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridWorldGeometry.CalculateBounds(VRageMath.Vector3I,VRageMath.Vector3I)">
            <summary>
            Calculate the bounding boxes of a range of cubes.
            </summary>
            <param name="min">Minimum cube position.</param>
            <param name="max">Maximum cube position.</param>
            <returns>The bounding box for cubes in the range.</returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridWorldGeometry.RaycastBlocks(VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Perform a raycast over a cube range and return the cubes overlapped by the ray.
            
            The ray is clamped by the min/max grid coordinates.
            </summary>
            <param name="worldStart">Origin of the ray in world.</param>
            <param name="worldEnd">Final destination of the ray in world.</param>
            <returns>Enumeration of travelled cubes.</returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridWorldGeometry.CubesInSphere(VRageMath.Vector3D,System.Double)">
            <summary>
            Overlap a sphere against the grid an determine all the cubes that overlap it.
            </summary>
            <param name="worldPosition">Position of the sphere in world space.</param>
            <param name="radius">Radius of the sphere.</param>
            <returns>Enumeration of overlapped cube blocks.</returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyGridWorldGeometry.CubesInOBB(VRageMath.OrientedBoundingBoxD)">
            <summary>
            Overlap a world oriented bounding box against the grid an determine all the cubes that overlap it.
            </summary>
            <param name="worldObb">The bounding box</param>
            <returns>Enumeration of overlapped cubes.</returns>
        </member>
        <member name="T:VRage.Components.Entity.CubeGrid.MyRenderComponentGrid.BlockRenderableChangedDelegate">
            <summary>
            Raised when a block's set of renderables changes
            </summary>
            <param name="owner">grid renderer owning these renderables</param>
            <param name="block">block that changed renderables</param>
            <param name="renderObjects">Render objects</param>
        </member>
        <member name="E:VRage.Components.Entity.CubeGrid.MyRenderComponentGrid.BlockRenderablesChanged">
            <summary>
            Event raised when a block's renderables change
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyRenderComponentGrid.GetBlockRenderObjectID(VRage.Entity.Block.MyBlock)">
            <summary>
            Gets render object id of an block in the grid.
            </summary>
            <param name="block">Block instance on the grid.</param>
            <returns>Render id of block.</returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyRenderComponentGrid.GetBlockRenderObjectIDs(VRage.Entity.Block.BlockId)">
            <summary>
            Gets render object ids of an block in the grid.
            </summary>
            <param name="blockId">Block id of the block in this grid.</param>
            <returns>Render ids of block.</returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyRenderComponentGrid.GetBlockRenderObjectID(VRage.Entity.Block.BlockId)">
            <summary>
            Gets render object id of an block in the grid.
            </summary>
            <param name="blockId">Block id of the block in this grid.</param>
            <returns>Render id of block.</returns>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyRenderComponentGrid.HighlightBlock(VRage.Entity.Block.MyBlock,System.Nullable{VRageMath.Color},System.Single)">
            <summary>
            Changes highlight of a given block.
            </summary>
            <param name="blockToHighlight">Block to change highlight on</param>
            <param name="color">Color of the highlight.</param>
            <param name="thickness">Thickness of the highlight.</param>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyRenderComponentGrid.Highlight(System.Nullable{VRageMath.Color},System.Single)">
            <summary>
            Changes highlight on whole grid.
            </summary>
            <param name="color">Color of the highlight.</param>
            <param name="thickness">Thickness of the highlight.</param>
        </member>
        <member name="M:VRage.Components.Entity.CubeGrid.MyRenderComponentGrid.SetMaterialProperties(VRage.Entity.Block.BlockId,System.String,System.Nullable{System.Boolean},System.Nullable{System.Single},System.Nullable{VRageMath.Vector3})">
            <summary>
            Sets specific properties for a given material.
            
            Please take care as this may prevent merge instancing from merging the blocks efficiently.
            </summary>
            <param name="block">The block whose material should be updated.</param>
            <param name="material">The material whose properties should be updated.</param>
            <param name="enabled">(Optional) If set, sets the material enabled or disabled. Ignored if null.</param>
            <param name="emissivity">(Optional) If set, sets the material's emissivity. Ignored if null.</param>
            <param name="diffuseColor">(Optional) If set, sets the material diffuse color. Ignored if null.</param>
        </member>
        <member name="T:VRage.Components.Entity.Destruction.MyEntityFracturingComponent">
            <summary>
            Entity fracturing component tracks fractured pieces in the entity and provides methods to create them.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.Destruction.MyEntityFracturingComponent.RemoveFracturedPiece(System.UInt32)">
            <summary>
            Remove fractured piece from this fractured entity.
            </summary>
            <param name="sk">shape key of the child fractured piece</param>
        </member>
        <member name="M:VRage.Components.Entity.Destruction.MyEntityFracturingComponent.RemoveFracturedPiecesSync(System.Collections.Generic.List{System.UInt32})">
            <summary>
            Remove fractured pieces from this fractured entity.
            Server-side method, synced to clients.
            </summary>
            <param name="skList">shape keys to be removed</param>
        </member>
        <member name="M:VRage.Components.Entity.Destruction.MyEntityFracturingComponent.RemoveFracturedPiecesLocal(System.Collections.Generic.List{System.UInt32})">
            <summary>
            Remove fractured pieces from this fractured entity.
            </summary>
            <param name="skList">shape keys to be removed</param>
        </member>
        <member name="M:VRage.Components.Entity.Destruction.MyEntityFracturingComponent.ChipOffFracturedPiece(System.UInt32)">
            <summary>
            Chip off single fracture piece. 
            </summary>
            <param name="sk">shape key of part to be chipped off</param>
            <returns>chipped off entity</returns>
        </member>
        <member name="M:VRage.Components.Entity.Destruction.MyEntityFracturingComponent.ChipOffFracturedPieces(System.Collections.Generic.List{System.UInt32},System.Collections.Generic.List{VRage.Game.Entity.MyEntity})">
            <summary>
            Chip off multiple fracture pieces. 
            </summary>
            <param name="skList">list of shape keys of part to be chipped off, can be null to chip off all</param>
            <param name="outFracturedPieces">output list of generated fractured pieces (entities), can be null</param>
        </member>
        <member name="M:VRage.Components.Entity.Destruction.MyEntityFracturingComponent.SplitByPlane(VRageMath.Plane@,VRage.Game.Entity.MyEntity@)">
            <summary>
            Split the entity by plane. This does not create any individual fractured pieces.
            </summary>
            <param name="plane">cutting plane</param>
            <param name="splitEntity">newly created (split) entity - can be null if no splitting happened</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Components.Entity.Destruction.MyEntityFracturingComponent.SplitByShapeKeysSync(System.Collections.Generic.List{System.UInt32},VRage.Game.Entity.MyEntity@)">
            <summary>
            Split the fractured entity into two entities, move model parts listed in splitGroupShapeKeys from this entity to newly created one.
            </summary>
            <param name="splitGroupShapeKeys">list of shape keys identifying parts to be moved to new entity</param>
            <param name="outSplitEntity">newly created entity</param>
        </member>
        <member name="T:VRage.Components.Entity.MyCoroutineComponent">
            <summary>
            Coroutine manager on a given entity.
            Automatically created, does not serialize anything, just manages the coroutines according to a budget.
            </summary>
        </member>
        <member name="P:VRage.Components.Entity.MyCoroutineComponent.FrameBudget">
            <summary>
            Frame budget this coroutine may consume.
            If coroutines exceed this timing, it will stop updating any further coroutines for that frame.
            May cause starvation if you have a particularly heavy coroutine.
            </summary>
        </member>
        <member name="P:VRage.Components.Entity.MyCoroutineComponent.ActiveCoroutines">
            <summary>
            Number of active coroutines.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.MyCoroutineComponent.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            Starts a coroutine.
            </summary>
            <param name="routine">Method to start a coroutine on.</param>
            <returns>Instance of coroutine.</returns>
        </member>
        <member name="M:VRage.Components.Entity.MyCoroutineComponent.StopCoroutine(VRage.Components.Entity.MyCoroutine)">
            <summary>
            Stops a specific coroutine.
            </summary>
            <param name="routine">Routine to stop.</param>
        </member>
        <member name="M:VRage.Components.Entity.MyCoroutineComponent.StopAllCoroutines">
            <summary>
            Stops all coroutines.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.MyCoroutineExtensions.StartCoroutine(VRage.Game.Components.MyEntityComponent,System.Collections.IEnumerator)">
            <summary>
            Starts a coroutine.
            </summary>
            <param name="routine">Method to start a coroutine on.</param>
            <returns>Instance of coroutine.</returns>
        </member>
        <member name="M:VRage.Components.Entity.MyCoroutineExtensions.StopCoroutine(VRage.Game.Components.MyEntityComponent,VRage.Components.Entity.MyCoroutine)">
            <summary>
            Stops a specific coroutine.
            </summary>
            <param name="routine">Routine to stop.</param>
        </member>
        <member name="T:VRage.Components.Entity.WaitForGameTime">
            <summary>
            Waits for some amount of game time.
            Pausing the game also pauses this coroutine's timing.
            </summary>
        </member>
        <member name="T:VRage.Components.Entity.Render.IMyProxyRenderer">
            <summary>
            Interface describing a render component that can draw child entities.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.Render.IMyProxyRenderer.GetChildRenderObjectId(VRage.Scene.EntityId)">
            <summary>
            Get the render objects for a child entity.
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="F:VRage.Components.Entity.MyModelAttachmentComponent.m_ignoredAttachmentPoints">
            <summary>
            Set of attachment points whose matrices should not be touched by this component.
            Used, for example, for entities who get animated externally.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.MyModelAttachmentComponent.GetAttachmentPosition(VRage.Definitions.Components.MyModelAttachmentComponentDefinition.AttachmentPoint)">
            <summary>
            Returns the local space matrix for the attachment position.
            </summary>
        </member>
        <member name="M:VRage.Components.Entity.MyModelAttachmentComponent.TryAttachEntityToPoint(VRage.Game.Entity.MyEntity,VRage.Utils.MyStringHash,System.Nullable{VRageMath.MatrixD})">
            <summary>
            Try to attach the specified entity to the attachment point.
            An attached entity can only be attached once, to move it to another slot remove it first before re-attaching.
            </summary>
            <param name="entity">Entity to try to attach.</param>
            <param name="attachmentPointName">Attachment point to attach to.</param>
            <returns>True if successfully attached, false otherwise.</returns>
        </member>
        <member name="M:VRage.Components.Entity.MyModelAttachmentComponent.TryRemoveEntity(VRage.Game.Entity.MyEntity)">
            <summary>
            Remove attached entity from its attachment point.
            </summary>
            <param name="entity">Entity to remove.</param>
            <returns>True if the entity was removed, false otherwise.</returns>
        </member>
        <member name="M:VRage.Components.Entity.MyModelAttachmentComponent.ClearAttachments(VRage.Utils.MyStringHash)">
            <summary>
            Remove all attached entities from specified attachment point.
            </summary>
            <param name="attachmentPointName">Attachment point to clear.</param>
        </member>
        <member name="M:VRage.Components.Entity.MyModelAttachmentComponent.GetEntityAttachmentPoint(VRage.Game.Entity.MyEntity)">
            <summary>
            Return the attachment point for the specified entity.
            If the entity is not attached, returns string.Empty.
            </summary>
            <param name="entity">Entity to check.</param>
            <returns>Attachment point entity is attached to, or string. Empty if entity is not attached.</returns>
        </member>
        <member name="M:VRage.Components.Entity.MyModelAttachmentComponent.GetAttachedEntities(VRage.Utils.MyStringHash)">
            <summary>
            Get all attached entities to an attachment point.
            </summary>
            <param name="attachmentPointName">Attachment point to retrieve entities for.</param>
            <returns>Read-Only collection of entities.</returns>
        </member>
        <member name="M:VRage.Components.Entity.MyModelAttachmentComponent.GetDefaultEntity(VRage.Utils.MyStringHash)">
            <summary>
            Get the default entity for an attachment point, if applicable.
            </summary>
            <param name="attachmentPointName">Attachment point to retrieve default entity for.</param>
            <returns>Default entity, or null.</returns>
        </member>
        <member name="M:VRage.Components.Entity.MyModelAttachmentComponent.SetAdditionalMatrix(VRage.Game.Entity.MyEntity,VRageMath.MatrixD)">
            <summary>
            Sets the additional matrix for a specific entity.
            </summary>
            <param name="entity">Entity to set the matrix for.</param>
            <param name="matrix">Additional matrix for the entity.</param>
        </member>
        <member name="M:VRage.Components.Entity.MyModelAttachmentComponent.ComputeLocalMatrixForEntity(VRage.Game.Entity.MyEntity)">
            <summary>
            Computes the local matrix for the specified entity.
            If the entity is not attached to any valid attachment point, will return MatrixD.Identity instead.
            </summary>
            <param name="entity">Entity to compute matrix for.</param>
            <returns>Local matrix for the entity.</returns>
        </member>
        <member name="M:VRage.Components.Entity.MyModelAttachmentComponent.SetAttachmentPointManagedState(VRage.Utils.MyStringHash,System.Boolean)">
            <summary>
            Inform the attachment component to not touch the local matrix of any entities connected to the specified attachment point.
            </summary>
            <param name="attachmentPointName">Attachment point to manage.</param>
            <param name="managed">True if the attachment component should modify the local matrix, false otherwise.</param>
            <returns>True if state was set, false otherwise.</returns>
        </member>
        <member name="M:VRage.Components.Entity.WorldInteraction.MyEntityInteractionComponent.GetInteractionEntityPosition(VRageMath.Vector3D,System.UInt32)">
            <summary>
            Gets position of the actual entity that triggers interaction. Used for overriding triggered position (ex. for cube grid in case of slim blocks)
            </summary>
            <param name="triggeringPosition">Position that triggered interaction check.</param>
            <param name="shapeKey">Shape key of the entity that triggered interaction check.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Components.Entity.WorldInteraction.MyEntityInteractionComponent.GetValidWorldInteractions(VRageMath.Vector3D,System.UInt32)">
            <summary>
            Returns valid world interactions.
            </summary>
            <returns>List of definition ids for valid world interaction</returns>
        </member>
        <member name="T:VRage.Components.Interfaces.MyDamageInformation">
            <summary>
            This structure contains all information about damage being done.
            </summary>
        </member>
        <member name="F:VRage.Components.Interfaces.MyDamageInformation.Amount">
            <summary>
            Amount of damage dealt.
            </summary>
        </member>
        <member name="F:VRage.Components.Interfaces.MyDamageInformation.Type">
            <summary>
            Damage type/source.
            </summary>
        </member>
        <member name="F:VRage.Components.Interfaces.MyDamageInformation.Attacker">
            <summary>
            Reference to the attacker.
            </summary>
        </member>
        <member name="F:VRage.Components.Interfaces.MyDamageInformation.HitInfo">
            <summary>
            Information about the hit. This field is not serialized over network.
            </summary>
        </member>
        <member name="F:VRage.Components.Interfaces.MyDamageInformation.DamagedEntity">
            <summary>
            Reference to damaged entity. Filled in by damaged entity.
            </summary>
        </member>
        <member name="F:VRage.Components.Interfaces.MyDamageInformation.DamagedSecondaryId">
            <summary>
            Secondary id for object within damaged entity. Filled in by damaged entity.
            </summary>
        </member>
        <member name="E:VRage.Components.Interfaces.IMyDamageReceiver.DamageTaken">
            <summary>
            Event: damage was taken on this damage receiver.
            </summary>
        </member>
        <member name="M:VRage.Components.Interfaces.IMyDamageReceiver.DoDamage(VRage.Components.Interfaces.MyDamageInformation)">
            <summary>
            Deal the damage. Can be called only on the server.
            </summary>
            <param name="di">Information about the damage dealt.</param>
            <returns>true on success, false if called on server or on other failure</returns>
        </member>
        <member name="T:VRage.Components.MyEntityComponentDebugger">
            <summary>
            Debug helper for entity components.
            </summary>
        </member>
        <member name="P:VRage.Components.MyMultiComponent.SubtypeId">
            <summary>
            Subtype of this multi component.
            </summary>
        </member>
        <member name="P:VRage.Components.MyMultiComponent.DefinitionId">
            <inheritdoc />
        </member>
        <member name="T:VRage.Components.Physics.ConstraintId">
            <summary>
            Type safe global identifier for a constraint.
            </summary>
        </member>
        <member name="E:VRage.Components.Physics.MyPhysicsShapeComponentBase.OnShapeChanged">
            <summary>
            Event raised whenever the shape or mass properties change in any way (including internally)
            </summary>
        </member>
        <member name="T:VRage.Components.Physics.MyConstraint">
            <summary>
            Abstract base class for physics constraints.
            </summary>
        </member>
        <member name="P:VRage.Components.Physics.MyConstraint.Factory">
            <summary>
            The constraint factory.
            </summary>
        </member>
        <member name="P:VRage.Components.Physics.MyConstraint.Id">
            <inheritdoc />
        </member>
        <member name="P:VRage.Components.Physics.MyConstraint.VRage#Core#IMyObject#Id">
            <inheritdoc />
        </member>
        <member name="P:VRage.Components.Physics.MyConstraint.VRage#Core#IMyObject#DefinitionId">
            <inheritdoc />
        </member>
        <member name="P:VRage.Components.Physics.MyConstraint.VRage#Core#IMyObject#NeedsSerialize">
            <inheritdoc />
            <remarks>This implementation always returns true.</remarks>
        </member>
        <member name="M:VRage.Components.Physics.MyConstraint.VRage#Core#IMyObject#Deserialize(VRage.ObjectBuilders.MyObjectBuilder_Base)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Components.Physics.MyConstraint.VRage#Core#IMyObject#Serialize">
            <inheritdoc />
        </member>
        <member name="M:VRage.Components.Physics.MyConstraint.Deserialize(VRage.ObjectBuilders.Components.Physics.MyObjectBuilder_Constraint)">
            <summary>
            Deserialize this constraint.
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:VRage.Components.Physics.MyConstraint.Serialize">
            <summary>
            Serialize this constraint.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Components.Physics.MyConstraint.Init(VRage.Components.Physics.MyConstraintAttachmentComponent,VRage.Components.Physics.MyConstraintAttachmentComponent)">
            <summary>
            Init this constraint with the attachment components that define it.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:VRage.Components.Physics.MyConstraint.Activate(VRage.Components.Physics.MyPhysicsComponentBase,VRage.Components.Physics.MyPhysicsComponentBase)">
            <summary>
            Activate this constraint.
            </summary>
            <param name="left">First member of the constraint.</param>
            <param name="right">Second member of the constraint.</param>
        </member>
        <member name="M:VRage.Components.Physics.MyConstraint.Deactivate">
            <summary>
            Deactivate this constraint.
            </summary>
        </member>
        <member name="M:VRage.Components.Physics.MyConstraint.LoadDefinition(VRage.Definitions.Physics.MyConstraintDefinition)">
            <summary>
            Load the definition for this constraint.
            </summary>
            <param name="definition"></param>
        </member>
        <member name="M:VRage.Components.Physics.MyConstraint.OnActivate(VRage.Components.Physics.MyPhysicsComponentBase,VRage.Components.Physics.MyPhysicsComponentBase)">
            <summary>
            Invoked when the constraint is activated.
            </summary>
            <param name="left">First member of the constraint.</param>
            <param name="right">Second member of the constraint.</param>
        </member>
        <member name="M:VRage.Components.Physics.MyConstraint.OnDeactivate">
            <summary>
            Invoked when the constraint is deactivated.
            </summary>
        </member>
        <member name="M:VRage.Components.Physics.MyConstraint.GetOther(VRage.Components.Physics.MyConstraintAttachmentComponent)">
            <summary>
            Given a attachment instance find the opposite attachment point used by this constraint.
            </summary>
            <param name="instance">The attachment instance.</param>
            <returns>The other attachment instance.</returns>
        </member>
        <member name="P:VRage.Components.Physics.MyConstraint.Left">
            <summary>
            Left attachment point.
            </summary>
        </member>
        <member name="P:VRage.Components.Physics.MyConstraint.Right">
            <summary>
            Right attachment point.
            </summary>
        </member>
        <member name="P:VRage.Components.Physics.MyConstraint.LeftPhysics">
            <summary>
            Left physics component.
            </summary>
        </member>
        <member name="P:VRage.Components.Physics.MyConstraint.RightPhysics">
            <summary>
            Right physics component.
            </summary>
        </member>
        <member name="P:VRage.Components.Physics.MyConstraint.Definition">
            <summary>
            Definition for this constraint.
            </summary>
        </member>
        <member name="P:VRage.Components.Physics.MyConstraint.Scene">
            <summary>
            Scene that contains the objects associated with this constraint.
            </summary>
        </member>
        <member name="P:VRage.Components.Physics.MyConstraint.NeedsUpdate">
            <summary>
            Whether this constraint needs to perform per frame updates.
            </summary>
        </member>
        <member name="M:VRage.Components.Physics.MyConstraint.Update">
            <summary>
            Update this constraint.
            </summary>
            <remarks>
            Constraint updates are performed after physics by default.
            </remarks>
        </member>
        <member name="P:VRage.Components.Physics.MyConstraint.HasChangingState">
            <summary>
            Whether this constraint has any changing state that should be synchronized via state groups.
            </summary>
        </member>
        <member name="M:VRage.Components.Physics.MyConstraint.WriteState(VRage.Library.Collections.BitStream)">
            <summary>
            Serialize the state of this constraint to a stream.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:VRage.Components.Physics.MyConstraint.ReadState(VRage.Library.Collections.BitStream,System.Int64,VRage.Network.PhysicsCorrectionType)">
            <summary>
            Read the state of this constraint from a stream.
            </summary>
            <param name="stream">Stream containing rope data coming from the server.</param>
            <param name="timestamp">The timestamp of the state sync.</param>
            <param name="correctionType">The type of correction.</param>
        </member>
        <member name="M:VRage.Components.Physics.MyConstraint.GetLeftTransformInParentSpace">
            <summary>
            Get the left attachment transform in parent space.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Components.Physics.MyConstraint.GetRightTransformInParentSpace">
            <summary>
            Get the right attachment transform in parent space.
            </summary>
        </member>
        <member name="M:VRage.Components.Physics.MyConstraint.GetAttachmentTransformInParentSpace(VRage.Components.Physics.MyConstraint.ConstraintAttachment)">
            <summary>
            Get the selected attachment transform in parent space.
            </summary>
        </member>
        <member name="M:VRage.Components.Physics.MyConstraint.GetAttachmentTransformInParentSpace(VRage.Components.Physics.MyConstraintAttachmentComponent,VRage.Components.Physics.MyConstraintAttachmentComponent,VRage.Components.Physics.MyPhysicsComponentBase)">
            <summary>
            Get the transform for one of the constraint attachments.
            </summary>
            <param name="attachment"></param>
            <param name="neighborAttachment"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Components.Physics.MyConstraint.Disconnect">
            <summary>
            Break the connection represented by this constraint.
            </summary>
        </member>
        <member name="P:VRage.Components.Physics.MyConstraint.VRage#Components#IComponent#Container">
            <inheritdoc />
        </member>
        <member name="P:VRage.Components.Physics.MyConstraint.VRage#Components#IUpdatableComponent#Scheduler">
            <inheritdoc />
        </member>
        <member name="T:VRage.Components.Physics.MyConstraintAttachmentComponent">
            <summary>
            Base class for components representing attachment points for constraints in them or their parent entities.
            </summary>
        </member>
        <member name="M:VRage.Components.Physics.MyConstraintAttachmentComponent.GetAttachmentTransform(VRage.Components.Physics.MyConstraintAttachmentComponent)">
            <summary>
            Transform for the constraint attachment.
            </summary>
            <param name="connection">The other side of the constraint connection.</param>
        </member>
        <member name="P:VRage.Components.Physics.MyConstraintAttachmentComponent.ListensToConstraintChange">
            <summary>
            Whether this component wants to be notified when the rope changes.
            </summary>
        </member>
        <member name="M:VRage.Components.Physics.MyConstraintAttachmentComponent.GetAttachmentPositionWorld(VRage.Components.Physics.MyConstraintAttachmentComponent)">
            <summary>
            Get world position for the rope attachment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Components.Physics.MyConstraintAttachmentComponent.OnConstraintUpdate">
            <summary>
            Callback invoked when the constraint is updated.
            </summary>
        </member>
        <member name="M:VRage.Components.Physics.MyConstraintAttachmentComponent.OnConstraintActivate(VRage.Components.Physics.MyConstraint)">
            <summary>
            Callback invoked when an attached constraint to this component is activated.
            </summary>
        </member>
        <member name="M:VRage.Components.Physics.MyConstraintAttachmentComponent.OnConstraintDeactivate(VRage.Components.Physics.MyConstraint)">
            <summary>
            Callback invoked when an attached constraint is deactivated.
            </summary>
        </member>
        <member name="T:VRage.Components.Physics.MyConstraintAttribute">
            <summary>
            Identifies a constraint class, and binds it with it's serialized object type.
            </summary>
        </member>
        <member name="T:VRage.Components.Physics.MyConstraintDebugger">
            <summary>
            Debug helper for constraints.
            </summary>
        </member>
        <member name="T:VRage.Components.Physics.MyConstraintFactory">
            <inheritdoc />
        </member>
        <member name="M:VRage.Components.Physics.MyConstraintFactory.CreateInstance(VRage.Definitions.Physics.MyConstraintDefinition)">
            <summary>
            Create a new constraint instance given it's definition.
            </summary>
            <param name="definition">The constraint definition.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Components.Physics.MyConstraintFactory.CreateInstance``1(VRage.Definitions.Physics.MyConstraintDefinition)">
            <summary>
            Create a new constraint instance given it's definition.
            </summary>
            <param name="definition">The constraint definition.</param>
            <returns></returns>
        </member>
        <member name="T:VRage.Components.Physics.MyPhysicsForceType">
            <summary>
            Force type applied to physic object.
            </summary>
        </member>
        <member name="F:VRage.Components.Physics.MyPhysicsForceType.APPLY_WORLD_IMPULSE_AND_WORLD_ANGULAR_IMPULSE">
            <summary>
            
            </summary>
        </member>
        <member name="F:VRage.Components.Physics.MyPhysicsForceType.ADD_BODY_FORCE_AND_BODY_TORQUE">
            <summary>
            
            </summary>
        </member>
        <member name="F:VRage.Components.Physics.MyPhysicsComponentBase.DefaultContactPointDelay">
            <summary>
            Must be set before creating rigid body
            </summary>
        </member>
        <member name="P:VRage.Components.Physics.MyPhysicsComponentBase.MaterialType">
            <summary>
            Gets or sets the type of the material.
            </summary>
            <value>
            The type of the material.
            </value>
        </member>
        <member name="P:VRage.Components.Physics.MyPhysicsComponentBase.IsStatic">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:VRage.Components.Physics.MyPhysicsComponentBase"/> is static.
            </summary>
            <value>
              <c>true</c> if static; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VRage.Components.Physics.MyPhysicsComponentBase.IsKinematic">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:VRage.Components.Physics.MyPhysicsComponentBase"/> is kinematic.
            </summary>
            <value>
              <c>true</c> if kinematic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VRage.Components.Physics.MyPhysicsComponentBase.Enabled">
            <summary>
            Gets if this <see cref="T:VRage.Components.Physics.MyPhysicsComponentBase"/> is currently active.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VRage.Components.Physics.MyPhysicsComponentBase.Mass">
            <summary>
            Gets or sets the mass.
            </summary>
            <value>
            The mass.
            </value>
        </member>
        <member name="P:VRage.Components.Physics.MyPhysicsComponentBase.InertiaTensor">
            <summary>
            Gets the inertia tensor of the rigid body, or zero if not created
            </summary>
        </member>
        <member name="P:VRage.Components.Physics.MyPhysicsComponentBase.InverseInertiaTensor">
            <summary>
            Gets the inverse inertia tensor of the rigid body, or zero if not created
            </summary>
        </member>
        <member name="P:VRage.Components.Physics.MyPhysicsComponentBase.IsActive">
            <summary>
            Gets if this physics component is active (not sleeping)
            </summary>
        </member>
        <member name="P:VRage.Components.Physics.MyPhysicsComponentBase.LinearVelocity">
            <summary>
            Gets or sets the linear velocity.
            </summary>
            <value>
            The linear velocity.
            </value>
        </member>
        <member name="P:VRage.Components.Physics.MyPhysicsComponentBase.AngularVelocity">
            <summary>
            Gets or sets the angular velocity.
            </summary>
            <value>
            The angular velocity.
            </value>
        </member>
        <member name="P:VRage.Components.Physics.MyPhysicsComponentBase.LinearDamping">
            <summary>
            Gets or sets the linear damping.
            </summary>
            <value>
            The linear damping.
            </value>
        </member>
        <member name="P:VRage.Components.Physics.MyPhysicsComponentBase.AngularDamping">
            <summary>
            Gets or sets the angular damping.
            </summary>
            <value>
            The angular damping.
            </value>
        </member>
        <member name="P:VRage.Components.Physics.MyPhysicsComponentBase.Speed">
            <summary>
            Gets or sets the speed.
            </summary>
            <value>
            The speed.
            </value>
        </member>
        <member name="P:VRage.Components.Physics.MyPhysicsComponentBase.RigidBody">
            <summary>
            Obtain/set (default) rigid body of this physics object.
            </summary>
        </member>
        <member name="M:VRage.Components.Physics.MyPhysicsComponentBase.AddForce(VRage.Components.Physics.MyPhysicsForceType,System.Nullable{VRageMath.Vector3},System.Nullable{VRageMath.Vector3D},System.Nullable{VRageMath.Vector3})">
            <summary>
            Applies external force to the physics object.
            </summary>
            <param name="type">The type.</param>
            <param name="force">The force.</param>
            <param name="position">The position.</param>
            <param name="torque">The torque.</param>
        </member>
        <member name="M:VRage.Components.Physics.MyPhysicsComponentBase.ApplyImpulse(VRageMath.Vector3,VRageMath.Vector3D)">
            <summary>
            Applies the impulse.
            </summary>
            <param name="dir">The dir.</param>
            <param name="pos">The pos.</param>
        </member>
        <member name="M:VRage.Components.Physics.MyPhysicsComponentBase.DebugDraw">
            <summary>
            Debug draw of this physics object.
            </summary>
        </member>
        <member name="M:VRage.Components.Physics.MyPhysicsComponentBase.Activate">
            <summary>
            Activates this rigid body in physics.
            </summary>
        </member>
        <member name="M:VRage.Components.Physics.MyPhysicsComponentBase.Deactivate">
            <summary>
            Deactivates this rigid body in physics.
            </summary>
        </member>
        <member name="M:VRage.Components.Physics.MyPhysicsComponentBase.OnMotion(Havok.HkRigidBody,System.Single,System.Boolean)">
            <summary>
            Called when [motion].
            </summary>
            <param name="rbo">The rbo.</param>
            <param name="step">The step.</param>
        </member>
        <member name="M:VRage.Components.Physics.MyPhysicsComponentBase.OnWorldPositionChanged(System.Object)">
            <summary>
            Called when [world position changed].
            </summary>
            <param name="source">The source object that caused this event.</param>
        </member>
        <member name="T:VRage.Components.Physics.MyPhysicsConstraintGroup">
             <summary>
             Group of physics components connected by constraints.
             </summary>
             <remarks>
             Each constraint is associated with the connection of two <see cref="T:VRage.Components.Physics.MyConstraintAttachmentComponent"/> instances.
             These components can either be on an entity with a <see cref="T:VRage.Components.Physics.MyPhysicsComponentBase"/> component, or in one of it's children.
            
             The group is a tiered group, with the main tier being the one containing the entities with a <see cref="T:VRage.Components.Physics.MyPhysicsComponentBase"/>
             component, and the child tier the entities containing the <see cref="T:VRage.Components.Physics.MyConstraintAttachmentComponent"/> component.
             </remarks>
        </member>
        <member name="P:VRage.Components.Physics.MyPhysicsConstraintGroup.Constraints">
            <summary>
            Read only collection of all constraints in this group.
            </summary>
        </member>
        <member name="T:VRage.Components.Physics.MyPhysicsConstraintGroupReplicable">
            <summary>
            Replicable for the physics constraint state group.
            </summary>
        </member>
        <member name="T:VRage.Components.Physics.MyPhysicsConstraintStateGroup">
            <summary>
            State group used for the <see cref="T:VRage.Components.Physics.MyPhysicsConstraintGroup"/>.
            </summary>
        </member>
        <member name="T:VRage.Components.Session.MyGamePruningStructure">
            <summary>
            Scene wide tree query structure for top level objects.
            </summary>
        </member>
        <member name="M:VRage.Components.Session.MyGamePruningStructure.OnLoad">
            <inheritdoc />
        </member>
        <member name="M:VRage.Components.Session.MyGamePruningStructure.MoveNow(VRage.Game.Entity.MyEntity)">
            <summary>
            Move a given top level entity immediately.
            </summary>
            <remarks>Use this if you expect interaction with the game pruning structure immediately following this statement</remarks>
            <param name="entity"></param>
        </member>
        <member name="T:VRage.Components.Session.MyPhysicsUpdateProxy">
            <summary>
            This class serves as a proxy for getting priority of MyPhysics fixed update.
            </summary>
        </member>
        <member name="F:VRage.Components.Session.TimesOfDay.AstronomicalDawn">
            <summary>
            The geometric center of the sun disk is 12-18 degrees under the horizon, ascending.
            </summary>
        </member>
        <member name="F:VRage.Components.Session.TimesOfDay.NauticalDawn">
            <summary>
            The geometric center of the sun disk is 6-12 degrees under the horizon, ascending.
            </summary>
        </member>
        <member name="F:VRage.Components.Session.TimesOfDay.CivilDawn">
            <summary>
            The geometric center of the sun disk is 0-6 degrees under the horizon, ascending.
            </summary>
        </member>
        <member name="F:VRage.Components.Session.TimesOfDay.Day">
            <summary>
            The geometric center of the sun disk is above the horizon.
            </summary>
        </member>
        <member name="F:VRage.Components.Session.TimesOfDay.CivilDusk">
            <summary>
            The geometric center of the sun disk is 0-6 degrees under the horizon, descending.
            </summary>
        </member>
        <member name="F:VRage.Components.Session.TimesOfDay.NauticalDusk">
            <summary>
            The geometric center of the sun disk is 6-12 degrees under the horizon, descending.
            </summary>
        </member>
        <member name="F:VRage.Components.Session.TimesOfDay.AstronomicalDusk">
            <summary>
            The geometric center of the sun disk is 12-18 degrees under the horizon, descending.
            </summary>
        </member>
        <member name="F:VRage.Components.Session.TimesOfDay.Night">
            <summary>
            The geometric center of the sun disk is more than 18 degrees under the horizon.
            </summary>
        </member>
        <member name="F:VRage.Components.Session.TimesOfDay.Dawn">
            <summary>
            The geometric center of the sun disk is under the horizon, ascending.
            </summary>
        </member>
        <member name="F:VRage.Components.Session.TimesOfDay.Dusk">
            <summary>
            The geometric center of the sun disk is under the horizon, descending.
            </summary>
        </member>
        <member name="F:VRage.Components.Session.TimesOfDay.NotNight">
            <summary>
            Everything other than night.
            </summary>
        </member>
        <member name="F:VRage.Components.Session.TimesOfDay.NotDay">
            <summary>
            Everything other than day.
            </summary>
        </member>
        <member name="T:VRage.Components.MyInventoryItemComponent">
            <summary>
            Component for entities that represent an inventory item in the world.
            </summary>
        </member>
        <member name="P:VRage.Components.MyInventoryItemComponent.Item">
            <summary>
            The item represented by this entity.
            </summary>
        </member>
        <member name="P:VRage.Components.MyInventoryItemComponent.ItemContainer">
            <summary>
            The inventory that contains this item. If this item is not in any inventory this member will be null.
            </summary>
        </member>
        <member name="M:VRage.Components.MyInventoryItemComponent.RemoveItem">
            <summary>
            Remove the item. If item is not in a inventory the container is closed instead.
            </summary>
        </member>
        <member name="M:VRage.Components.MyRenderComponentBase.SetMaterialProperties(System.String,System.Nullable{System.Boolean},System.Nullable{System.Single},System.Nullable{VRageMath.Vector3})">
            <summary>
            Sets specific properties for a given material.
            </summary>
            <param name="material">The material whose properties should be updated.</param>
            <param name="enabled">(Optional) If set, sets the material enabled or disabled. Ignored if null.</param>
            <param name="emissivity">(Optional) If set, sets the material's emissivity. Ignored if null.</param>
            <param name="diffuseColor">(Optional) If set, sets the material diffuse color. Ignored if null.</param>
        </member>
        <member name="M:VRage.Components.MyRenderComponentBase.UpdateDithering(System.Single,System.Boolean)">
            <summary>
            Sets dither to a model. 
            </summary>
            <param name="newDithering">Dithering strength from 0 to 1.</param>
            <param name="updateHighlight">Indicates if highlight that is overlaped should be updated.</param>
        </member>
        <member name="T:VRage.Game.Components.IMyComponentChangeListener`1">
            <summary>
            Entity components that implement this interface are automatically notified when a component in their container of the argument type is added or removed.
            </summary>
            <typeparam name="TComponent"></typeparam>
        </member>
        <member name="M:VRage.Game.Components.IMyComponentChangeListener`1.HandleRemoved(`0)">
            <summary>
            Handle a component of the given type being removed.
            </summary>
            <param name="component">The component that was removed from the container.</param>
        </member>
        <member name="M:VRage.Game.Components.IMyComponentChangeListener`1.HandleAdded(`0)">
            <summary>
            Handle a component of the given type being added.
            </summary>
            <param name="component">The component that was added to the container.</param>
        </member>
        <member name="T:VRage.Game.Components.MyComponentAttribute">
            <summary>
            Attribute that describes a component.
            </summary>
        </member>
        <member name="F:VRage.Game.Components.MyComponentAttribute.CommonRoot">
             <summary>
             Whether this component is an CommonRoot for other components.
             When discovering what is the original parent for unique components this step will be ignored.
            
             Beware that this defaults to true for components that are not annotated at all!
             </summary>
        </member>
        <member name="F:VRage.Game.Components.MyComponentAttribute.ForceUnique">
             <summary>
             Force this component to be unique. If the parent class was not marked unique this
             will force this component to be marked so and set it as the common root for it's children.
            
             If this component was already unique this will NOT have any effect. This is also ignored is used in conjunction with CommonRoot.
             </summary>
        </member>
        <member name="F:VRage.Game.Components.MyComponentAttribute.AllowAutomaticCreation">
            <summary>
            Whether this component can be added implicitly to a component container when it is missing but is a critical dependency of another component.
            </summary>
        </member>
        <member name="F:VRage.Game.Components.MyComponentAttribute.Computed">
            <summary>
            Whether this attribute has been analyzed already.
            </summary>
        </member>
        <member name="F:VRage.Game.Components.MyComponentAttribute.UniqueParent">
            <summary>
            What is the base type that is unique for this component. Every hierarchy only has one unique parent.
            </summary>
        </member>
        <member name="F:VRage.Game.Components.MyComponentAttribute.DefinitionType">
            <summary>
            The definition type this component accepts.
            </summary>
        </member>
        <member name="F:VRage.Game.Components.MyComponentAttribute.DefinitionRequired">
            <summary>
            Whether this component requires a definition in order to be added to a container.
            </summary>
        </member>
        <member name="T:VRage.Game.Components.MyComponentEventBus">
            <summary>
            This component provides a unified event bus for entities.
            Events are identified by string names.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyComponentEventBus.AddListener(System.String,System.Action{System.String})">
            <summary>
            Add a listener to the event bus.
            
            The event bus requires the existence of a provider for the requested event in order to hook it.
            
            The event bus also will never register the same event twice, this is provided as a convenience
            to the caller to facilitate automated hooking.
            </summary>
            <param name="eventId">The id of the event.</param>
            <param name="listener">The listener for the event.</param>
            <returns>Whether the event listener was added.</returns>
        </member>
        <member name="M:VRage.Game.Components.MyComponentEventBus.FindProvider(System.String)">
            <summary>
            Find a provider for a given event.
            
            This verifies that such provider exists and also logs if multiple sources provide the same event.
            </summary>
            <param name="name">The name of the event.</param>
            <returns>Whether the event is provided.</returns>
        </member>
        <member name="M:VRage.Game.Components.MyComponentEventBus.RemoveListener(System.String,System.Action{System.String})">
            <summary>
            Remove a listener from the event bus.
            </summary>
            <param name="id"></param>
            <param name="listener"></param>
        </member>
        <member name="M:VRage.Game.Components.MyComponentEventBus.Invoke(System.String,System.Boolean)">
            <summary>
            Invoke an event with given id.
            </summary>
            <param name="id">The id of the event.</param>
        </member>
        <member name="M:VRage.Game.Components.MyComponentEventBus.OnBeforeRemovedFromContainer">
            <summary>
            Clear the listener set at death to be sure.
            </summary>
        </member>
        <member name="T:VRage.Game.Components.MyComponentEventExtensions">
            <summary>
            This class contains several neat methods to make life easier when using the component event bus.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyComponentEventExtensions.HookEvent(VRage.Game.Components.MyEntityComponentContainer,System.String,System.Action{System.String})">
            <summary>
            Utility to hook an event using the event bus system.
            </summary>
            <param name="self"></param>
            <param name="name"></param>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.Components.MyComponentEventExtensions.UnHookEvent(VRage.Game.Components.MyEntityComponentContainer,System.String,System.Action{System.String})">
            <summary>
            Unhook an event bound to the component event system.
            </summary>
            <param name="self">This argument</param>
            <param name="name">The name of their event.</param>
            <param name="handler">The handler for the event.</param>
        </member>
        <member name="T:VRage.Game.Components.MyDefinitionRequiredAttribute">
            <summary>
            Signal a component requires it's definition to be provided in order to function.
            </summary>
        </member>
        <member name="T:VRage.Game.Components.MyComponentDefinitionTypeAttribute">
            <summary>
            Attribute used to associate a component with a given definition.
            </summary>
        </member>
        <member name="F:VRage.Game.Components.MyComponentDefinitionTypeAttribute.DefinitionType">
            <summary>
            The type of the definition this the annotated component accepts.
            </summary>
        </member>
        <member name="F:VRage.Game.Components.MyComponentDefinitionTypeAttribute.Required">
            <summary>
            Whether the component requires a definition to function.
            </summary>
        </member>
        <member name="T:VRage.Game.Components.MyEntityComponentFactory">
            <summary>
            Factory for entity components.
            </summary>
        </member>
        <member name="F:VRage.Game.Components.MyEntityComponentFactory.m_componentHandlerInfo">
            <summary>
            Mapping of component types to change handler information.
            </summary>
        </member>
        <member name="F:VRage.Game.Components.MyEntityComponentFactory.m_additionalListeners">
            <summary>
            Additional component event listeners.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentFactory.IndexHandlerInfo">
            <summary>
            Index component change information for each component type.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentFactory.AddContainerEventListener(System.Type)">
            <summary>
            Add a type to be indexed as a component event listener.
            </summary>
            <param name="listenerType">The type of the object that wishes to have listener metadata.</param>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentFactory.HandleComponentRemoved(System.Object,VRage.Game.Components.MyEntityComponent)">
            <summary>
            Check and invoke any component remove listeners that may be registered in the <paramref name="listener"/> for the <paramref name="removed"/> component.
            </summary>
            <param name="listener">The component that might be a listener.</param>
            <param name="removed">The component that was removed from the container.</param>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentFactory.HandleComponentAdded(System.Object,VRage.Game.Components.MyEntityComponent)">
            <summary>
            Check and invoke any component add listeners that may be registered in the <paramref name="listener"/> for the <paramref name="added"/> component.
            </summary>
            <param name="listener">The component that might be a listener.</param>
            <param name="added">The component that was added to the container.</param>
        </member>
        <member name="T:VRage.Game.Components.MyEntityComponentFactory.HandlerInfo.HandlerData">
            <summary>
            Stored data about an implementation of <see cref="T:VRage.Game.Components.IMyComponentChangeListener`1"/> by an entity component.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentFactory.CheckDefinitionDefinition(System.Type,VRage.Game.MyEntityComponentDefinition)">
            <summary>
            Check if a given component type would be satisfied by the provided definition.
            </summary>
            <param name="componentType"></param>
            <param name="definition"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentFactory.GetUniqueParent(System.Type)">
             <summary>
             Gets the first unique parent type of this component type.
            
             A component marked unique cannot appear more than once in a container.
             </summary>
             <param name="componentType">The type of the component to search for.</param>
             <returns>The type of thew unique parent component.</returns>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentFactory.ComputeUniqueInheritance(VRage.Game.Components.MyComponentAttribute)">
            <summary>
            Fill up unique and parent values in the provided attribute's hierarchy.
            </summary>
            <param name="comp"></param>
        </member>
        <member name="F:VRage.Game.Components.MyEntityComponentFactory.m_mapper">
            <summary>
            Dependency mapper.
            </summary>
        </member>
        <member name="F:VRage.Game.Components.MyEntityComponentFactory.m_builderComparer">
            <summary>
            Builder comparer instance.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyEntityComponentFactory.DependencyComparer">
            <summary>
            Comparer fro component types that can be used to sort them in dependency order.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyEntityComponentFactory.InstanceDependencyComparer">
            <summary>
            Comparer for component instances that can be used to sort them in dependency order.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyEntityComponentFactory.BuilderDependencyComparer">
            <summary>
            Comparer fro component object builders that can be used to sort them in dependency order.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentFactory.BorrowResolver">
            <summary>
            Borrow a dependency resolver.
            </summary>
            <remarks>
            <para>The dependency resolver is an object that can be used to order a component list and to resolve missing dependencies.</para>
            The Resolver must be returned after it's used.
            </remarks>
            <seealso cref="M:VRage.Game.Components.MyEntityComponentFactory.ReturnResolver(VRage.Utils.DependencyResolve.TypeDependencyMapper.Resolver)"/>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentFactory.ReturnResolver(VRage.Utils.DependencyResolve.TypeDependencyMapper.Resolver)">
            <summary>
            Return a dependency resolver previously borrowed from this factory.
            </summary>
            <param name="resolver">The resolver instance.</param>
            <seealso cref="M:VRage.Game.Components.MyEntityComponentFactory.BorrowResolver"/>
        </member>
        <member name="F:VRage.Game.Components.MySessionComponentDescriptorAttribute.UpdateOrder">
            <summary>
            Legacy update order for this component.
            
            It is recommended to use update attributes instead.
            </summary>
        </member>
        <member name="F:VRage.Game.Components.MySessionComponentDescriptorAttribute.Priority">
            <summary>
            Update priority of this component.
            
            Prefer to use update before and update after attributes instead.
            </summary>
        </member>
        <member name="F:VRage.Game.Components.MyAnimationComponentLodding.m_animationComp">
            <summary>
            Link to animation controller component.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyAnimationComponentLodding.#ctor(VRage.Game.Components.MyAnimationControllerComponent)">
            <summary>
            Constructor.
            </summary>
            <param name="owner">Owner is the animation controller component.</param>
        </member>
        <member name="M:VRage.Game.Components.MyAnimationComponentLodding.ComputeLodLevel">
            <summary>
            Computes the lod level. Range is from 0 (worst quality) to 1 (full quality).
            The lod level is based on the screen size.
            </summary>
        </member>
        <member name="T:VRage.Game.Components.IMyComponentAggregate">
            <summary>
            When creating a new aggregate component type, derive from this interface so that you can use extension methods
            AddComponent and RemoveComponent
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyComponentAggregateExtensions.AttachComponent(VRage.Game.Components.IMyComponentAggregate,VRage.Game.Components.MyEntityComponent)">
            <summary>
            Adds to list but doesn't change ownership
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyComponentAggregateExtensions.DetachComponent(VRage.Game.Components.IMyComponentAggregate,VRage.Game.Components.MyEntityComponent)">
            <summary>
            Removes from list, but doesn't change ownership
            </summary>
        </member>
        <member name="T:VRage.Game.Components.IMyComponentOwner`1">
            <summary>
            Always implement explicitly, because of Obfuscation
            </summary>
        </member>
        <member name="M:VRage.Game.Components.IMyComponentOwner`1.GetComponent(`0@)">
            <summary>
            Always implement explicitly, because of Obfuscation
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyEntityComponent.Factory">
            <summary>
            Entity component factory.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyEntityComponent.DefinitionId">
            <summary>
            Get a definition id defining this component.
            </summary>
            <remarks>The definition Id is not necessarily the same as the component definition used by this component.
            But rather a unique id that identifies the component in it's container.</remarks>
        </member>
        <member name="P:VRage.Game.Components.MyEntityComponent.Container">
            <summary>
            The container for this component.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyEntityComponent.Scheduler">
            <inheritdoc />
            <remarks>
            The update scheduler is only available once the entity is in scene.
            </remarks>
        </member>
        <member name="P:VRage.Game.Components.MyEntityComponent.Entity">
            <summary>
            Entity this component is bound to.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyEntityComponent.Scene">
            <summary>
            The scene containing the entity that contains this component.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyEntityComponent.DebugName">
            <summary>
            Name of the base component type for debug purposes (e.g.: "Position")
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponent.SetContainer(VRage.Game.Components.MyEntityComponentContainer)">
            <summary>
            Sets the container of this component.
            Note that the component is not added to the container here! Therefore, use MyComponentContainer.Add(...) method and it
            will in turn call this method. Actually, you should seldom have the need to call this method yourself.
            </summary>
            <param name="container">The new container of the component</param>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponent.OnAddedToScene">
            <summary>
            Called when the container is added to scene or when this component is added after the container was already in scene.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponent.OnRemovedFromScene">
            <summary>
            Called when the container is removed from scene or when this component is removed while the container is still in scene.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponent.OnAddedToContainer">
            <summary>
            Gets called after the container of this component changes
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponent.OnBeforeRemovedFromContainer">
            <summary>
            Gets called before the removal of this component from a container
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyEntityComponent.IsSerialized">
            <summary>
            Tells the component container serializer whether this component should be saved
            </summary>
            <value></value>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponent.Serialize(System.Boolean)">
            <summary>
            Serialize entity component to the object builder.
            </summary>
            <param name="copy">
            When set to true, we indicate that we serialize a copy of and object. 
            This indicates to skip serialization of instance unique data. 
            See the usages if unclear
            </param>
            <returns>Instance of the object builder.</returns>
        </member>
        <member name="P:VRage.Game.Components.MyEntityComponent.Id">
            <summary>
            Unique identifier in the scene for this entity component.
            </summary>
        </member>
        <member name="F:VRage.Game.Components.MyEntityComponentContainer.m_components">
            <summary>
            List of components.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyEntityComponentContainer.Entity">
            <summary>
            Entity that contains this container.
            </summary>
        </member>
        <member name="F:VRage.Game.Components.MyEntityComponentContainer.m_enumerating">
            <summary>
            Whether this container is currently inside an enumeration.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.GetOrAdd``1">
            <summary>
            Get the first component of the given type from the container,
            if none is found a new instance is created.
            </summary>
            <typeparam name="TComp">The type to look for, this must be a component type</typeparam>
            <returns>The first component found or the newly created instance.</returns>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.Add``1(``0)">
            <summary>
            Add a component to the container.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.RemoveFirst``1">
            <summary>
            Remove the first component assignable to the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The component type.</typeparam>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.RemoveFirst(System.Type)">
            <summary>
            Remove the first component assignable to the type <paramref name="componentType"/>.
            </summary>
            <param name="componentType">The component type.</param>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.Remove(VRage.Game.Components.MyEntityComponent)">
            <summary>
            Remove a given component from this container.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.RemoveAll``1">
            <summary>
            Remove all components assignable to a given type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.RemoveAll(System.Type)">
            <summary>
            Remove all components assignable to a given type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.RemoveComponentInternal(System.Int32,VRage.Game.Components.MyEntityComponent)">
            <summary>
            Remove the given component, index also provided for convenience.
            </summary>
            <param name="index"></param>
            <param name="component"></param>
        </member>
        <member name="P:VRage.Game.Components.MyEntityComponentContainer.Item(System.Int32)">
            <summary>
            Get component at the given index.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.VRage#Components#IComponentContainer#Get(System.Type)">
            <inheritdoc/>
        </member>
        <member name="P:VRage.Game.Components.MyEntityComponentContainer.VRage#Components#IComponentContainer#Logger">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.Get``1">
            <summary>
            Get the first component of the given type from the container.
            </summary>
            <typeparam name="TComp">The type to look for, this can be any component type or an interface</typeparam>
            <returns>The first component found.</returns>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.Get``1(VRage.Utils.MyStringHash)">
            <summary>
            Get the multi-component in a container with the requested subtype.
            </summary>
            <param name="subtype">Subtype of the component sought after.</param>
            <typeparam name="TComp">The type to look for, this can be any component type or an interface</typeparam>
            <returns>The first component found.</returns>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.TryGet``1(``0@)">
            <summary>
            Get the first component of the given type from the container.
            </summary>
            <typeparam name="TComp">The type to look for, this can be any component type or an interface</typeparam>
            <returns>Weather a component was found.</returns>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.TryGet``1(VRage.Utils.MyStringHash,``0@)">
            <summary>
            Get the first component of the given type from the container.
            </summary>
            <param name="subtype">Subtype of the component sought after.</param>
            <param name="component">The component if found.</param>
            <typeparam name="TComp">The type to look for, this can be any component type or an interface</typeparam>
            <returns>Weather a component was found.</returns>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.TryGet(System.Type,VRage.Game.Components.MyEntityComponent@)">
            <summary>
            Try to find the first component of the requested type in this container.
            </summary>
            <param name="type">The type of the component.</param>
            <param name="component">The resulting component if any.</param>
            <returns>Whether a component was found.</returns>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.TryGet(System.Type,VRage.Utils.MyStringHash,VRage.Game.Components.MyEntityComponent@)">
            <summary>
            Try to find the first component of the requested type in this container.
            </summary>
            <param name="type">The type of the component.</param>
            <param name="subtype">Subtype of the component sought after.</param>
            <param name="component">The resulting component if any.</param>
            <returns>Whether a component was found.</returns>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.TryGet(VRage.Game.MyDefinitionId,VRage.Game.Components.MyEntityComponent@)">
            <summary>
            Try to find the first component of the requested type in this container.
            </summary>
            <param name="componentId">The definition id of the component sought after.</param>
            <param name="component">The resulting component if any.</param>
            <returns>Whether a component was found.</returns>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.Contains``1(VRage.Utils.MyStringHash)">
            <summary>
            Weather the entity container contains any component of the given type.
            </summary>
            <typeparam name="TComp"></typeparam>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.Contains(System.Type,VRage.Utils.MyStringHash)">
            <summary>
            Returns if any component is assignable from type
            </summary>
            <param name="type"></param>
            <param name="subtype"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.IndexOf``1(VRage.Utils.MyStringHash,System.Int32)">
            <summary>
            Find the index of the first component from the start position that is of the given type and has the adequate subtype.
            </summary>
            <remarks>
            This method will also inspect the operation queue if needed.
            </remarks>
            <typeparam name="TComponent"></typeparam>
            <param name="subtype"></param>
            <param name="searchStart"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.IndexOfWithQueue``1(VRage.Utils.MyStringHash,System.Int32)">
            <summary>
            Find the index of the first component from the start position that is of the given type and has the adequate subtype.
            </summary>
            <remarks>
            This method will also inspect the operation queue.
            </remarks>
            <typeparam name="TComponent"></typeparam>
            <param name="subtype"></param>
            <param name="searchStart"></param>
            <returns></returns>
        </member>
        <member name="T:VRage.Game.Components.MyEntityComponentContainer.IndexOfDelegate">
            <summary>
            Delegate representing a search component function.
            </summary>
        </member>
        <member name="F:VRage.Game.Components.MyEntityComponentContainer.SearchMethodCache">
            <summary>
            Cache of type safe search functions.
            </summary>
        </member>
        <member name="F:VRage.Game.Components.MyEntityComponentContainer.GenericSearchMethod">
            <summary>
            Reference to the generic definition for the <see cref="M:VRage.Game.Components.MyEntityComponentContainer.IndexOf``1(VRage.Utils.MyStringHash,System.Int32)"/> method.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.GetIndexOfDelegate(System.Type)">
            <summary>
            Get a delegate instance binding to the generic <see cref="M:VRage.Game.Components.MyEntityComponentContainer.IndexOf(System.Type,VRage.Utils.MyStringHash,System.Int32)"/> method with the given type argument.
            </summary>
            <param name="lookupType"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.Init(VRage.Game.MyDefinitionId,VRage.ObjectBuilders.Components.MyObjectBuilder_ComponentContainer)">
            <summary>
            Init a container from definition id and serialized data.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.BatchAdd">
            <summary>
            Set container for all components added in batch during init.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.InitFromDefinition(VRage.Game.MyContainerDefinition,System.Boolean)">
            <summary>
            Initialize this container form the provided definition.
            </summary>
            <param name="definition">The container definition.</param>
            <param name="firstInit">Whether this is the first time the entity is instantiated.</param>
        </member>
        <member name="E:VRage.Game.Components.MyEntityComponentContainer.ComponentAdded">
            <summary>
            Event fired after a component has been added to the container.
            </summary>
        </member>
        <member name="E:VRage.Game.Components.MyEntityComponentContainer.ComponentRemoved">
            <summary>
            Event fire before a component is completely removed from the container.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.OnAddedToScene">
            <summary>
            Raise the Added to scene event for all members of the container.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.OnRemovedFromScene">
            <summary>
            Raise the removed from scene event on all components in the container.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.SetContainer(VRage.Game.Components.MyEntityComponent)">
            <summary>
            Set the container and fire the appropriate component events for a newly added component.
            </summary>
            <param name="component">The component that was added.</param>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.HandleComponentAdded(VRage.Game.Components.MyEntityComponent)">
            <summary>
            Raise both internal and external events when adding a component.
            </summary>
            <param name="added">The component that was added.</param>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.RaiseComponentAdded(VRage.Game.Components.MyEntityComponent)">
            <summary>
            Raise external events after a component is added.
            </summary>
            <param name="added"></param>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.UnSetContainer(VRage.Game.Components.MyEntityComponent)">
            <summary>
            Set the container to null and fire the appropriate internal events on a component that is beiong removed.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.OnComponentRemoved(VRage.Game.Components.MyEntityComponent)">
            <summary>
            Raise all events for a component being removed and clear it's reference to this container.
            </summary>
            <param name="removed">The component being removed.</param>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.RaiseComponentRemoved(VRage.Game.Components.MyEntityComponent)">
            <summary>
            Fire external events for a component being removed from thsi container.
            </summary>
            <param name="removed"></param>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.FindComponent(System.Type,VRage.Utils.MyStringHash,System.Int32@)">
            <summary>
            Get a component given it's type and subtype.
            </summary>
            <remarks>
            We can assume that the order of components in the builder is similar to their order on the container, so the caller can
            give us a hint to the location of the component.
            </remarks>
            <param name="indexHint">Starting location to search, stores the location the component was found in.</param>
            <returns></returns>
        </member>
        <member name="T:VRage.Game.Components.MyEntityComponentContainer.Operation">
            <summary>
            Representation of an queued container operation.
            </summary>
        </member>
        <member name="T:VRage.Game.Components.MyEntityComponentContainer.EnumerationToken">
            <summary>
            Token used for a cleaner and safer enumeration syntax.
            </summary>
        </member>
        <member name="F:VRage.Game.Components.MyEntityComponentContainer.m_queuedOperations">
            <summary>
            Queue of pending operations.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.System#Collections#Generic#IEnumerable{VRage#Game#Components#MyEntityComponent}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.GetComponents``1">
            <summary>
            Get all components of the requested type.
            </summary>
            <remarks>
            This call will return results for any component type, but only makes sense ofr interface types or multi-components.
            </remarks>
            <typeparam name="TComp">The type to query. Can be any component class, or an interface.</typeparam>
            <returns>An enumeration of the components found.</returns>
        </member>
        <member name="M:VRage.Game.Components.MyEntityComponentContainer.GetComponents(System.Type)">
            <summary>
            Get all components of the requested type.
            </summary>
            <remarks>
            This call will return results for any component type, but only makes sense ofr interface types or multi-components.
            </remarks>
            <param name="componentType">The type to query. Can be any component class, or an interface.</param>
            <returns>An enumeration of the components found.</returns>
        </member>
        <member name="F:VRage.Game.Components.MyHierarchyComponent.m_children">
            <summary>
            Set of all children.
            </summary>
            <remarks>
            Null unless this container has had some children previously.
            </remarks>
        </member>
        <member name="P:VRage.Game.Components.MyHierarchyComponent.Children">
            <summary>
            Gets the children collection.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyHierarchyComponent.ChildCount">
            <summary>
            The number of children this hierarchy contains.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyHierarchyComponent.AddChild(VRage.Game.Entity.MyEntity,System.Boolean,System.Boolean)">
            <summary>
            Adds the child.
            </summary>
            <param name="child">The child.</param>
            <param name="worldSpaceTransform">When true the entity's current transform is taken as a being in world space, otherwise local to the new parent.</param>
            <param name="delayedActivation">When set to true the child will not be activated immediately, but at the end of the step instead.</param>
        </member>
        <member name="M:VRage.Game.Components.MyHierarchyComponent.AddInternal(VRage.Game.Entity.MyEntity,System.Boolean)">
            <summary>
            Add to scene and activate if needed.
            </summary>
            <param name="child"></param>
            <param name="delayedActivation"></param>
        </member>
        <member name="M:VRage.Game.Components.MyHierarchyComponent.RemoveChild(VRage.Game.Entity.MyEntity,System.Boolean)">
            <summary>
            Adds the child.
            </summary>
            <param name="child">The child.</param>
            <param name="preserveWorldPos">if set to <c>true</c> [preserve absolute position].</param>
        </member>
        <member name="M:VRage.Game.Components.MyHierarchyComponent.RemoveAllChildren(System.Boolean)">
            <summary>
            Removes all children from this hierarchy.
            </summary>
            <returns>The set of removed children.</returns>
        </member>
        <member name="T:VRage.Game.Components.MyHierarchyComponent.ParentChangedEvent">
            <summary>
            Delegate describing a parent change event.
            </summary>
            <param name="target">The component whose parent changed.</param>
            <param name="oldParent">The previous parent hierarchy, null if the entity used to be top-level.</param>
            <param name="newParent">The previous parent hierarchy, null if the entity becomes top-level.</param>
        </member>
        <member name="E:VRage.Game.Components.MyHierarchyComponent.ChildRemoved">
            <summary>
            Event fired when a child of this hierarchy is removed.
            </summary>
        </member>
        <member name="E:VRage.Game.Components.MyHierarchyComponent.ChildAdded">
            <summary>
            Event fired when a child is added to this hierarchy.
            </summary>
        </member>
        <member name="E:VRage.Game.Components.MyHierarchyComponent.ParentChanged">
            <summary>
            Event fired after the parent of this component has changed.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyHierarchyComponent.RaiseParentChange(VRage.Game.Components.MyHierarchyComponent,VRage.Game.Components.MyHierarchyComponent)">
            <summary>
            Raise the parent changed event.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyHierarchyComponent.RaiseChildRemoved(VRage.Game.Entity.MyEntity)">
            <summary>
            Raise the child removed event.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:VRage.Game.Components.MyHierarchyComponent.RaiseChildAdded(VRage.Game.Entity.MyEntity)">
            <summary>
            Raise the child added event.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:VRage.Game.Components.MyHierarchyComponent.GetChildrenRecursive(System.Collections.Generic.HashSet{VRage.Game.Entity.MyEntity})">
            <summary>
            Collect all child entities recursively into the provided set.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:VRage.Game.Components.MyHierarchyComponent.GetAllChildren">
            <summary>
            Iterate over all child entities that are on the same hierarchy as this component.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.Components.MyHierarchyComponent.GetTopMostParent">
            <summary>
            Return top most parent of this entity
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.Components.MyHierarchyComponent.QueryBounds(VRageMath.BoundingBoxD@,System.Collections.Generic.List{VRage.Game.Entity.MyEntity})">
            <summary>
            Query child entities in a worldSpace bounding box.
            </summary>
            <param name="bounds"></param>
            <param name="result"></param>
        </member>
        <member name="M:VRage.Game.Components.MyHierarchyComponent.QuerySphere(VRageMath.BoundingSphereD@,System.Collections.Generic.List{VRage.Game.Entity.MyEntity})">
            <summary>
            Query all child entities in a world space bounding sphere.
            </summary>
            <param name="sphere"></param>
            <param name="result"></param>
        </member>
        <member name="M:VRage.Game.Components.MyHierarchyComponent.QueryLine(VRageMath.LineD@,System.Collections.Generic.List{VRageMath.MyLineSegmentOverlapResult{VRage.Game.Entity.MyEntity}})">
            <summary>
            Query all children of this component overlapping a world space line.
            </summary>
            <param name="line"></param>
            <param name="result"></param>
        </member>
        <member name="F:VRage.Game.Components.MyPositionComponentBase.m_localMatrix">
            <summary>
            Internal local matrix relative to parent of entity.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyPositionComponentBase.WorldMatrix">
            <summary>
            World matrix of this physic object. Use it whenever you want to do world-matrix transformations with this physic objects.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyPositionComponentBase.LocalMatrix">
            <summary>
            Gets or sets the local matrix.
            </summary>
            <value>
            The local matrix.
            </value>
        </member>
        <member name="P:VRage.Game.Components.MyPositionComponentBase.LocalTransform">
            <summary>
            The local matrix as a transform.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyPositionComponentBase.WorldAABB">
            <summary>
            Gets the world aabb.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyPositionComponentBase.WorldVolume">
            <summary>
            Gets the world volume.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyPositionComponentBase.LocalAABB">
            <summary>
            Sets the local aabb.
            </summary>
            <value>
            The local aabb.
            </value>
        </member>
        <member name="P:VRage.Game.Components.MyPositionComponentBase.LocalVolume">
            <summary>
            Sets the local volume.
            </summary>
            <value>
            The local volume.
            </value>
        </member>
        <member name="P:VRage.Game.Components.MyPositionComponentBase.LocalVolumeOffset">
            <summary>
            Gets or sets the local volume offset.
            </summary>
            <value>
            The local volume offset.
            </value>
        </member>
        <member name="E:VRage.Game.Components.MyPositionComponentBase.OnPositionChanged">
            <summary>
            Event raised when the position of this object changes.
            </summary>
        </member>
        <member name="E:VRage.Game.Components.MyPositionComponentBase.Resized">
            <summary>
            Event fired when the size of this object changes.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyPositionComponentBase.SetWorldMatrix(VRageMath.MatrixD,System.Object,System.Boolean)">
            <summary>
            Sets the world matrix.
            </summary>
            <param name="worldMatrix">The world matrix.</param>
            <param name="source">The source object that caused this change or null when not important.</param>
        </member>
        <member name="M:VRage.Game.Components.MyPositionComponentBase.SetLocalMatrix(VRageMath.MatrixD,System.Object)">
            <summary>
            Sets the local matrix.
            </summary>
            <param name="localMatrix">The local matrix.</param>
            <param name="source">The source object that caused this change or null when not important.</param>
        </member>
        <member name="M:VRage.Game.Components.MyPositionComponentBase.GetPosition">
            <summary>
            Gets the entity position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.Components.MyPositionComponentBase.SetPosition(VRageMath.Vector3D)">
            <summary>
            Sets the position.
            </summary>
            <param name="pos">The pos.</param>
        </member>
        <member name="M:VRage.Game.Components.MyPositionComponentBase.UpdateWorldMatrix(System.Object)">
            <summary>
            Updates the world matrix (change caused by this entity)
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyPositionComponentBase.UpdateWorldMatrix(VRageMath.MatrixD@,System.Object)">
            <summary>
            Updates the world matrix (change caused by parent)
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyPositionComponentBase.OnWorldPositionChanged(System.Object)">
            <summary>
            Called when [world position changed].
            </summary>
            <param name="source">The source object that caused this event.</param>
        </member>
        <member name="E:VRage.Game.Components.MyUseObjectsComponentBase.UseObjectsChanged">
            <summary>
            Event raised when the list of use objects changes.
            </summary>
        </member>
        <member name="T:VRage.Game.Components.MySessionComponentBase">
            <summary>
            Legacy base class 
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MySessionComponentBase.LoadData">
            <summary>
            Invoked immediately after all components have been initialized and added to the session.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MySessionComponentBase.UnloadData">
            <summary>
            Invoked right before the session unloads.
            </summary>
        </member>
        <member name="T:VRage.Game.Components.MyAnimationControllerComponent">
            <summary>
            Entity component containing animation controller.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyAnimationControllerComponent.IsPaused">
            <summary>
            Debug setting to pause animation for the entity.
            </summary>
        </member>
        <member name="F:VRage.Game.Components.MyAnimationControllerComponent.GlobalDebugAnimationSpeed">
            <summary>
            Global animation speed multiplier. This was added for debugging purposes.
            </summary>
        </member>
        <member name="F:VRage.Game.Components.MyAnimationControllerComponent.GlobalAnimationSpeedFactor">
            <summary>
            Global animation speed factor, set to 1 / local sim speed.
            </summary>
        </member>
        <member name="F:VRage.Game.Components.MyAnimationControllerComponent.UpdateOffset">
            <summary>
            This field is used to spread the load across frames.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyAnimationControllerComponent.DebugName">
            <summary>
            Name of the component type for debug purposes (e.g.: "Position")
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyAnimationControllerComponent.OnAddedToScene">
            <summary>
            Component was added in the entity component container.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyAnimationControllerComponent.OnRemovedFromScene">
            <summary>
            Component will be removed from entity component container.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyAnimationControllerComponent.Controller">
            <summary>
            Get the animation controller instance.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyAnimationControllerComponent.Variables">
            <summary>
            Get the variable storage of animation controller instance. Shortcut.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyAnimationControllerComponent.Callbacks">
            <summary>
            Get the variable callbacks instance for component.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyAnimationControllerComponent.FeetIk">
            <summary>
            Get the instance of inverse kinematics.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyAnimationControllerComponent.TriggerAction(VRage.Utils.MyStringId,System.Boolean)">
            <summary>
            Trigger an action in this layer. 
            If there is a transition having given (non-null) name, it is followed immediatelly.
            Conditions of transition are ignored.
            This is a shortcut to Controller.TriggerAction.
            </summary>
        </member>
        <member name="P:VRage.Game.Components.MyPositionComponent.LocalAABB">
            <summary>
            Sets the local aabb.
            </summary>
            <value>
            The local aabb.
            </value>
        </member>
        <member name="M:VRage.Game.Components.MyPositionComponent.SetWorldMatrix(VRageMath.MatrixD,System.Object,System.Boolean)">
            <summary>
            Sets the world matrix.
            </summary>
            <param name="worldMatrix">The world matrix.</param>
            <param name="source">The source object that caused this change or null when not important.</param>
        </member>
        <member name="M:VRage.Game.Components.MyPositionComponent.UpdateChildren(System.Object)">
            <summary>
            Updates the childs of this entity.
            </summary>
        </member>
        <member name="M:VRage.Game.Components.MyPositionComponent.OnWorldPositionChanged(System.Object)">
            <summary>
            Called when [world position changed].
            </summary>
            <param name="source">The source object that caused this event.</param>
        </member>
        <member name="T:VRage.Game.SessionComponents.MySessionComponentAnimationSystem">
            <summary>
            Session component that groups all animation controller components.
            It provides debugging functionality (animation plugin in vrageeditor communicates through this class).
            </summary>
        </member>
        <member name="F:VRage.Game.SessionComponents.MySessionComponentAnimationSystem.m_updateComplexities">
            <summary>
            Estimated load of the system. This helps to assign correct frame offsets to the animation controllers.
            </summary>
        </member>
        <member name="M:VRage.Game.SessionComponents.MySessionComponentAnimationSystem.RegisterEntityComponent(VRage.Game.Components.MyAnimationControllerComponent)">
            <summary>
            Register entity component.
            </summary>
        </member>
        <member name="M:VRage.Game.SessionComponents.MySessionComponentAnimationSystem.UnregisterEntityComponent(VRage.Game.Components.MyAnimationControllerComponent)">
            <summary>
            Unregister entity component.
            </summary>
        </member>
        <member name="M:VRage.Game.SessionComponents.MySessionComponentAnimationSystem.ReloadMwmTracks">
            <summary>
            Reload all mwm tracks while in-game. Mwms from cache are not used. 
            </summary>
        </member>
        <member name="T:VRage.Game.SessionComponents.MySessionComponentExtDebug">
            <summary>
            Communication between game and editor.
            </summary>
        </member>
        <member name="M:VRage.Game.SessionComponents.MySessionComponentExtDebug.ExternalListener.StartServer">
            <summary>
            Start using this component as server (game side).
            </summary>
        </member>
        <member name="M:VRage.Game.SessionComponents.MySessionComponentExtDebug.ExternalListener.StopServer">
            <summary>
            Stop the server on the game side. Called automatically.
            </summary>
        </member>
        <member name="M:VRage.Game.SessionComponents.MySessionComponentExtDebug.ExternalListener.ServerListenerProc">
            <summary>
            Parallel thread - listener.
            </summary>
        </member>
        <member name="T:VRage.Game.ApplicationPackageExtensions">
            <summary>
            Useful extensions for application packages.
            </summary>
        </member>
        <member name="M:VRage.Game.ApplicationPackageExtensions.GetDataPath(VRage.Engine.IApplicationPackage)">
            <summary>
            Get the path where data files are stored in an app package.
            </summary>
            <param name="package"></param>
            <returns></returns>
        </member>
        <member name="T:VRage.Game.Simulation">
            <summary>
            Shorthand for simulation parameters.
            </summary>
        </member>
        <member name="P:VRage.Game.Simulation.StepSize">
            <summary>
            Length of a simulation step in seconds.
            </summary>
        </member>
        <member name="P:VRage.Game.Simulation.StepsPerSecond">
            <summary>
            Number of simulation steps per second.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ScenarioPreset.Mods">
            <summary>
            List of mod references.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.Components.MyObjectBuilder_EntityFXComponentDefinition.FxEntryDef.Overwrite">
            <summary>
            Whether or not starting an effect that is tracked will stop, and overwrite an existing effect.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.Components.MyObjectBuilder_EntityFXComponentDefinition.FxEntryDef.TrackParticle">
            <summary>
            Whether or not the particle will follow the assigned bone/dummy/position, or it will stay in the world.
            </summary>
        </member>
        <member name="T:VRage.Game.ObjectBuilders.Definitions.MyObjectBuilder_SessionDefinition.Comp">
            <summary>
            Descriptor of an entity component.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.MyObjectBuilder_GhostCharacterDefinition.LeftHandWeapons">
            <summary>
            Weapon ID of the weapon in the left hand.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.MyObjectBuilder_GhostCharacterDefinition.RightHandWeapons">
            <summary>
            Weapon ID of the weapon in the right hand.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.MyObjectBuilder_ResearchDefinition.Entries">
            <summary>
            Defines what objects will be within the currently selected research.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.MyObjectBuilder_SchematicItemDefinition.Researches">
            <summary>
            Definition of the schematic item to be added to a research.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.MyObjectBuilder_SessionComponentResearchDefinition.WhitelistMode">
            <summary>
            If the whitelist is turned on or not.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_ClipboardDefinition.PastingSettings">
            <summary>
            Defines pasting settings.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_CoordinateSystemDefinition.AngleToleranceStatic">
            <summary>
            Angle tolerance (in radians) used for deciding if block is aligned to coord system for static grids merging.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_CoordinateSystemDefinition.AngleToleranceDynamic">
            <summary>
            Angle tolerance (in radians) used for deciding if block is aligned to coord system for dynamic/unspecified grids merging.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_CoordinateSystemDefinition.PositionDecimalToleranceStatic">
            <summary>
            Position decimal count for tolerance used for deciding if block is aligned to coord system (ex. 3 - 0.001, 5 - 0.00001, 1 - 0.1, etc) for static grid merging.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_CoordinateSystemDefinition.PositionDecimalToleranceDynamic">
            <summary>
            Position decimal count for tolerance used for deciding if block is aligned to coord system (ex. 3 - 0.001, 5 - 0.00001, 1 - 0.1, etc) for dynamic/unspecified grid merging.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_CoordinateSystemDefinition.CoordSystemSize">
            <summary>
            Local coordinate system size (in meters).
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyPlacementSettings.StaticGridAlignToCenter">
            <summary>
            Align static grids to corners (false) or centers (true).
            You should always set to corners in new games. Center alignment is only for backwards compatibility so that
            static grids are correctly aligned with already existing saves.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyGridPlacementSettings.CanAnchorToStaticGrid">
            <summary>
            When min. allowed penetration is not met, block may still be placed if it is touching static grid and this property is true.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_CubeBuilderDefinition.DefaultBlockBuildingDistance">
            <summary>
            Default block building distance for creative mode.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_CubeBuilderDefinition.MaxBlockBuildingDistance">
            <summary>
            Max building distance for creative mode.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_CubeBuilderDefinition.MinBlockBuildingDistance">
            <summary>
            Min building distnace for creative mode.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_CubeBuilderDefinition.MinBuildingDistSmallSurvivalCharacter">
            <summary>
            Building minimum distance for small grid in survival mode when controlling character.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_CubeBuilderDefinition.MaxBuildingDistSmallSurvivalCharacter">
            <summary>
            Building maximum distance for small grid in survival mode when controlling character.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_CubeBuilderDefinition.MinBuildingDistLargeSurvivalCharacter">
            <summary>
            Building minimum distance for large grid in survival mode when controlling character.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_CubeBuilderDefinition.MaxBuildingDistLargeSurvivalCharacter">
            <summary>
            Building maximum distance for large grid in survival mode when controlling character.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_CubeBuilderDefinition.MinBuildingDistSmallSurvivalShip">
            <summary>
            Building minimum distance for small grid in survival mode when controlling ship.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_CubeBuilderDefinition.MaxBuildingDistSmallSurvivalShip">
            <summary>
            Building maximum distance for small grid in survival mode when controlling ship.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_CubeBuilderDefinition.MinBuildingDistLargeSurvivalShip">
            <summary>
            Building minimum distance for large grid in survival mode when controlling ship.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_CubeBuilderDefinition.MaxBuildingDistLargeSurvivalShip">
            <summary>
            Building maximum distance for large grid in survival mode when controlling ship.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_CubeBuilderDefinition.BuildingSettings">
            <summary>
            Defines placement settings for building mode.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_CubeBuilderDefinition.BuildingAlignIconPos">
            <summary>
            Position of icon for algnment mode of building.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.ComponentSystem.MyObjectBuilder_DurabilityComponentDefinition.DefaultHitDamage">
            <summary>
            Default damage done per hit on target.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.ComponentSystem.MyObjectBuilder_DurabilityComponentDefinition.ParticleEffect">
            <summary>
            Particle effect that is shown when hit.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.ComponentSystem.MyObjectBuilder_DurabilityComponentDefinition.DamageOverTime">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.ComponentSystem.MyObjectBuilder_FractureComponentBase.FracturedShape.Name">
            <summary>
            Name of shape. 
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.ComponentSystem.MyObjectBuilder_FractureComponentBase.FracturedShape.Fixed">
            <summary>
            If piece if breakable or not. Default is false.
            </summary>
        </member>
        <member name="T:VRage.Game.ObjectBuilders.ComponentSystem.MyObjectBuilder_HavokConstraint">
            <summary>
            Base object builder for Havok physics constraints.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.ComponentSystem.MyObjectBuilder_TimerComponentDefinition.Timeout">
            <summary>
            Time before the timeout event is invoked.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.ComponentSystem.MyObjectBuilder_TimerComponentDefinition.Loop">
            <summary>
            Whether the timer keeps looping after the first timeout.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.ComponentSystem.MyObjectBuilder_TimerComponentDefinition.TimeoutEvent">
            <summary>
            Name of the event fired as the timer times out.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.ComponentSystem.MyObjectBuilder_TimerComponentDefinition.StartEvent">
            <summary>
            Event that starts the timer. If none is provided the timer starts upon being added to scene.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.ComponentSystem.MyObjectBuilder_TimerComponentDefinition.StopEvent">
            <summary>
            Event that stops the timer. If none is provided the timer never stops.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:VRage.Game.ObjectBuilders.ComponentSystem.MyObjectBuilder_UseObjectsComponentDefinition.LoadFromModel" -->
        <member name="F:VRage.Game.ObjectBuilders.ComponentSystem.MyObjectBuilder_UseObjectsComponentDefinition.CustomUseObject">
            <summary>
            Custom detector which is created from entity AABB.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationControllerDefinition.Layers">
            <summary>
             animation layers
            </summary>
        </member>
        <member name="T:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationLayer">
            <summary>
             animation system layer - contains link to state machine and bone mask
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationLayer.Name">
            <summary>
             name of this layer
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationLayer.Mode">
            <summary>
             layer mode: should we replace transformations that we currently have or combine them?
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationLayer.StateMachine" -->
        <!-- Badly formed XML comment ignored for member "F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationLayer.InitialSMNode" -->
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationLayer.BoneMask">
            <summary>
            bone mask of this SM, if null or empty, it affects all bones
            bone names are separated with spaces
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationSM.Transitions">
            <summary>
            All transitions between nodes
            </summary>
        </member>
        <member name="T:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationSMNode.MySMNodeType">
            <summary>
             all possible node types.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationSMNode.Name">
            <summary>
             name of this node.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationSMNode.StateMachineName">
            <summary>
             name of underlying (EMBEDDED) state machine, if null it is just a simple node.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationSMNode.AnimationTree">
            <summary>
             animation tree, null if StateMachineName is not null.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationSMNode.EdPos">
            <summary>
             position in editor.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationSMNode.Type">
            <summary>
             type of the node.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationSMTransition.Name">
            <summary>
             name of transition, can be null (name should be used on manual actions)
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationSMTransition.From">
            <summary>
             name of the source state 
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationSMTransition.To">
            <summary>
             name of the target state 
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationSMTransition.Conditions">
            <summary>
             array of condition conjunctions - if any of conjunction is fulfilled, then SM will follow this transition 
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationSMTransition.Priority">
            <summary>
            Priority of the transition, lower is processed sooner.
             Transitions with unset priorities are processed as last ones.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationSMTransition.Curve">
            <summary>
            Mixing curve.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationSMCondition.ValueLeft">
            <summary>
            If numeric, it will be converted to constant float value.
            Otherwise, it is a variable having this name.
            Left side of comparison.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationSMCondition.Operation">
            <summary>
             Condition - operation type.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationSMCondition.ValueRight">
            <summary>
            If numeric, it will be converted to constant float value.
            Otherwise, it is a variable having this name.
            Right side of comparison.
            </summary>
        </member>
        <member name="M:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationSMCondition.ToString">
            <summary>
             Implementation of ToString - for better debugging in VS. :)
            </summary>
            <returns></returns>
        </member>
        <member name="T:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationSMConditionsConjunction">
            <summary>
            Conjunction of several simple conditions. This conjunction is true if all contained conditions are true.
            </summary>
        </member>
        <member name="M:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationSMConditionsConjunction.DeepCopy">
            <summary>
            Create deep copy of this conjuction of conditions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationSMConditionsConjunction.ToString">
            <summary>
             Convert to printable version.
            </summary>
            <returns></returns>
        </member>
        <member name="T:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNode">
            <summary>
            Base class of all object builders of animation tree nodes.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNode.EdPos">
            <summary>
            Position in editor.
            </summary>
        </member>
        <member name="M:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNode.DeepCopyWithMask(System.Collections.Generic.HashSet{VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNode},VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNode,System.Collections.Generic.List{VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNode})">
            <summary>
            Create deep copy of this node and its children.
            </summary>
            <param name="selectedNodes">the mask</param>
            <param name="parentNode">link to the parent node</param>        
            <param name="orphans">link to list of orphaned nodes</param>
            <returns>copied hierarchy</returns>
        </member>
        <member name="M:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNode.GetChildren">
            <summary>
            Get the child nodes of this node.
            </summary>
        </member>
        <member name="T:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTree">
            <summary>
            Root node of the whole animation tree. Supports storing of orphaned nodes.
            </summary>
        </member>
        <member name="M:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTree.DeepCopyWithMask(System.Collections.Generic.HashSet{VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNode})">
            <summary>
            Create deep copy of this node and its children.
            </summary>
            <param name="selectedNodes">the mask</param>
            <returns>copied hierarchy</returns>
        </member>
        <member name="T:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeTrack">
            <summary>
            Track node, storing information about track and playing settings.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeTrack.PathToModel">
            <summary>
            Path to MWM file.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeTrack.AnimationName">
            <summary>
            Name of used track (animation) in MWM file.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeTrack.Loop">
            <summary>
            If true, animation will be looped. Default value is true.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeTrack.Speed">
            <summary>
            Playing speed multiplier.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeTrack.Interpolate">
            <summary>
            Interpolate between keyframes. If false, track will be played frame by frame.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeTrack.SynchronizeWithLayer">
            <summary>
            Synchronize time in this track with the specified layer.
            </summary>
        </member>
        <member name="T:VRage.Game.ObjectBuilders.MyParameterAnimTreeNodeMapping">
            <summary>
            Helper struct: parameter mapping.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyParameterAnimTreeNodeMapping.Param">
            <summary>
            parameter binding
            </summary>
        </member>
        <member name="T:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeMix1D">
            <summary>
            Linear mixing node. Maps child nodes on 1D axis, interpolates according to parameter value.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeMix1D.ParameterName">
            <summary>
            Name of parameter controlling blending inside this node.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeMix1D.Circular">
            <summary>
            True if the value wraps around.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeMix1D.Sensitivity">
            <summary>
            Sensitivity to changes of parameter value. 1=immediate change, 0=no sensitivity.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeMix1D.MaxChange">
            <summary>
            Threshold: maximum change of variable to take sensitivity in account, if crossed, value is set immediatelly.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeMix1D.Children">
            <summary>
            Mapping children to axis. Each child has assigned its value.
            </summary>
        </member>
        <member name="T:VRage.Game.ObjectBuilders.MyParameterAnimTreeNodeSpeedMapping">
            <summary>
            Helper struct: parameter mapping.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyParameterAnimTreeNodeSpeedMapping.Param">
            <summary>
            parameter binding
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyParameterAnimTreeNodeSpeedMapping.Speed">
            <summary>
            speed modifier binding
            </summary>
        </member>
        <member name="T:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeSpeedModifier">
            <summary>
            Speed modifier node. Changes speed of playing of child nodes, interpolates speed according to parameter value.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeSpeedModifier.ParameterName">
            <summary>
            Name of parameter controlling blending inside this node.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeSpeedModifier.Child">
            <summary>
            Link to child node.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeSpeedModifier.SpeedMappings">
            <summary>
            Mapping children to axis. Each child has assigned its value.
            </summary>
        </member>
        <member name="T:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeAdd">
            <summary>
            Additive node. Child nodes are base node + additive node.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeAdd.ParameterName">
            <summary>
            Name of parameter controlling blending inside this node.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeAdd.BaseNode">
            <summary>
            Child node, base "layer".
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeAdd.AddNode">
            <summary>
            Child node, additive "layer".
            </summary>
        </member>
        <member name="T:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeIkTarget">
            <summary>
            Track node, storing information about track and playing settings.
            </summary>
        </member>
        <member name="T:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeIkTarget.IkSolverSettings">
            <summary>
            Setup of IK solver.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeIkTarget.IkSolverSettings.AllowStretching">
            <summary>
            Allow bone stretching.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeIkTarget.IkSolverSettings.MaxIterationCount">
            <summary>
            Maximum iteration count, zero=default iteration count.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeIkTarget.BoneChain">
            <summary>
            Name of the bones which form the chain.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeIkTarget.TargetBoneName">
            <summary>
            Name of the bone which serves as a target for the end effector.
            </summary>
            If both TargetPoint and TargetBoneName are specified, their transforms are combined 
            (target point is then the offset from the target bone).
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeIkTarget.TargetPoint">
            <summary>
            Target point name. 
            </summary>
            If both TargetPoint and TargetBoneName are specified, their transforms are combined 
            (target point is then the offset from the target bone).
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeIkTarget.SolverSettings">
            <summary>
            Setup of inverse kinematics solver.
            </summary>
        </member>
        <member name="T:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeSetter">
            <summary>
            Setter node, storing information about timed variable setting.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeSetter.ValueAssignment.Name">
            <summary>
            Name of the variable.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeSetter.ValueAssignment.Value">
            <summary>
            Value to be set.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeSetter.Child">
            <summary>
            Link to the child node.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeSetter.Time">
            <summary>
            Local animation time when the value should be set.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeSetter.Value">
            <summary>
            Value that is set to animation storage once time spent in the node exceeds specified time (MyAnimationTreeNodeSetter.Time).
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeSetter.ResetValueEnabled">
            <summary>
            When the, the automatic resetting is enabled.
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyObjectBuilder_AnimationTreeNodeSetter.ResetValue">
            <summary>
            Value that is set to animation storage once we leave current animation state.
            </summary>
        </member>
        <member name="T:VRage.Game.Entity.MyInventoryItemAdapterAttribute">
            <summary>
            Attribute used to mark inventory item adapters.
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryItemAdapterAttribute.#ctor(System.Type)">
            <summary>
            Creates instance of attribute fot inventory item adapters.
            </summary>
            <param name="adaptedType">Adapted type of item.</param>
        </member>
        <member name="P:VRage.Game.Entity.MyInventoryItemAdapterAttribute.AdaptedType">
            <summary>
            Gets adapted type.
            </summary>
        </member>
        <member name="E:VRage.Game.Entity.EntityComponents.MyEntityOwnershipComponent.OwnerChanged">
            <summary>
            Event fired when the owner of this component changes.
            </summary>
        </member>
        <member name="E:VRage.Game.Entity.EntityComponents.MyEntityOwnershipComponent.ShareModeChanged">
            <summary>
            Event fired when the sharing mode for this component changes.
            </summary>
        </member>
        <member name="F:VRage.Game.Entity.MyEntityUpdateEnum.BEFORE_NEXT_FRAME">
            <summary>
            Separate update performed once before any other updates are called.
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.SceneFlags">
            <summary>
            Scene object flags for this entity.
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.Factory">
            <summary>
            Factory for entity objects.
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.Id">
            <summary>
            Unique identifier for this entity in it's scene.
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.EntityId">
            <summary>
            Entity id, can be set by subclasses (for example when using pool...)
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.Closed">
            <summary>
            Whether this entity has been destroyed.
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.MarkedForClose">
            <summary>
            Whether this entity is marked to be removed at the end of the frame.
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.Save">
            <summary>
            Whether this entity is to be persisted with the current session.
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.Replicate">
            <summary>
            Whether this entity should be replicated to clients.
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.NeedsUpdate">
            <summary>
            The update flags for this entity.
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.WorldMatrix">
            <summary>
            The world matrix for this entity.
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.Parent">
            <summary>
            The parent in this entity's hierarchy.
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.IsTopLevel">
            <summary>
            Whether this entity is at the top level of the scene hierarchy.
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.GetTopMostParent(System.Type)">
            <summary>
            Finds an returns the topmost parent for this entity.
            </summary>
            <returns></returns>
        </member>
        <member name="F:VRage.Game.Entity.MyEntity.m_physics">
            Optimized link to physics component.
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.Physics">
            Gets the physic component of the entity.
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.Model">
            <summary>
            Model used for this entity.
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:VRage.Game.Entity.MyEntity"/> class.
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.Get``1">
            <summary>
            Get the first component of the given type from the container.
            </summary>
            <typeparam name="TComp">The type to look for, this can be any component type or an interface</typeparam>
            <returns>The first component found.</returns>
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.Get``1(VRage.Utils.MyStringHash)">
            <summary>
            Get the multicomponent in a container with the requested subtype.
            </summary>
            <param name="subtype">Subtype of the component sought after.</param>
            <typeparam name="TComp">The type to look for, this can be any component type or an interface</typeparam>
            <returns>The first component found.</returns>
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.GetEnumerator">
            <summary>
            Iterate through components.
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Iterate through components.
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.Item(System.Int32)">
            <summary>
            Get component at index.
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.UpdateBeforeSimulation10">
            <summary>
            Called each 10th frame if registered for update10
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.UpdateBeforeSimulation100">
            <summary>
            Called each 100th frame if registered for update100
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.DebugDrawPhysics">
            <summary>
            Draw physical representation of entity
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.OnAddedToScene(VRage.Scene.MyScene)">
            <summary>
            Called when the entity is activated.
            </summary>
            <param name="scene">The scene containing this entity.</param>
        </member>
        <member name="E:VRage.Game.Entity.MyEntity.OnMarkForClose">
            <summary>
            This event may not be invoked at all, when calling MyEntities.CloseAll, marking is bypassed
            </summary>
        </member>
        <member name="E:VRage.Game.Entity.MyEntity.GroupChanged">
            <summary>
            Event fired when the membership of this entity changes for a given group type.
            </summary>
        </member>
        <member name="E:VRage.Game.Entity.MyEntity.Activated">
            <summary>
            Event fired when the entity is activated (aka the added to scene event).
            </summary>
        </member>
        <member name="E:VRage.Game.Entity.MyEntity.Deactivated">
            <summary>
            Event fired when the entity is deactivated (aka the removed from scene event).
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.RaiseGroupChanged(System.Type,VRage.Scene.MyGroup,VRage.Scene.MyGroup)">
            <summary>
            Raise the group changes for this entity.
            </summary>
            <param name="groupType"></param>
            <param name="previous"></param>
            <param name="current"></param>
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.Init(VRage.Game.MyDefinitionId)">
            <summary>
            Init an entity with definition id.
            
            This will initialize all components mapped to that definition id as well.
            </summary>
            <param name="definitionId"></param>
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.Delete">
            <summary>
            Destroy this entity.
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.Close">
            <summary>
            This method marks this entity for close which means, that Close
            will be called after all entities are updated
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.MarkForDestroy">
            <summary>
            Mark this entity for destruction.
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.GetObjectBuilder(System.Boolean)">
            <summary>
            Serialize the entity to the object builder.
            </summary>
            <param name="copy">
            When set to true, we indicate that we serialize a copy of the object. 
            This indicates to skip serialization of instance unique data. 
            See the usages if unclear
            </param>
            <returns>Instance of the object builder.</returns>
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.PrepareForDraw">
            <summary>
            Method is called defacto from Update, preparation fo Draw
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.MyEntity.HasTag(VRage.Utils.MyStringHash)">
            <summary>
            Whether this entity has a given tag.
            </summary>
            <param name="tag">The tag to check for.</param>
            <returns>Whether the entity had the tag.</returns>
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.Tags">
            <summary>
            Get all the tags this entity has.
            </summary>
            <remarks>
            Tags are defined in the entity definition. Entities without a definition have no tags.
            </remarks>
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.VRage#Components#IComponent#Container">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.Entity.MyEntity.DisplayNameText">
            <summary>
            Display Name for GUI etc. Override in descendant classes. Usually used to display in terminal or inventory controls.
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.UseObject.IMyUseObject.ActivationMatrix">
            <summary>
            Matrix of object, scale represents size of object
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.UseObject.IMyUseObject.WorldMatrix">
            <summary>
            Matrix of object, scale represents size of object
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.UseObject.IMyUseObject.RenderObjectID">
            <summary>
            Render ID of objects 
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.UseObject.IMyUseObject.InstanceID">
            <summary>
            Instance ID of objects (this should mostly be unused
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.UseObject.IMyUseObject.ShowOverlay">
            <summary>
            Show overlay (semitransparent bounding box)
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.UseObject.IMyUseObject.SupportedActions">
            <summary>
            Returns supported actions
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.UseObject.IMyUseObject.ContinuousUsage">
            <summary>
            When true, use will be called every frame
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.UseObject.IMyUseObject.Use(VRage.Game.Entity.UseObject.UseActionEnum,VRage.Game.Entity.MyEntity)">
            <summary>
            Uses object by specified action
            Caller calls this method only on supported actions
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.UseObject.IMyUseObject.GetActionInfo(VRage.Game.Entity.UseObject.UseActionEnum)">
            <summary>
            Gets action text
            Caller calls this method only on supported actions
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.UseObject.IMyUseObject.OnSelectionEnter">
            <summary>
            Triggered when selection area is Entered.
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.UseObject.IMyUseObject.IsInteractionBtnKeyValid(VRage.Utils.MyStringId)">
            <summary>
            Checks if button key is valid for use.
            </summary>
            <param name="buttonKey">Button key to check.</param>
            <returns>Returns true if button key is valid.</returns>
        </member>
        <member name="T:VRage.Game.Entity.MyInventoryItemType">
            <summary>
            Definition for an inventory item type.
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryItem.Init(VRage.Game.MyDefinitionId,System.Int32)">
            <summary>
            Init a new item from definition/starting amount.
            </summary>
            <param name="defId"></param>
            <param name="amount"></param>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryItem.Deserialize(VRage.ObjectBuilders.Inventory.MyObjectBuilder_InventoryItem)">
            <summary>
            Deserialize from object builder.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryItem.Serialize">
            <summary>
            Serialize to object builder.
            
            This is used when saving the world.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryItem.Deserialize(VRage.Library.Collections.BitStream)">
            <summary>
            Deserialize from bit stream, use by multiplayer.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryItem.Serialize(VRage.Library.Collections.BitStream)">
            <summary>
            Serialize to bitstream, used by multiplayer.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryItem.Clone(System.Int32)">
            <summary>
            Create a copy of this item.
            </summary>
            <returns></returns>
        </member>
        <member name="P:VRage.Game.Entity.MyInventoryItem.DefinitionId">
            <summary>
            Get the definition Id for this item.
            
            If the definition type does not match the builder type for this item a child class may override this.
            </summary>
            <value></value>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryItem.CanStack(VRage.Game.Entity.MyInventoryItem)">
            <summary>
            Whether this item can stack with another item.
            </summary>
            <param name="other">The item to stack with.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryItem.CanStack(VRage.Game.MyDefinitionId)">
            <summary>
            Whether this item may stack with a new instance of the same definition.
            
            The new item will be created fresh from definition.
            </summary>
            <param name="newItem">The definition for the new item.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryItem.AddToStack(VRage.Game.Entity.MyInventoryItem)">
            <summary>
            Add the whole of another inventory stack to this stack.
            
            No reference to the other item may be kept.
            </summary>
            <param name="other">The other stack.</param>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryItem.AddToStack(VRage.Game.Entity.MyInventoryItem,System.Int32)">
            <summary>
            Add an amount of another inventory stack to this stack.
            
            No reference to the other item may be kept.
            </summary>
            <param name="other">The origin stack.</param>
            <param name="amount">The amount to add.</param>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryItem.GetDefinition">
            <summary>
            Get the definition for this item.
            
            Some items may need to override this because their definitions are generated.
            </summary>
            <returns></returns>
        </member>
        <member name="P:VRage.Game.Entity.MyInventoryItem.Factory">
            <summary>
            Object factory responsible for handling inventory items.
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryItem.Create(VRage.Game.MyDefinitionId,System.Int32)">
            <summary>
            Create a new inventory item with the provided definition.
            </summary>
            <param name="itemDefinitionId">The item definition.</param>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryItem.Create``1(VRage.Game.MyDefinitionId,System.Int32)">
            <summary>
            Create a new inventory item for it's definition.
            
            This method tries to cast that item to the requested type argument.
            If the cast fails null is returned.
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="itemDefinitionId">the definition to make the item from.</param>
            <param name="amount">The initial amount on the item.</param>
            <returns>The item if one could be created and was of the correct type. Null otherwise.</returns>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryItem.Serialize(VRage.Library.Collections.BitStream,VRage.Game.Entity.MyInventoryItem)">
            <summary>
            Serialize an item to a bit stream.
            </summary>
            <param name="stream"></param>
            <param name="item"></param>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryItem.TryDeserialize(VRage.Library.Collections.BitStream)">
            <summary>
            Attempt to deserialize an item from a bit stream.
            
            This may return null when de-serialization fails.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryItem.GetDefinition(VRage.Game.MyDefinitionId)">
            <summary>
            Get the physical item definition for a given definition id.
            </summary>
            <param name="defId">The item definition.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryItem.GetItemVolumeAndMass(VRage.Game.MyDefinitionId,System.Single@,System.Single@)">
            <summary>
            Get the mass and volume of a new item of the provided definition.
            </summary>
            <param name="contentId"></param>
            <param name="itemMass"></param>
            <param name="itemVolume"></param>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryItemAdapter.GetAdapter(System.Type,VRage.Game.Entity.MyInventoryItemAdapter)">
            <summary>
            Gets valid adapter for given type. Checks all parents.
            </summary>
            <param name="typeToAdapt">Type to find adapter for.</param>
            <param name="itemAdapter">Adapter from which to start search from.</param>
            <returns>Adapter for given type.</returns>
        </member>
        <member name="P:VRage.Game.Entity.MyInventoryBase.InventoryId">
            <summary>
            This is for the purpose of identifying the inventory in aggregates (i.e. "Backpack", "LeftHand", ...)
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.MyInventoryBase.DisplayName">
            <summary>
            This is for the purpose of showing players the localizable name of the inventory (i.e. "Backpack", "LeftHand", ...)
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.MyInventoryBase.CurrentMass">
            <summary>
            Current inventory mass.
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.MyInventoryBase.ItemCount">
            <summary>
            Returns the number of items in the inventory.
            </summary>
            <value>int - number of items in inventory</value>
        </member>
        <member name="E:VRage.Game.Entity.MyInventoryBase.ContentsChanged">
            <summary>
            Called when items were added or removed, or their amount has changed
            </summary>
        </member>
        <member name="E:VRage.Game.Entity.MyInventoryBase.AfterItemsAdded">
            <summary>
            Event fired right after an item is added. This is fired even when items are added to an existing stack.
            </summary>
        </member>
        <member name="E:VRage.Game.Entity.MyInventoryBase.BeforeItemsRemoved">
            <summary>
            Event fired when items are removed. This is fired even when items are removed from a stack that is not left empty.
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryBase.GetItemAmount(VRage.Game.MyDefinitionId)">
            <summary>
            Get the total amount of items of a given type.
            </summary>
            <param name="contentId">The item type</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryBase.GetItemStackAmount(VRage.Game.MyDefinitionId)">
            <summary>
            Gets total number of stacks of a given type.
            </summary>
            <param name="contentId">The item type</param>
            <returns>Number of stacks</returns>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryBase.FindItem(System.UInt32)">
            <summary>
            Find an item by it's id.
            </summary>
            <param name="itemId"></param>
            <returns>The item from it's id.</returns>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryBase.FindItem(VRage.Game.MyDefinitionId)">
            <summary>
            Find first item by definition.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryBase.Contains(VRage.Game.Entity.MyInventoryItem)">
            <summary>
            Weather this inventory contains the specified item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryBase.Add(VRage.Game.Entity.MyInventoryItem,VRage.Game.Entity.MyInventoryBase.NewItemParams)">
            <summary>
            Add an item stack to the inventory.
            
            The item stack will be distributed optimally amongst the available slots in the inventory.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryBase.Remove(VRage.Game.Entity.MyInventoryItem,System.Nullable{System.Int32})">
            <summary>
            Remove an item from the inventory.
            
            If an amount is provided only that amount is removed from the stack instead.
            </summary>
            <param name="item">The item stack to remove from.</param>
            <param name="amount">The optional amount, when no amount is provided the whole stack is removed.</param>
            <returns>Whether the items could be removed successfully.</returns>
        </member>
        <member name="P:VRage.Game.Entity.MyInventoryBase.Items">
            <summary>
            Get the list of items in this inventory.
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryBase.AddItems(VRage.Game.MyDefinitionId,System.Int32,VRage.Game.Entity.MyInventoryBase.NewItemParams)">
            <summary>
            Adds item of given definition to inventory
            </summary>
            <param name="id"></param>
            <param name="amount"></param>
            <returns>true if items were added, false if items didn't fit</returns>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryBase.RemoveItems(VRage.Game.MyDefinitionId,System.Int32)">
            <summary>
            Remove items of a given amount and definition
            </summary>
            <param name="id">Definition id of items to be removed</param>
            <param name="amount">Amount ot remove</param>
            <returns>Returns true if it removed exactly the amount specified.</returns>
        </member>
        <member name="M:VRage.Game.Entity.MyInventoryBase.TransferItemsFrom(VRage.Game.Entity.MyInventoryBase,VRage.Game.Entity.MyInventoryItem,System.Int32)">
            <summary>
            Transfers safely given item from inventory given as parameter to this instance.
            </summary>
            <returns>true if items were succesfully transfered, otherwise, false</returns>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ModelComponentDefinition.Size">
            <summary>
            Size in meters.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ModelComponentDefinition.Mass">
            <summary>
            Mass in kilogram (kg)
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ModelComponentDefinition.Volume">
            <summary>
            In dm3 (liters)
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ModelComponentDefinition.Model">
            <summary>
            Model of component.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ModelComponentDefinition.DisplayName">
            <summary>
            Name of the component.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ModelComponentDefinition.Description">
            <summary>
            Description of the component.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ModelComponentDefinition.Icons">
            <summary>
            Icon of the component.
            </summary>
        </member>
        <member name="M:VRage.Game.ModdablePathExtensions.Get(VRage.Game.MyObjectBuilder_DefinitionBase.ModdablePath[],VRage.Engine.IApplicationPackage)">
            <summary>
            Get an array of moddable paths as an array of absolute paths.
            </summary>
            <param name="self"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:VRage.Game.Definitions.Animation.MyAnimationDefinition.ChatCommand">
            <summary>
            Chat command to hook to.
            </summary>
        </member>
        <member name="P:VRage.Game.Definitions.Animation.MyAnimationDefinition.AnimationTrigger">
            <summary>
            Animation trigger to play.
            </summary>
        </member>
        <member name="P:VRage.Game.Definitions.Animation.MyAnimationDefinition.EmoteMessage">
            <summary>
            Message to put into chat.
            </summary>
        </member>
        <member name="T:VRage.Game.Definitions.MySessionDefinition.ComponentData">
            <summary>
            Parameters for a component in the session.
            </summary>
        </member>
        <member name="F:VRage.Game.Definitions.MyVisualDefinitionBase.DisplayNameEnum">
            <summary>
            Enum used for localization of display name. Null for player created definitions.
            </summary>
        </member>
        <member name="F:VRage.Game.Definitions.MyVisualDefinitionBase.DescriptionEnum">
            <summary>
            Enum used for localization of description. Null for player created definitions.
            </summary>
        </member>
        <member name="F:VRage.Game.Definitions.MyVisualDefinitionBase.DisplayNameString">
            <summary>
            String name used for user created definitions which do not have localization support.
            </summary>
        </member>
        <member name="F:VRage.Game.Definitions.MyVisualDefinitionBase.DescriptionString">
            <summary>
            String used for user created description which do not have localization support.
            </summary>
        </member>
        <member name="F:VRage.Game.Definitions.MyVisualDefinitionBase.Icons">
            <summary>
            Icons for the definition, they are used from top to bottom.
            </summary>
        </member>
        <member name="F:VRage.Game.Definitions.MyVisualDefinitionBase.Public">
            <summary>
            Indicates if definition should be offered in Cube builder
            </summary>
        </member>
        <member name="F:VRage.Game.Definitions.MyVisualDefinitionBase.Visible">
            <summary>
            Gets or sets if gui should be visible in G screen. If false, visible only in G screen search.
            </summary>
        </member>
        <member name="P:VRage.Game.Definitions.MyVisualDefinitionBase.DisplayNameText">
            <summary>
            Use this property when showing name in GUI instead of DisplayName. This takes into
            account more complex name construction.
            </summary>
        </member>
        <member name="P:VRage.Game.Definitions.MyVisualDefinitionBase.DescriptionText">
            <summary>
            Use this property when showing description in GUI, as it takes into account more
            complex description construction.
            </summary>
        </member>
        <member name="T:VRage.Game.Definitions.MyDefinitionHandler">
             <summary>
             Handler for a definition type.
            
             The handler is a container for methods related to definition loading and post-processing.
            
             It has entry points in case any additional steps are required for loading some definition.
            
             In most cases the default implementation is fine.
             </summary>
        </member>
        <member name="F:VRage.Game.Definitions.MyDefinitionHandler.Attribute">
            <summary>
            Original attribute.
            </summary>
        </member>
        <member name="F:VRage.Game.Definitions.MyDefinitionHandler.DeclaredDependencies">
            <summary>
            Definition dependencies for the definition class handled by this handler.
            </summary>
        </member>
        <member name="F:VRage.Game.Definitions.MyDefinitionHandler.Dependencies">
            <summary>
            Definition dependencies for the definition class handled by this handler.
            </summary>
        </member>
        <member name="P:VRage.Game.Definitions.MyDefinitionHandler.HasBeforeLoad">
            <summary>
            Weather this instance has an implementation for the before load method.
            </summary>
        </member>
        <member name="P:VRage.Game.Definitions.MyDefinitionHandler.HasAfterLoad">
            <summary>
            Weather this instance has an implementation for the after load method.
            </summary>
        </member>
        <member name="P:VRage.Game.Definitions.MyDefinitionHandler.HasUnload">
            <summary>
            Weather this instance has an implementation for the unload method.
            </summary>
        </member>
        <member name="M:VRage.Game.Definitions.MyDefinitionHandler.BeforeLoad(VRage.Game.MyDefinitionSet)">
             <summary>
             Called before definitions a given type are loaded.
            
             This should be used to setup any static meta information related to those definitions.
            
             Default implementation is guaranteed not to do anything. You don't have to call it.
             </summary>
        </member>
        <member name="M:VRage.Game.Definitions.MyDefinitionHandler.AfterLoad(VRage.Game.MyDefinitionSet,System.Collections.Generic.List{VRage.Game.MyDefinitionBase})">
             <summary>
             Called after all definitions of a given type are loaded.
            
             Default implementation is guaranteed not to do anything. You don't have to call it.
             </summary>
        </member>
        <member name="M:VRage.Game.Definitions.MyDefinitionHandler.Unload(VRage.Game.MyDefinitionSet)">
             <summary>
             Called when definitions are being unloaded.
            
             Default implementation is guaranteed not to do anything. You don't have to call it.
             </summary>
        </member>
        <member name="M:VRage.Game.Definitions.MyDefinitionHandler.HandleOverride(VRage.Game.MyObjectBuilder_DefinitionBase,VRage.Game.MyObjectBuilder_DefinitionBase)">
             <summary>
             Handle what happens when a mod defines a definition with the same name.
            
             Return null to signal no object should be produced.
            
             Notes:
              * To preserve OB caching neither builder should be modified.
              * By default this method returns null if right.Enabled == false,
                otherwise the merge of left into right.
              * When merging left to right the Merge flag in right is used to control the process.
             </summary>
             <param name="left">The object builder that was already loaded.</param>
             <param name="right">The new, conflicting object builder.</param>
             <returns>The final resulting object builder.</returns>
             <seealso cref="T:VRage.ObjectBuilder.Merging.IMyObjectBuilderMerger"/>
        </member>
        <member name="P:VRage.Game.Definitions.MyDefinitionHandler.Merger">
            <summary>
            Object builder merger for this type.
            </summary>
        </member>
        <member name="M:VRage.Game.Definitions.MyDefinitionHandler.Init">
            <summary>
            Initialize the handler.
            </summary>
        </member>
        <member name="M:VRage.Game.Definitions.MyDefinitionTypeAttribute.GetHandler(System.Type)">
            <summary>
            Find a handler for the given type.
            This returns the current if set otherwise the parent if any, as a last resort it returns tha handler base class.
            </summary>
            <param name="annotatedType"></param>
            <returns></returns>
        </member>
        <member name="F:VRage.Game.Definitions.SessionComponents.MyClipboardDefinition.PastingSettings">
            <summary>
            Defines settings for pasting.
            </summary>
        </member>
        <member name="F:VRage.Game.Definitions.SessionComponents.MyCubeBuilderDefinition.BuildingSettings">
            <summary>
            Defines settings for building mode.
            </summary>
        </member>
        <member name="T:VRage.Game.Common.MyExtDebugClient">
            <summary>
            Auto-debug client.
            </summary>
        </member>
        <member name="P:VRage.Game.Common.MyFactoryTagAttribute.ProducedType">
            <summary>
            Get the produced object type.
            </summary>
        </member>
        <member name="P:VRage.Game.Common.MyFactoryTagAttribute.ObjectBuilderType">
            <summary>
            Get the object builder type associated with the object builder.
            </summary>
        </member>
        <member name="P:VRage.Game.MyContainerDefinition.Component.Subtype">
            <summary>
            The subtype of the component definition.
            </summary>
        </member>
        <member name="P:VRage.Game.MyContainerDefinition.Component.DefinitionId">
            <summary>
            The definition id for the component.
            </summary>
        </member>
        <member name="P:VRage.Game.MyContainerDefinition.Component.SimpleDefinitionId">
            <summary>
            The definition id for the component.
            </summary>
        </member>
        <member name="P:VRage.Game.MyContainerDefinition.Component.IsMultiComponent">
            <summary>
            Whether this component is a multi-component.
            </summary>
        </member>
        <member name="F:VRage.Game.MyContainerDefinition.Component.AlwaysCreate">
            <summary>
            Whether this component is always added to the container, even if it did not serialize any data.
            </summary>
        </member>
        <member name="F:VRage.Game.MyDefinitionBase.Enabled">
            <summary>
            Definition can be disabled by mod, then it will be removed from definition manager
            </summary>
        </member>
        <member name="F:VRage.Game.MyDefinitionBase.Package">
            <summary>
            Application package that contains this definition.
            </summary>
        </member>
        <member name="M:VRage.Game.MyApplicationErrors.FindSuspiciousPackage(VRage.Engine.IApplicationPackage,System.Object)">
            <summary>
            Traverse the message object in search for indicators that a non-main package ir responsible for the issue it reports.
            </summary>
            <param name="current">The current best-guess for the responsible package.</param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.MyApplicationErrors.GetStack(System.Object)">
            <summary>
            Search through a message for an exception or stack trace object.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.MyDefinitionFactory.MapHierarchy(System.Type)">
            <summary>
            Map the type hierarchy if this definition.
            
            This is used to index all child definitions for recursive searches.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:VRage.Game.MyDefinitionFactory.RegisterDefinitionHandler(VRage.Game.Definitions.MyDefinitionTypeAttribute,System.Type)">
            <summary>
            Register the definition handler and dependencies for a definition.
            </summary>
            <param name="descriptor"></param>
            <param name="annotatedType"></param>
        </member>
        <member name="M:VRage.Game.MyDefinitionFactory.IsDependencyValid(System.Type)">
            <summary>
            Check if a type is valid as a definition dependency.
            </summary>
            <param name="dep"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.MyDefinitionFactory.RegisterDefinitionGroup(System.Type)">
            <summary>
            Register the definition group for the provided definition type..
            </summary>
            <param name="type">The type to register</param>
        </member>
        <member name="M:VRage.Game.MyDefinitionFactory.SortHandlers(System.Collections.Generic.List{VRage.Game.Definitions.MyDefinitionHandler})">
             <summary>
             Sort postprocessors by their dependency graph.
            
             To do that we calculate the dependency depth of each definition and sort by that number.
             </summary>
             <param name="handlers">The list of postprocessors to sort.</param>
        </member>
        <member name="T:VRage.Game.MyDefinitionId">
            <summary>
            An identifier for an object definition.
            </summary>
            <remarks>
            Many object in the game are identified by their definitions, as a result a <c>DefinitionId</c> can be seen used as a key in many different contexts.
            </remarks>
        </member>
        <member name="M:VRage.Game.MyDefinitionId.GetHashCodeLong">
            <summary>
            Safer hash code. It is unique in more situations than GetHashCode would be,
            but it may still require full check.
            </summary>
            <returns>64-bit hash code.</returns>
        </member>
        <member name="M:VRage.Game.MyDefinitionManager.Get``1(System.String,System.Boolean)">
            <summary>
            Get a definition with requested subtype.
            
            Typeid is deduced from the type parameter.
            </summary>
            <typeparam name="T">The type of the definition requested.</typeparam>
            <param name="subtypeId">The subtype name of the definition.</param>
            <param name="checkSubtypes">When true we will try all know child definition types in search for the requested subtype.</param>
            <returns>The definition or null if not found.</returns>
        </member>
        <member name="M:VRage.Game.MyDefinitionManager.Get``1(VRage.Utils.MyStringHash,System.Boolean)">
            <summary>
            Get a definition with requested subtype.
            
            Typeid is deduced from the type argument.
            Type group is also deduced from type argument.
            </summary>
            <typeparam name="T">The type of the definition requested.</typeparam>
            <param name="subtypeId">The subtype name of the definition.</param>
            <param name="checkSubtypes">When true we will try all know child definition types in search for the requested subtype.</param>
            <returns>The definition or null if not found.</returns>
        </member>
        <member name="M:VRage.Game.MyDefinitionManager.Get``1(VRage.Game.MyDefinitionId)">
            <summary>
            Get a definition with requested id.
            
            type group is deduced from type argument.
            </summary>
            <typeparam name="T">The type of the definition requested.</typeparam>
            <param name="definitionId">The subtype name of the definition.</param>
            <returns>The definition or null if not found.</returns>
        </member>
        <member name="P:VRage.Game.MyDefinitionManager.Contexts">
            <summary>
            Get the list of all mods where definitions are loaded from.
            </summary>
        </member>
        <member name="P:VRage.Game.MyDefinitionManager.Log">
            <summary>
            Definition loading log.
            </summary>
        </member>
        <member name="M:VRage.Game.MyDefinitionManager.LoadDefinitions(System.String,VRage.Game.MyModContext)">
             <summary>
             Load all definitions in folders of a given directory.
            
             The definitions are stored for later post-processing.
             </summary>
             <param name="folder"></param>
             <param name="context"></param>
        </member>
        <member name="M:VRage.Game.MyDefinitionManager.AddObjectBuilders(VRage.Engine.IApplicationPackage,VRage.Game.MyObjectBuilder_DefinitionBase[])">
             <summary>
             Add definitions to the current loading set.
            
             This method is thread safe.
             </summary>
             <param name="context">The mod context for those definitions.</param>
             <param name="defs">The list of definitions to add.</param>
        </member>
        <member name="M:VRage.Game.MyDefinitionManager.AddObjectBuilders(VRage.Engine.IApplicationPackage,System.Collections.Generic.IEnumerable{VRage.Game.MyObjectBuilder_DefinitionBase})">
             <summary>
             Add definitions to the current loading set.
            
             This method is thread safe.
             </summary>
             <param name="context">The mod context for those definitions.</param>
             <param name="defs">The collection of definitions to add.</param>
        </member>
        <member name="M:VRage.Game.MyDefinitionManager.InitDefinitions">
            <summary>
            Initialize all loaded definitions.
            </summary>
        </member>
        <member name="M:VRage.Game.MyDefinitionManager.UnloadData">
            <summary>
            Unloads all definitions.
            
            Clears any temporary data and invokes definition unload methods if any.
            </summary>
        </member>
        <member name="T:VRage.Game.MyDefinitionManagerSimple">
            <summary>
            Simple definition manager class that allows loading of definitions from files
            and support type overrides (e.g. for loading subset of EnvironmentDefinition)
            
            TODO: This whole class makes little sense for anything other than the model viewer, it should be moved there eventually.
            </summary>
        </member>
        <member name="M:VRage.Game.MyDefinitionManagerSimple.AddDefinitionOverride(System.Type,System.String)">
            <param name="typeOverride">The xst:type atrribute overridden</param>
        </member>
        <member name="M:VRage.Game.MyDefinitionManagerSimple.RemapType(VRage.ObjectBuilders.SerializableDefinitionId@,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Used for type remapping when overriding definition types.
            </summary>
        </member>
        <member name="M:VRage.Game.MyDefinitionSet.GetDefinitionGroup(System.Type,System.Boolean)">
            <summary>
            Get the group definition set for a given definition group type.
            
            if create is true then the set is created when it does not exist.
            </summary>
            <param name="groupType">the type that identifies the def group.</param>
            <param name="create"></param>
            <returns>The existing or created set, or null if no set was created.</returns>
        </member>
        <member name="M:VRage.Game.MyDefinitionSet.AddDefinition(VRage.Game.MyDefinitionBase)">
            <summary>
            Add a definition to the set.
            </summary>
            <param name="def"></param>
            <exception cref="T:System.ArgumentException">When a definition with the same key already existed in the set.</exception>
        </member>
        <member name="M:VRage.Game.MyDefinitionSet.AddOrReplaceDefinition(VRage.Game.MyDefinitionBase)">
            <summary>
            Add or replace an existing definition.
            </summary>
            <param name="def"></param>
            <returns>True when adding this new definition replaces an existing one.</returns>
        </member>
        <member name="M:VRage.Game.MyDefinitionSet.RemoveDefinition``1(VRage.Game.MyDefinitionId)">
            <summary>
            Remove a definition by it's id.
            </summary>
            <typeparam name="T">The definition group.</typeparam>
            <param name="id"></param>
        </member>
        <member name="M:VRage.Game.MyDefinitionSet.ContainsDefinition``1(VRage.Game.MyDefinitionId)">
            <summary>
            Check if the set contains a definition of type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.MyDefinitionSet.ContainsDefinition``1(VRage.Utils.MyStringHash,System.Boolean)">
            <summary>
            Find if a definition with given subtype is contained in the set.
            
            Note that the type argument is used to infer the definition group.
            If the type is not specific enough the definition might not be found since it was not searched for in the correct group.
            </summary>
            <typeparam name="TDefinition">The type of the definition.</typeparam>
            <param name="subtypeId"></param>
            <param name="checkSubtypes"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.MyDefinitionSet.GetDefinition``1(VRage.Utils.MyStringHash,System.Boolean)">
            <summary>
            Get a definition from the set.
            
            Note that the type argument is used to infer the definition group.
            If the type is not specific enough the definition might not be found since it was not searched for in the correct group.
            </summary>
            <typeparam name="TDefinition">The type of the definition.</typeparam>
            <param name="subtypeId"></param>
            <param name="checkSubtypes"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.MyDefinitionSet.GetDefinition``1(VRage.Game.MyDefinitionId)">
            <summary>
            Get a definition by id.
            
            The definition group is infered from the Type argument.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.MyDefinitionSet.GetDefinitions``1">
            <summary>
            Get all definitions of a specified type.
            
            This will only return definitions whose typeId maps directly to the requested type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.MyDefinitionSet.Clear">
            <summary>
            Clear the contents of the definition set.
            </summary>
        </member>
        <member name="T:VRage.Game.MyModContext">
            <summary>
            Object that describes a user generated modification of the base game.
            </summary>
        </member>
        <member name="F:VRage.Game.MyModContext.LoadOrderComparer">
            <summary>
            Comparer that can be used to sort mod contexts according to their load order.
            </summary>
        </member>
        <member name="P:VRage.Game.MyModContext.Id">
            <inheritdoc />
        </member>
        <member name="F:VRage.Game.MyModContext.Index">
            <summary>
            Index of this mod in the session's load order.
            </summary>
        </member>
        <member name="P:VRage.Game.MyModContext.Name">
            <summary>
            User friendly name of this mod.
            </summary>
        </member>
        <member name="P:VRage.Game.MyModContext.ContentPath">
            <summary>
            Path to mods content folder.
            </summary>
        </member>
        <member name="P:VRage.Game.MyModContext.IsMain">
            <inheritdoc />
        </member>
        <member name="F:VRage.Game.MyModContext.DataPath">
            <summary>
            Path to mods data folder.
            </summary>
        </member>
        <member name="F:VRage.Game.MyModContext.WorkshopItem">
            <summary>
            Workshop item associated with this context.
            </summary>
        </member>
        <member name="P:VRage.Game.MyModContext.Version">
            <inheritdoc />
        </member>
        <member name="P:VRage.Game.MyModContext.Assemblies">
            <inheritdoc />
        </member>
        <member name="M:VRage.Game.MyModContext.#ctor(VRage.GameServices.MyWorkshopItem,System.Int32)">
            <summary>
            Init a mod from workshop item data.
            </summary>
            <param name="modItem"></param>
            <param name="index"></param>
        </member>
        <member name="M:VRage.Game.MyModContext.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a custom mod path from user data.
            
            Use this with care.
            </summary>
            <param name="modId">Id of the mod.</param>
            <param name="modName">User friendly name of the mod.</param>
            <param name="modContentPath">Path to the contents of this mod.</param>
        </member>
        <member name="F:VRage.Game.MyModContext.m_assemblies">
            <summary>
            Assemblies in this mod.
            </summary>
        </member>
        <member name="M:VRage.Game.MyModContext.SetAssemblies(System.Reflection.Assembly[])">
            <summary>
            Set the assemblies for this mod context.
            </summary>
            <param name="assemblies"></param>
        </member>
        <member name="T:VRage.Game.MyModContext.MyMainContext">
            <summary>
            Dummy main context to be used when there is no application running.
            </summary>
        </member>
        <member name="F:VRage.Game.MySunProperties.BaseSunDirectionNormalized">
            <summary>Direction TO sun</summary>
        </member>
        <member name="F:VRage.Game.MySunProperties.SunDirectionNormalized">
            <summary>Direction TO sun</summary>
        </member>
        <member name="T:VRage.Game.MyVisualSettingsDefinition">
            <summary>
            Stripped environment definition with only visual settings
            </summary>
        </member>
        <member name="M:VRage.Game.MyMeshHelper.GenerateSphere(VRageMath.MatrixD@,System.Single,System.Int32,System.Collections.Generic.List{VRageMath.Vector3D})">
            <summary>
            GenerateSphere
            </summary>
            <param name="vctPos"></param>
            <param name="radius"></param>
            <param name="steps"></param>
        </member>
        <member name="M:VRage.Game.MySimpleObjectDraw.DrawTransparentBox(VRageMath.MatrixD@,VRageMath.BoundingBoxD@,VRageMath.Color@,VRageMath.Color@,VRage.Game.MySimpleObjectRasterizer,VRageMath.Vector3I,System.Single,System.Nullable{VRage.Utils.MyStringId},System.Nullable{VRage.Utils.MyStringId},System.Boolean,System.Int32)">
            <summary>
            DrawTransparentBox
            </summary>
        </member>
        <member name="M:VRage.Game.MySimpleObjectDraw.DrawWireFramedBox(VRageMath.MatrixD@,VRageMath.BoundingBoxD@,VRageMath.Color@,System.Single,VRageMath.Vector3I,System.Nullable{VRage.Utils.MyStringId},System.Boolean,System.Int32)">
            <summary>
            DrawWireFramedBox
            </summary>
            <param name="worldMatrix"></param>
            <param name="localbox"></param>
            <param name="color"></param>
            <param name="bWireFramed"></param>
            <param name="wireDivideRatio"></param>
            <param name="wireDivideRatio"></param>
        </member>
        <member name="M:VRage.Game.MySimpleObjectDraw.DrawTransparentSphere(VRageMath.MatrixD@,System.Single,VRageMath.Color@,VRage.Game.MySimpleObjectRasterizer,System.Int32,System.Nullable{VRage.Utils.MyStringId},System.Nullable{VRage.Utils.MyStringId},System.Single,System.Int32)">
            <summary>
            DrawTransparentSphere
            </summary>
            <param name="vctPos"></param>
            <param name="radius"></param>
            <param name="color"></param>
            <param name="bWireFramed"></param>
            <param name="wireDivideRatio"></param>
        </member>
        <member name="M:VRage.Game.MySimpleObjectDraw.GenerateLines(VRageMath.Vector3D,VRageMath.Vector3D,VRageMath.Vector3D@,VRageMath.MatrixD@,System.Collections.Generic.List{VRageMath.LineD}@,System.Int32)">
            <summary>
            GenerateLines
            </summary>
            <param name="vctStart"></param>
            <param name="vctEnd"></param>
            <param name="vctSideStep"></param>
            <param name="worldMatrix"></param>
            <param name="lineBuffer"></param>
            <param name="divideRatio"></param>
        </member>
        <member name="M:VRage.Game.MyAnimatedParticle.GetBillboardQuadRotated(VRageRender.MyBillboard,VRageMath.Vector3D@,System.Single,System.Single)">
            <summary>
            Return quad whos face is always looking to the camera. 
            IMPORTANT: This bilboard looks same as point vertexes (point sprites) - horizontal and vertical axes of billboard are always parallel to screen
            That means, if billboard is in the left-up corner of screen, it won't be distorted by perspective. If will look as 2D quad on screen. As I said, it's same as GPU points.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VRage.Game.MyParticleEffect.Stop(System.Boolean)" -->
        <member name="M:VRage.Game.MyParticleEffect.Play">
            <summary>
            This method restores effect
            </summary>
        </member>
        <member name="M:VRage.Game.MyParticleEffect.Pause">
            <summary>
            This methods freezes effect and particles
            </summary>
        </member>
        <member name="M:VRage.Game.MyParticleEffect.StopEmitting(System.Single)">
            <summary>
            This method stops generating any new particles
            </summary>
        </member>
        <member name="M:VRage.Game.MyParticleEffect.StopLights">
            <summary>
            This method stops all lights
            </summary>
        </member>
        <member name="M:VRage.Game.MyParticleEffect.Update">
            <summary>
            Updates the life of the effect.
            </summary>
            <returns>True if effect has died, false if it is still alive.</returns>
        </member>
        <member name="M:VRage.Game.MyParticleEffect.UpdateLife">
            <summary>
            Updates the particle effect.
            </summary>
            <returns>true if the particle effect should be cleaned up, false otherwise.</returns>
        </member>
        <member name="P:VRage.Game.MyParticleGeneration.Birth">
            <summary>
            Public members to easy access
            </summary>
        </member>
        <member name="P:VRage.Game.MyParticleGPUGeneration.ArraySize">
            <summary>
            Public members to easy access
            </summary>
        </member>
        <member name="P:VRage.Game.MyParticleLight.Position">
            <summary>
            Public members to easy access
            </summary>
        </member>
        <member name="M:VRage.Game.MyParticlesLibrary.AddParticleEffect(VRage.Definitions.Effects.MyParticleEffectDefinition)">
            <summary>
            Instantiates a new particle effect from definition and adds to the library.
            </summary>
            <param name="definition"></param>
        </member>
        <member name="P:VRage.Game.MyParticleSound.Range">
            <summary>
            Public members to easy access
            </summary>
        </member>
        <member name="T:VRage.Game.Input.MyInputContext">
            <summary>
            Input context is a set of bindings to actions.
            
            Input contexts can be pushed onto the input stack so that when actions are fired it might be notified.
            </summary>
        </member>
        <member name="T:VRage.Game.Input.MyInputContext.ActionBinding">
            <summary>
            Information about an action listener.
            </summary>
        </member>
        <member name="T:VRage.Game.Input.MyInputContext.ActionEvent">
            <summary>
            Description of an input event.
            </summary>
        </member>
        <member name="P:VRage.Game.Input.MyInputContext.IgnoreWhilePaused">
            <summary>
            If set to true, this input context will not handle any events when the game is paused.
            </summary>
        </member>
        <member name="M:VRage.Game.Input.MyInputContext.RegisterAction(VRage.Utils.MyStringHash,VRage.Game.Input.InputEventHandler)">
            <summary>
            Register handler for the provided action on it's pressed state.
            </summary>
            <param name="action"></param>
            <param name="handler"></param>
        </member>
        <member name="M:VRage.Game.Input.MyInputContext.RegisterAction(VRage.Utils.MyStringHash,System.Action)">
            <summary>
            Register handler for the provided action on it's pressed state.
            </summary>
            <param name="action"></param>
            <param name="handler"></param>
        </member>
        <member name="M:VRage.Game.Input.MyInputContext.UnregisterAllActions">
            <summary>
            Unregister all actions stored in this input context.
            </summary>
        </member>
        <member name="M:VRage.Game.Input.MyShortcutStorage.GetShortcutActions(VRage.Input.Input.MyShortcut)">
            <summary>
            Get all the actions assigned to a same key combination.
            </summary>
            <param name="shortcut"></param>
            <returns></returns>
        </member>
        <member name="P:VRage.Game.Input.MyShortcutStorage.ActionsToShortcuts">
            <summary>
            Get all the actions and the corresponding shortcuts.
            </summary>
        </member>
        <member name="M:VRage.Game.Input.MyShortcutStorage.CopyTo(VRage.Game.Input.MyShortcutStorage)">
            <summary>
            Copy this shortcut storage to another.
            </summary>
            <param name="target">The copy target.</param>
        </member>
        <member name="M:VRage.Game.Input.MyShortcutStorage.CopyFrom(VRage.Game.Input.MyShortcutStorage)">
            <summary>
            Copy all keybindings from another shortcut storage to this one.
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:VRage.Game.Input.MyShortcutStorage.AssignShortcut(VRage.Utils.MyStringHash,VRage.Input.Input.MyShortcut,System.Int32)">
            <summary>
            Assign an action to the given shortcut on the provided control slot.
            
            This method will only fail if the slot index is invalid or if another slot
            for this action was already assigned to the same control.
            </summary>
            <param name="action">The action to bind</param>
            <param name="shortcut">The shortcut</param>
            <param name="slot">The shortcut slot</param>
            <returns>Weather the shortcut can be assigned or not.</returns>
        </member>
        <member name="M:VRage.Game.Input.MyShortcutStorage.ClearShortcut(VRage.Utils.MyStringHash,System.Int32)">
            <summary>
            Clear the specified shortcut slot for the provided action.
            </summary>
            <param name="action"></param>
            <param name="slot"></param>
        </member>
        <member name="M:VRage.Game.Input.MyShortcutStorage.ClearShortcut(VRage.Utils.MyStringHash)">
            <summary>
            Clear all shorcuts associated with the provided action.
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:VRage.Game.ModAPI.BeforeDamageApplied">
            <summary>
            This delegate is used to handle damage before it's applied to an object.  This returns a modified damage that is used in DoDamage.  Return damage if no change.
            </summary>
            <param name="info">Structure containing information about damage dealt.</param>
            <returns>Modified damage.  Return damage parameter if damage is not modified.</returns>
        </member>
        <member name="T:VRage.Game.ModAPI.MyDamageSystemPriority">
            <summary>
             Standard priority values
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyDamageSystem.RegisterDestroyHandler(System.Int32,System.Action{VRage.Components.Interfaces.MyDamageInformation})">
            <summary>
            Registers a handler for when an object in game is destroyed.
            </summary>
            <param name="priority">Priority level.  Lower means higher priority.</param>
            <param name="handler">Actual handler delegate</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyDamageSystem.RegisterBeforeDamageHandler(System.Int32,VRage.Game.ModAPI.BeforeDamageApplied)">
            <summary>
            Registers a handler that is called before an object in game is damaged.  The damage can be modified in this handler.
            </summary>
            <param name="priority">Priority level.  Lower means higher priority.</param>
            <param name="handler">Actual handler delegate</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyDamageSystem.RegisterAfterDamageHandler(System.Int32,System.Action{VRage.Components.Interfaces.MyDamageInformation})">
            <summary>
            Registers a handler that is called after an object in game is damaged.
            </summary>
            <param name="priority">Priority level.  Lower means higher priority.</param>
            <param name="handler">Actual handler delegate</param>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGps.Hash">
            <summary>
            The GPS entry id hash which is generated using the GPS name and coordinates.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyGps.UpdateHash">
            <summary>
            Updates the hash id if you've changed the name or the coordinates.
            NOTE: Do not use this if you plan on using this object to update existing GPS entries.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyGps.DiscardAt">
            <summary>
            If it's null then the GPS is confirmed (does not expire automatically).
            Otherwise, time at which we should drop it from the list, relative to ElapsedPlayTime
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyHudNotification.Text">
            <summary>
            Get or set the notification text.
            Setting the text will immediatly update it if the notification is shown.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyHudNotification.Font">
            <summary>
            Get or set the font for this notification.
            Setting it will immediatly update it if the notification is shown.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyHudNotification.AliveTime">
            <summary>
            Get or set the time for the notification to be shown, in miliseconds.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyHudNotification.Show">
            <summary>
            Shows the notification on the HUD.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyHudNotification.Hide">
            <summary>
            Hides the notification on the HUD even if it was supposed to show for longer.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyHudNotification.ResetAliveTime">
            <summary>
            Reset the alive time for the text.
            This is called when setting AliveTime as well.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyMultiplayer.RaiseStaticEvent(System.Func{VRage.Network.IMyEventOwner,System.Action},VRage.Network.EndpointId)">
            <summary>
            Raises static multiplayer event.
            Usage: MyMultiplayer.RaiseStaticEvent(s => MyClass.MyStaticFunction);
            </summary>
            <param name="targetEndpoint">Target of the event. When broadcasting, it's exclude endpoint.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyMultiplayer.RaiseStaticEvent``1(System.Func{VRage.Network.IMyEventOwner,System.Action{``0}},``0,VRage.Network.EndpointId)">
            <summary>
            Raises static multiplayer event.
            Usage: MyMultiplayer.RaiseStaticEvent(s => MyClass.MyStaticFunction, arg);
            </summary>
            <param name="targetEndpoint">Target of the event. When broadcasting, it's exclude endpoint.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyMultiplayer.RaiseStaticEvent``2(System.Func{VRage.Network.IMyEventOwner,System.Action{``0,``1}},``0,``1,VRage.Network.EndpointId)">
            <summary>
            Raises static multiplayer event.
            Usage: MyMultiplayer.RaiseStaticEvent(s => MyClass.MyStaticFunction, arg2, arg3);
            </summary>
            <param name="targetEndpoint">Target of the event. When broadcasting, it's exclude endpoint.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyMultiplayer.RaiseStaticEvent``3(System.Func{VRage.Network.IMyEventOwner,System.Action{``0,``1,``2}},``0,``1,``2,VRage.Network.EndpointId)">
            <summary>
            Raises static multiplayer event.
            Usage: MyMultiplayer.RaiseStaticEvent(s => MyClass.MyStaticFunction, arg2, arg3, arg4);
            </summary>
            <param name="targetEndpoint">Target of the event. When broadcasting, it's exclude endpoint.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyMultiplayer.RaiseStaticEvent``4(System.Func{VRage.Network.IMyEventOwner,System.Action{``0,``1,``2,``3}},``0,``1,``2,``3,VRage.Network.EndpointId)">
            <summary>
            Raises static multiplayer event.
            Usage: MyMultiplayer.RaiseStaticEvent(s => MyClass.MyStaticFunction, arg2, arg3, arg4, arg5);
            </summary>
            <param name="targetEndpoint">Target of the event. When broadcasting, it's exclude endpoint.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyMultiplayer.RaiseStaticEvent``5(System.Func{VRage.Network.IMyEventOwner,System.Action{``0,``1,``2,``3,``4}},``0,``1,``2,``3,``4,VRage.Network.EndpointId)">
            <summary>
            Raises static multiplayer event.
            Usage: MyMultiplayer.RaiseStaticEvent(s => MyClass.MyStaticFunction, arg2, arg3, arg4, arg5, arg6);
            </summary>
            <param name="targetEndpoint">Target of the event. When broadcasting, it's exclude endpoint.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyMultiplayer.RaiseStaticEvent``6(System.Func{VRage.Network.IMyEventOwner,System.Action{``0,``1,``2,``3,``4,``5}},``0,``1,``2,``3,``4,``5,VRage.Network.EndpointId)">
            <summary>
            Raises static multiplayer event.
            Usage: MyMultiplayer.RaiseStaticEvent(s => MyClass.MyStaticFunction, arg2, arg3, arg4, arg5, arg6);
            </summary>
            <param name="targetEndpoint">Target of the event. When broadcasting, it's exclude endpoint.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyMultiplayer.RaiseEvent``1(``0,System.Func{``0,System.Action},VRage.Network.EndpointId)">
            <summary>
            Raises multiplayer event.
            </summary>
            <param name="targetEndpoint">Target of the event. When broadcasting, it's exclude endpoint.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyMultiplayer.RaiseBlockingEvent``2(``0,``1,System.Func{``0,System.Action},VRage.Network.EndpointId)">
            <summary>
            Raises blocking multiplayer event.
            </summary>
            <param name="targetEndpoint">Target of the event. When broadcasting, it's exclude endpoint.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyMultiplayer.RaiseEvent``2(``0,System.Func{``0,System.Action{``1}},``1,VRage.Network.EndpointId)">
            <summary>
            Raises multiplayer event.
            </summary>
            <param name="targetEndpoint">Target of the event. When broadcasting, it's exclude endpoint.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyMultiplayer.RaiseBlockingEvent``3(``0,``2,System.Func{``0,System.Action{``1}},``1,VRage.Network.EndpointId)">
            <summary>
            Raises blocking multiplayer event.
            </summary>
            <param name="targetEndpoint">Target of the event. When broadcasting, it's exclude endpoint.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyMultiplayer.RaiseEvent``3(``0,System.Func{``0,System.Action{``1,``2}},``1,``2,VRage.Network.EndpointId)">
            <summary>
            Raises multiplayer event.
            </summary>
            <param name="targetEndpoint">Target of the event. When broadcasting, it's exclude endpoint.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyMultiplayer.RaiseBlockingEvent``4(``0,``3,System.Func{``0,System.Action{``1,``2}},``1,``2,VRage.Network.EndpointId)">
            <summary>
            Raises blocking multiplayer event.
            </summary>
            <param name="targetEndpoint">Target of the event. When broadcasting, it's exclude endpoint.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyMultiplayer.RaiseEvent``4(``0,System.Func{``0,System.Action{``1,``2,``3}},``1,``2,``3,VRage.Network.EndpointId)">
            <summary>
            Raises multiplayer event.
            </summary>
            <param name="targetEndpoint">Target of the event. When broadcasting, it's exclude endpoint.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyMultiplayer.RaiseBlockingEvent``5(``0,``4,System.Func{``0,System.Action{``1,``2,``3}},``1,``2,``3,VRage.Network.EndpointId)">
            <summary>
            Raises blocking multiplayer event.
            </summary>
            <param name="targetEndpoint">Target of the event. When broadcasting, it's exclude endpoint.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyMultiplayer.RaiseEvent``5(``0,System.Func{``0,System.Action{``1,``2,``3,``4}},``1,``2,``3,``4,VRage.Network.EndpointId)">
            <summary>
            Raises multiplayer event.
            </summary>
            <param name="targetEndpoint">Target of the event. When broadcasting, it's exclude endpoint.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyMultiplayer.RaiseBlockingEvent``6(``0,``5,System.Func{``0,System.Action{``1,``2,``3,``4}},``1,``2,``3,``4,VRage.Network.EndpointId)">
            <summary>
            Raises blocking multiplayer event.
            </summary>
            <param name="targetEndpoint">Target of the event. When broadcasting, it's exclude endpoint.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyMultiplayer.RaiseEvent``6(``0,System.Func{``0,System.Action{``1,``2,``3,``4,``5}},``1,``2,``3,``4,``5,VRage.Network.EndpointId)">
            <summary>
            Raises multiplayer event.
            </summary>
            <param name="targetEndpoint">Target of the event. When broadcasting, it's exclude endpoint.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyMultiplayer.RaiseBlockingEvent``7(``0,``6,System.Func{``0,System.Action{``1,``2,``3,``4,``5}},``1,``2,``3,``4,``5,VRage.Network.EndpointId)">
            <summary>
            Raises blocking multiplayer event.
            </summary>
            <param name="targetEndpoint">Target of the event. When broadcasting, it's exclude endpoint.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyMultiplayer.RaiseEvent``7(``0,System.Func{``0,System.Action{``1,``2,``3,``4,``5,``6}},``1,``2,``3,``4,``5,``6,VRage.Network.EndpointId)">
            <summary>
            Raises multiplayer event.
            </summary>
            <param name="targetEndpoint">Target of the event. When broadcasting, it's exclude endpoint.</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyMultiplayer.RaiseEvent``8(``0,``7,System.Func{``0,System.Action{``1,``2,``3,``4,``5,``6}},``1,``2,``3,``4,``5,``6,VRage.Network.EndpointId)">
            <summary>
            Raises blocking multiplayer event.
            </summary>
            <param name="targetEndpoint">Target of the event. When broadcasting, it's exclude endpoint.</param>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.Config">
            <summary>
            Obtaining values from config is slow and can allocate memory!
            Do it only when necessary.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMySession.HasAdminPrivileges">
            <summary>
            Checks if the local player is an admin or is promoted to space master.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.IsUserAdmin(System.UInt64)">
            <summary>
            Checks if a given player is an admin.
            </summary>
            <param name="steamId"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.IsUserPromoted(System.UInt64)">
            <summary>
            Checks if a given player is promoted to space master.
            </summary>
            <param name="steamId"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.SetComponentUpdateOrder(VRage.Game.Components.MySessionComponentBase,VRage.Game.Components.MyUpdateOrder)">
            <summary>
            Change the update order of a session component.
            
            There is a proxy for this method in the session component itself.
            </summary>
            <param name="component">The component to set the update order for</param>
            <param name="order">The update order</param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.IsAdminModeEnabled(System.UInt64)">
            <summary>
            Does the player, by steam ID, have admin mode enabled?
            </summary>
            <param name="playerSteamId">Steam ID of the player.</param>
            <returns>True if enabled, false otherwise.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMySession.IsAdminModeEnabled(System.Int64)">
            <summary>
            Does the player, by identity ID, have admin mode enabled?
            </summary>
            <param name="playerIdentity">Identity ID of the player.</param>
            <returns>True if enabled, false otherwise.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.CreateNotification(System.String,System.Int32,System.Nullable{VRage.Utils.MyStringHash},System.Nullable{VRageMath.Vector4})">
            <summary>
            Create a notification object.
            The object needs to have Show() called on it to be shown.
            On top of that you can dynamically change the text, font and adjust the time to live.
            </summary>
            <param name="message"></param>
            <param name="disappearTimeMs"></param>
            <param name="font"></param>
            <param name="textColor"></param>
            <returns>The notification object.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.ReadFileInWorldStorage(System.String,System.Type)">
            <summary>
            Read text file from the current world's Storage directory.
            </summary>
            <param name="file"></param>
            <param name="callingType"></param>
            <returns></returns>
            <remarks>This directory is under Saves\&lt;SteamId&gt;\&lt;WorldName&gt;\Storage</remarks>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.WriteFileInWorldStorage(System.String,System.Type)">
            <summary>
            Write text file to the current world's Storage directory.
            </summary>
            <param name="file"></param>
            <param name="callingType"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.ReadBinaryFileInWorldStorage(System.String,System.Type)">
            <summary>
            Read file from the current world's Storage directory.
            </summary>
            <param name="file"></param>
            <param name="callingType"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.WriteBinaryFileInWorldStorage(System.String,System.Type)">
            <summary>
            Write file to the current world's Storage directory.
            </summary>
            <param name="file"></param>
            <param name="callingType"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.ReadContentFile(System.String)">
            <summary>
            Open a read only stream for any content file, using mods as appropriate.
            </summary>
            <param name="path">relative path to the game's content directory</param>
            <returns>the stream, or null if it does not exist</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyUtilities.ContentFileExists(System.String)">
            <summary>
            Determines if a content file exists, using mods as appropriate
            </summary>
            <param name="path">relative path to the game's content directory</param>
            <returns>true if the file exists</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyVoxelMaps.CreateVoxelMapFromStorageName(System.String,System.String,VRageMath.Vector3D)">
            <summary>
            Adds a prefab voxel to the game world.
            </summary>
            <param name="storageName">The name of which the voxel storage will be called within the world.</param>
            <param name="prefabVoxelMapName">The prefab voxel to add.</param>
            <param name="position">The Min corner position of the voxel within the world.</param>
            <returns>The newly added voxel map. Returns null if the prefabVoxelMapName does not exist.</returns>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyVoxelMaps.PaintInShape(VRage.ModAPI.IMyVoxelBase,VRage.Game.ModAPI.IMyVoxelShape,System.Byte)">
            <summary>
            Will paint given material with given shape
            </summary>
            <param name="voxelMap"></param>
            <param name="voxelShape"></param>
            <param name="materialIdx"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyVoxelMaps.CutOutShape(VRage.ModAPI.IMyVoxelBase,VRage.Game.ModAPI.IMyVoxelShape)">
            <summary>
            Will cut out given shape
            </summary>
            <param name="voxelMap"></param>
            <param name="voxelShape"></param>
        </member>
        <member name="M:VRage.Game.ModAPI.IMyVoxelMaps.FillInShape(VRage.ModAPI.IMyVoxelBase,VRage.Game.ModAPI.IMyVoxelShape,System.Byte)">
            <summary>
            Will fill given material with given shape
            </summary>
            <param name="voxelMap"></param>
            <param name="voxelShape"></param>
            <param name="materialIdx"></param>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyVoxelShapeCapsule.A">
            <summary>
            In local space.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.IMyVoxelShapeCapsule.B">
            <summary>
            In local space.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Ingame.IMyInventory.IsEmpty">
            <summary>
            Is this inventory empty.
            </summary>
            <returns>True if the inventory is indeed empty.</returns>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyInventory.IsFull">
            <summary>
            Is this inventory full.
            </summary>
        </member>
        <member name="T:VRage.Game.ModAPI.Ingame.IMyInventoryItem">
            <summary>
            A single item stack on a inventory.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyInventoryItem.ItemId">
            <summary>
            Id of this particular item on the inventory.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyInventoryItem.Definition">
            <summary>
            The definition for the item.
            </summary>
        </member>
        <member name="P:VRage.Game.ModAPI.Ingame.IMyInventoryItem.Amount">
            <summary>
            Ammount of items in the stack.
            </summary>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyDecalProxy.AddDecals(VRage.Game.ModAPI.MyHitInfo,VRage.Utils.MyStringHash,System.Object,VRage.Game.ModAPI.Interfaces.IMyDecalHandler)">
            <param name="hitInfo">Hithinfo on world coordinates</param>
        </member>
        <member name="M:VRage.Game.ModAPI.Interfaces.IMyDecalHandler.AddDecal(VRageRender.MyDecalRenderInfo@)">
            <param name="renderData">Position and normal on local coordinates for regular actors.
            World position on voxel maps</param>
        </member>
        <member name="M:VRage.Game.Models.IMyTriangePruningStructure.GetIntersectionWithLine(VRageMath.LineD@,VRage.Components.Physics.IntersectionFlags)">
            <summary>
            Finds interection with local space line.
            </summary>
            <param name="line">Line in local space.</param>
            <param name="flags">Intersection flags.</param>
            <returns>Returns null if no intersection.</returns>
        </member>
        <member name="T:VRage.Game.Models.MyTriangleVertexIndices">
            <summary>
            structure used to set up the mesh
            </summary>
        </member>
        <member name="F:VRage.Game.Models.MyModel.LoadDataEnum.Metadata">
            <summary>
            Metadata includes bounding box, etc
            </summary>
        </member>
        <member name="F:VRage.Game.Models.MyModel.LoadDataEnum.Structure">
            <summary>
            Structure includes dummies, bones, etc
            </summary>
        </member>
        <member name="F:VRage.Game.Models.MyModel.LoadDataEnum.Mesh">
            <summary>
            Mesh includes materials, mesh parts, bone weights, etc
            </summary>
        </member>
        <member name="F:VRage.Game.Models.MyModel.LoadDataEnum.Animation">
            <summary>
            Animation contains animation clips
            </summary>
        </member>
        <member name="F:VRage.Game.Models.MyModel.LoadDataEnum.Physics">
            <summary>
            Fractures and havok collision geometry
            </summary>
        </member>
        <member name="F:VRage.Game.Models.MyModel.LEGACY_LOAD_DATA_FLAGS">
            <summary>
            Required data pieces for the model to be loaded via legacy LoadData
            </summary>
        </member>
        <member name="P:VRage.Game.Models.MyModel.AssetName">
            <summary>
            File path of the model
            </summary>
        </member>
        <member name="M:VRage.Game.Models.MyModel.#ctor(System.String,System.Boolean)">
            <summary>
            c-tor - this constructor should be used just for max models - not voxels!
            </summary>
        </member>
        <member name="M:VRage.Game.Models.MyModel.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="F:VRage.Game.Models.MyModels.m_loadModelEvent">
            <summary>
            Event that occures when some model needs to be loaded.
            </summary>
        </member>
        <member name="P:VRage.Game.MyFinalBuildConstants.GAME_VERSION_INTERNAL">
            <summary>
            To be used for server comms; it doesn't convert the revision to hexadecimal format
            For GUI and user display, use GAME_VERSION_STRING instead
            </summary>
        </member>
        <member name="P:VRage.Game.MyFinalBuildConstants.GAME_VERSION_STRING">
            <summary>
            To be used for GUI
            </summary>
        </member>
        <member name="T:VRage.Game.MyVRageConstants">
            <summary>
            All common constants for use in game engine.
            Note: The name is probably temporary - avoiding colision with Sandbox.Engine.Utils during sandbox removement.
                  I guess it can be renamed to MyConstants once we are finished with sandbox deletion.
            </summary>
        </member>
        <member name="T:VRage.Game.MyDefinitionXmlSerializer">
            <summary>
            Custom XmlSerializer for definitions that allows to override the definition type
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_AudioDefinition.MaxDistance">
            <summary>
            Maximum distance at which this sound is still audible.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_AudioDefinition.UpdateDistance">
            <summary>
            Maximum distance at which this sound is processed by the engine.
            If left blank, MaxDistance is used instead.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_AudioDefinition.Volume">
            <summary>
            Volume of the audio clips.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_AudioDefinition.VolumeVariation">
            <summary>
            Random variation applied to volume.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_AudioDefinition.DisablePitchEffects">
            <summary>
            Can this audio pitch be altered?
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_AudioDefinition.Pitch">
            <summary>
            Default pitch.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_AudioDefinition.PitchVariation">
            <summary>
            Random variation applied to pitch.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_AudioDefinition.SoundLimit">
            <summary>
            How many instances of this sound can be active at once.
            If left blank, infinite sounds can be played.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_AudioDefinition.StreamSound">
            <summary>
            Is this sound streamed from disk?
            Used for large samples.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_AudioDefinition.Loopable">
            <summary>
            Does this audio loop?
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_AudioDefinition.IntervalBetweenPlaybackMS">
            <summary>
            Minimum interval between playback of the sound.
            If less time than this value has elapsed, the sound cannot be played again.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_AudioEffectDefinition.SoundEffect.VolumeCurve">
            <summary>
            Choose between FadeOutLin, FadeInLin, FadeIn, FadeOut.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_AudioEffectDefinition.SoundEffect.Duration">
            <summary>
            Duration of the VolumeCurve effect.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_AudioEffectDefinition.OutputSound">
            <summary>
            Default is last sound for convenience.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_CurveDefinition.Point.Time">
            <summary>
            Time in seconds.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_CurveDefinition.Point.Value">
            <summary>
            Value of sound curve, 0 being muted and 1 being at full sound.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_AIComponent.BotData.IdentityId">
            <summary>
            Identity id.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_AIComponent.BotData.PlayerHandle">
            <summary>
            Obsolete. Serial id of the bot.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_AreaMarkerDefinition.MaxNumber">
            <summary>
            Max number of placeable flag  markers.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_AgentDefinition.MaxAITolerance">
            <summary>
            How many instances of this AI can exceed the server setting at a given location?
            Setting this to -1 will disable maximum count.
            </summary>
        </member>
        <member name="T:VRage.Game.MyObjectBuilder_AnimationDefinition">
            <summary>
            This class is being used as a link between toolbar character emotes and new animation system.
            The subtype name is send to the animation system when the emote is pressed.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_AnimationDefinition.ChatCommand">
            <summary>
            Chat command to hook to.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_AnimationDefinition.AnimationTrigger">
            <summary>
            Animation trigger to play.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_AnimationDefinition.EmoteMessage">
            <summary>
            Message to put into chat.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_DestructionEffectsDefinition.ContactEffect.Material">
            <summary>
            Material used for the destruction effect.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_DestructionEffectsDefinition.ContactEffect.SoundCue">
            <summary>
            What sound to play along with the effect.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_DestructionEffectsDefinition.ContactEffect.ParticleEffect">
            <summary>
            Particle effect to be played.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:VRage.Game.MyObjectBuilder_CompoundBlockTemplateDefinition.CompoundBlockRotationBinding" -->
        <member name="F:VRage.Game.MyObjectBuilder_CompoundBlockTemplateDefinition.CompoundBlockBinding.RotationBinds">
            <summary>
             Rotation binding - allowed rotations to referenced type of this build type.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ContainerDefinition.ComponentEntry.Type">
            <summary>
            Type ID of the component definition.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ContainerDefinition.ComponentEntry.Subtype">
            <summary>
            Subtype ID of the component definition.
            </summary>
        </member>
        <member name="T:VRage.Game.MyCubeSize">
            <summary>
            Cube size, 1 = small, 0 = large.
            </summary>
        </member>
        <member name="T:VRage.Game.MyBlockTopology">
            <summary>
            Block topology, 0 = Cube, 1 = TriangleMesh
            </summary>
        </member>
        <member name="F:VRage.Game.MyAutorotateMode.OneDirection">
            <summary>
            When block has mount points only on one side, it will autorotate so that side is touching the surface.
            Otherwise, full range of rotations is allowed.
            </summary>
        </member>
        <member name="F:VRage.Game.MyAutorotateMode.OppositeDirections">
            <summary>
            When block has mount points only on two sides and those sides are opposite each other (eg. Top and Bottom),
            it will autorotate so that one of these sides is touching the surface. Otherwise, full range of rotations
            is allowed.
            </summary>
        </member>
        <member name="F:VRage.Game.MyAutorotateMode.FirstDirection">
            <summary>
            When block has mountpoint on at least one side, it will autorotate so that this side is touching the surface.
            Otherwise, full range of rotations is allowed.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_CubeBlockDefinition.CbObCubeBlockComponent.ReturnedItem">
            <summary>
            Item (or tag) Id that is returned upon deconstruction.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_CubeBlockDefinition.BlockGroupName">
            <summary>
            Name of the group of blocks.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_CubeBlockDefinition.CubeSize">
            <summary>
            Size of cube, large or small.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_CubeBlockDefinition.MountPoints">
            <summary>
            Where the block connects to each other.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_CubeBlockDefinition.BuildTimeSeconds">
            <summary>
            Seconds it take to buildblock.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_CubeBlockDefinition.DisassembleRatio">
            <summary>
            How fast the disassemble takes in ratio to the build time.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_CubeBlockDefinition.CompoundEnabled">
            <summary>
            If block can be used as compound.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_CubeBlockDefinition.Direction">
            <summary>
             Forward direction - can be horizontal and horizontal+vertical (vertical only not supported)
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_CubeBlockDefinition.Rotation">
            <summary>
             Allowed rotation
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_CubeBlockDefinition.Mirrored">
            <summary>
             Defines if the block is mirrored version of some other block (mirrored block is usually used as block variant)
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_CubeBlockDefinition.Skeleton">
            <summary>
             Defines if the block is deformed by a skeleton by default (round blocks)
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_CubeBlockDefinition.RandomRotation">
            <summary>
             Defines if the block can be randomly rotated when line/plane building is applied to it.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_CubeBlockDefinition.MaxIntegrity">
            <summary>
            Max weight it can support before integrity fails.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_CubeBlockDefinition.Size">
            <summary>
            Coordinated size of block (x y z).
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_CubeBlockDefinition.DamagesVoxels">
            <summary>
            Does placing this block trigger the voxel damage effect?
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_DefinitionBase.m_copyMode">
            <summary>
            Internal copy mode.
            </summary>
            
            Automatic definition merging works on fields alone,
            so this effectivelly makes the copy mode mergeable
            while allowing the use of an attribute for the xml serializer.
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_DefinitionBase.CopyFrom">
            <summary>
            Copy the contents of the provided object builder onto this prior to definition initialization.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_DefinitionBase.Abstract">
            <summary>
            Whether this definition only exists for the purpose of being copied from.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_DefinitionBase.MergeMode">
            <summary>
            Set the merging mode for this definition when overriding.
            </summary>
        </member>
        <member name="P:VRage.Game.MyObjectBuilder_DefinitionBase.CopyMode">
            <summary>
            Set the merging mode for this definition when overriding.
            </summary>
        </member>
        <member name="P:VRage.Game.MyObjectBuilder_DefinitionBase.Package">
            <summary>
            Mod context associated with the latest version of this object builder.
            </summary>
        </member>
        <member name="P:VRage.Game.MyObjectBuilder_DefinitionBase.DefinitionPath">
            <summary>
            Path to the source file that provides the latest version of this ob.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_DestructionDefinition.ConvertedFractureIntegrityRatio">
            <summary>
             Integrity ratio of converted fracture block part (original block and fracture component). Set when fracture block has full itegrity only.
            </summary>
        </member>
        <member name="T:VRage.Game.MyObjectBuilder_EnvironmentDefinition">
            <summary>
            Global (environment) mergeable definitions
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_FactionMember.PlayerId">
            <summary>
            Steam ID of the player.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_FactionMember.IsLeader">
            <summary>
            If the player is a leader of the faction or not.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_FactionMember.IsFounder">
            <summary>
            If the player is the founder of the faction.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_Faction.FactionId">
            <summary>
            The faction ID, auto generated upon creation.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_Faction.Tag">
            <summary>
            Tag size is unlimited when created indirectly, tag size is 4 when player made in-game.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_Faction.Name">
            <summary>
            Name of the faction.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_Faction.Description">
            <summary>
            Description of the faction, 
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_Faction.PrivateInfo">
            <summary>
            Private information for the faction members.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_Faction.Members">
            <summary>
            All members who are 
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_Faction.JoinRequests">
            <summary>
            List of player ID's who requested access to the faction.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_Faction.AutoAcceptMember">
            <summary>
            If this faction automatically accepts new join requests.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_Faction.AutoAcceptPeace">
            <summary>
            If this is set to true, this faction will automatically accept peace treaties.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_Faction.AcceptHumans">
            <summary>
            If this faction accepts only bots (false) or humans (true).
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_Faction.EnableFriendlyFire">
            <summary>
            If you can attack friendly units in this faction.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_PhysicalMaterialDefinition.BreachingStress">
            <summary>
            Breaching stress. Abstract value indicating how much stress block can handle. It will be multiplied by mass, so it is a value per Kg of mass.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_PhysicalMaterialDefinition.AxialStressMultiplier">
            <summary>
            Multiplier that allows to change axial stress to simulate compression/elongation tolerance.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_PhysicalMaterialDefinition.BendingStressMultiplier">
            <summary>
            Multiplier that allows to change bending stress to simulate compression/elongation tolerance.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_PhysicalModelDefinition.Mass">
            <summary>
            Mass in kilograms 
            </summary>
        </member>
        <member name="P:VRage.Game.MyPlanetMaterialDefinition.HasLayers">
            Weather this material has layers.
        </member>
        <member name="T:VRage.Game.MyPlanetMaterialPlacementRule">
             Important!
            
             Due to the geometry in question the slope is stored as the cosine (used in dot product).
            
             Meanwhile the dot product for the latitude yields the cosine of the modulus of the compliment of our angle.
             This means after the maths are done that what we have is the *sine*, so the latitude is stored as the sine.
        </member>
        <member name="M:VRage.Game.MyPlanetMaterialPlacementRule.Check(System.Single,System.Single,System.Single)">
             Check that a rule matches terrain properties.
            
             @param height Height ration to the height map.
             @param latitude Latitude cosine
             @param slope Surface dominant angle sine.
        </member>
        <member name="M:VRage.Game.MyPlanetSurfaceRule.Check(System.Single,System.Single,System.Single,System.Single)">
             Check that a rule matches terrain properties.
            
             @param height Height ration to the height map.
             @param latitude Latitude cosine
             @param slope Surface dominant angle cosine.
        </member>
        <member name="T:VRage.Game.MyPlanetMaterialGroup">
            Rule group defines a material mappable set of surface rules.
        </member>
        <member name="T:VRage.Game.MyPlanetMapType">
            <summary>
            Planet map types.
            </summary>
        </member>
        <member name="T:VRage.Game.MyPlanetMapTypeSet">
            <summary>
            Represents a set of maps.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ProjectileAmmoDefinition.DesiredSpeed">
            <summary>
            In meters / seconds.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ProjectileAmmoDefinition.SpeedVariance">
            <summary>
            Speed *= MyMwcUtils.GetRandomFloat(1.0f - SpeedVar, 1.0f + SpeedVar)
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ProjectileAmmoDefinition.MaxTrajectory">
            <summary>
            How far can projectile fly before we kill it (it's like distance timeout).
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ProjectileAmmoDefinition.ProjectileHitImpulse">
            <summary>
            Force inflicted on hit target.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ProjectileAmmoDefinition.ProjectileTrailScale">
            <summary>
            Scale of the trail behind the projectile.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ProjectileAmmoDefinition.ProjectileTrailWidth">
            <summary>
            Thickness of the projectile
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ProjectileAmmoDefinition.ProjectileTrailColor">
            <summary>
            Trail color.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ProjectileAmmoDefinition.ProjectileTrailMaterial">
            <summary>
            Material (texture) used for trail.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ProjectileAmmoDefinition.ProjectileTrailProbability">
            <summary>
            Probability of the trial being visible.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ProjectileAmmoDefinition.ProjectileMassDamage">
            <summary>
            Damage dealt to hit entity.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ProjectileAmmoDefinition.TracersTextureMaterial">
            <summary>
            Material (texture) used for tracers.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ProjectileAmmoDefinition.TracersLength">
            <summary>
            Length of the tracer in meters.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ProjectileAmmoDefinition.TracersCount">
            <summary>
            Tracers count.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ProjectileAmmoDefinition.TracersWidth">
            <summary>
            Tracers width/thickness.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ProjectileAmmoDefinition.HeadShot">
            <summary>
            Indicates if headshot damage will be applied.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ProjectileAmmoDefinition.ProjectileHeadShotDamage">
            <summary>
            Headshot damage applied if HeadShot = true.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ProjectileAmmoDefinition.VelocityDamageMultiplier">
            <summary>
            Damage multiplier for Velocity, applied multiplied to damage.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ProjectileAmmoDefinition.AppliedEffects">
            <summary>
            Effects applied when target is hit.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ScenarioDefinition.Default">
            <summary>
            Whether this is the default scenario the game uses, both for quickstart and for cases where the world has no scenarios.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ScenarioDefinition.ComponentData">
            <summary>
            Leftover from Space Engineers. Unused in Medieval Engineers.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ScenarioDefinition.SupportsModdedPlanets">
            <summary>
            If current scenario supports custom planets. Default is true.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_TriggerPositionReached.Pos">
            <summary>
            Position of the trigger area.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_TriggerTimeLimit.Limit">
            <summary>
            Time in seconds.
            </summary>
        </member>
        <member name="T:VRage.Game.MyObjectBuilder_VisualSettingsDefinition">
            <summary>
            Stripped environment definition with only visual settings
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_VoxelMaterialDefinition.FoliageTable.Density">
            <summary>
            Density.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_VoxelMaterialDefinition.FoliageTable.Type">
            <summary>
            Type of the foliage.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_VoxelMaterialDefinition.FoliageTable.Size">
            <summary>
            Default scale for all foliage variations.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_VoxelMaterialDefinition.FoliageTable.SizeVariation">
            <summary>
            Scale variation for all variants that do not specify it.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_VoxelMaterialDefinition.FoliageTable.Variations">
            <summary>
            List of foliage texture variations.
            </summary>
        </member>
        <member name="T:VRage.Game.MyObjectBuilder_VoxelMaterialDefinition.FoliageTable.Entry">
            <summary>
            Fooliage entry.
            </summary>
        </member>
        <member name="P:VRage.Game.MyObjectBuilder_VoxelMaterialDefinition.FoliageTable.Entry.Color">
            <summary>
            Shorthand for the color texture.
            </summary>
        </member>
        <member name="P:VRage.Game.MyObjectBuilder_VoxelMaterialDefinition.FoliageTable.Entry.Normal">
            <summary>
            Shorthand for the normal texture.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_VoxelMaterialDefinition.FoliageTable.Entry.Size">
            <summary>
            Scale for this idividual texture.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_VoxelMaterialDefinition.FoliageTable.Entry.SizeVariation">
            <summary>
            Optional scale variation.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_VoxelMaterialDefinition.FoliageTable.Entry.ColorTexture">
            <summary>
            Color texture.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_VoxelMaterialDefinition.FoliageTable.Entry.NormalTexture">
            <summary>
            Normal texture.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_VoxelMaterialDefinition.FoliageTable.Entry.Frequency">
            <summary>
            Frequency of this texture.
            </summary>
        </member>
        <member name="P:VRage.Game.MyObjectBuilder_VoxelMaterialDefinition.FoliageTable.Entry.FrequencyAttribute">
            <summary>
            Attribute usewd to specify the frequency.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_GuiControlListbox.VisualStyle">
            <summary>
            Style of the Listbox.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_GuiControlListbox.VisibleRows">
            <summary>
            How many rows are visible/rendered.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_GuiControlRadioButton.CustomVisualStyle">
            <summary>
            Custom visual style. This is check if visual style is set to Custom.
            </summary>
        </member>
        <member name="T:VRage.Game.MyCharacterMovement">
            <summary>
            Character movement state and modifier, packed into one struct.
            </summary>
        </member>
        <member name="M:VRage.Game.MyCharacterMovement.#ctor(VRage.Game.MyCharacterMovementState,VRage.Game.MyCharacterMovementModifier)">
            <summary>
            Full constructor.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_Checkpoint.ElapsedGameTime">
            <summary>
            This is long because TimeSpan is not serialized
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_Checkpoint.CameraEntity">
            <summary>
            The entity having a active camera.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_Checkpoint.CameraSubtype">
            <summary>
            The subtype of camera (1st person/3rd person).
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_Checkpoint.EntityControllers">
            <summary>
            List of controlled entities and their controlling players.
            </summary>
        </member>
        <member name="T:VRage.Game.MyObjectBuilder_Checkpoint.SerializableDictCompat`2">
            <summary>
            Placeholder class that imitates serializable dictionary, used during transition period.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_Client.SteamId">
            <summary>
            Clients ClientID.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_Client.Name">
            <summary>
            Clients Steam nickname.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_Client.IsAdmin">
            <summary>
            If the user is server admin.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_CubeBlock.EntityId">
            <summary>
            Entity ID default is zero.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_CubeBlock.m_orientation">
            <summary>
            Backward compatibility orientation.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_CubeBlock.ColorMaskHSV">
            <summary>
            Color of the mask, in HSV color format.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_FactionCollection.Factions">
            <summary>
            All the factions
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_FactionCollection.Players">
            <summary>
            All players present in this group
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_FactionCollection.Relations">
            <summary>
            Current relation with other factions
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_FactionCollection.Requests">
            <summary>
            Current requests in the queue.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ModInfo.SteamIDOwner">
            <summary>
            Steam ID of the mod creator.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ModInfo.WorkshopId">
            <summary>
            Id of the Workshop entry.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_Rope.EntityIdHookA">
            <summary>
            First entity to which the rope is connected to.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_Rope.EntityIdHookB">
            <summary>
            To what the rope is connected to.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_Sector.SessionComponentsEnabled">
            <summary>
            Session component overrides, these are which components are enabled over the default from definition
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_Sector.SessionComponentsDisabled">
            <summary>
            Session component overrides, these are which components are disabled over the default from definition
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_Sector.Environment">
            <summary>
             If not null, this overrides the environment definition settings.
            </summary>
        </member>
        <member name="P:VRage.Game.MyObjectBuilder_SessionSettings.PlayersNeedResearch">
            <summary>
            Do players require research for crafting, building, etc .. ?
            </summary>
        </member>
        <member name="P:VRage.Game.MyObjectBuilder_SessionSettings.LockStats">
            <summary>
            Are player stats locked? (Creative-Style immortality, etc.)
            </summary>
        </member>
        <member name="P:VRage.Game.MyObjectBuilder_SessionSettings.PlayersTakeDamage">
            <summary>
            Do player characters take damage?
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_TutorialsHelper.Tutorials">
            <summary>
            Tutorial description.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_World.SerializedSector">
            <summary>
            Serialized sector data.
            
            We deserialize the sector on the client only after loading the
            checkpoint and mods, because the sector may contain custom types.
            
            The contents of this array are just the UTF-8 encoded xml for the sector.
            </summary>
        </member>
        <member name="M:VRage.Game.MyObjectBuilder_World.DeserializeSector">
            <summary>
            Convert the serialized sector data to it's object builder.
            </summary>
        </member>
        <member name="M:VRage.Game.MyObjectBuilder_World.SerializeSector">
            <summary>
            Convert the sector object builder into serialized data.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_Toolbar.Initialized">
            <summary>
            Indicates whether the toolbar was initialized at all.
            Empty toolbar might be player's intention and this property flag helps recognizing it.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_ToolbarItemDefinition.DefinitionId">
            <summary>
            The definition ID of the referenced object.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_Planet.Radius">
            <summary>
            Size / Radius of the planet.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_Planet.HasAtmosphere">
            <summary>
            If you can breath on the planet.
            </summary>
        </member>
        <member name="F:VRage.Game.MyObjectBuilder_Planet.AtmosphereRadius">
            <summary>
            Radius of the atmosphere.
            </summary>
        </member>
        <member name="T:VRage.Game.GameRelationAttribute">
            <summary>
            This class is here only to distinguish fields in SessionSettings
            Will be removed after correct hierarchy and usage of session settings is made
            </summary>
        </member>
        <member name="P:VRage.Game.Voxels.IMyStorage.StorageId">
            <summary>
            Unique identifier for this storage.
            
            This identifier is unique for any storage available locally.
            No assumptions can be made by equal storages on different clients
            or the same storage across multiple reloads of  the game.
            </summary>
        </member>
        <member name="M:VRage.Game.Voxels.IMyStorage.Close">
            <summary>
            Close this storage, unloading it's resources.
            </summary>
        </member>
        <member name="P:VRage.Game.Voxels.IMyStorage.Shared">
            <summary>
            Weather this storage is shared by multiple voxel entities.
            
            Shared storages may not be closed directly.
            </summary>
        </member>
        <member name="M:VRage.Game.Voxels.IMyStorage.Copy">
            <summary>
            Create a copy of this storage.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.Voxels.IMyStorage.Pin">
            <summary>
            Pin the storage.
            
            While the storage is pinned it will not be closed, but calls to pin will mark it to close as soon as all pins are disposed.
            
            The pin might not be valid if the storage was already closed. You should always check once you pin the storage that the pin is valid.
            </summary>
            <returns>A storage pin. Must be disposed when no longer in use.</returns>
        </member>
        <member name="M:VRage.Game.Voxels.IMyStorage.Unpin">
            <summary>
            Unpins the storage, must not be called directly, used by storage pins.
            </summary>
        </member>
        <member name="P:VRage.Game.Voxels.IMyStorage.Closed">
            <summary>
            Whether the storage is closed.
            </summary>
        </member>
        <member name="M:VRage.Game.Voxels.IMyStorage.ReadRange(VRage.Voxels.MyStorageData,VRage.Voxels.MyStorageDataTypeFlags,System.Int32,VRageMath.Vector3I@,VRageMath.Vector3I@,VRage.Game.Voxels.MyVoxelRequestFlags@)">
            <summary>
            Read a section of storage.
            
            This call accepts a set of request flags that modify how the request is performed and is also used to encode extra information about the operation when completed.
            </summary>
            <param name="target">Where to store the read data.</param>
            <param name="dataToRead">Types of storage data to red.</param>
            <param name="lodIndex">Lod level the read is to happen at.</param>
            <param name="lodVoxelRangeMin">Min interval position.</param>
            <param name="lodVoxelRangeMax">Inclusive max coordinate of the read range.</param>
            <param name="requestFlags">Set of flags modifying the request.</param>
        </member>
        <member name="M:VRage.Game.Voxels.IMyStorage.IsRangeModified(VRageMath.BoundingBoxI@)">
            <summary>
            Whether a range of storage has been modified with respect to the storage provider.
            
            If the storage has no provider this method will always return true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Game.Voxels.IMyStorage.Intersect(VRageMath.BoundingBoxI@,System.Int32,System.Boolean)">
            <summary>
            Check for intersection against storage space bounding box.
            
            When <b>lazy</b> is set to true this method can return <b>intersects</b> when the box is actually <b>contained</b>.
            </summary>
            <param name="box">Query box</param>
            <param name="lod"></param>
            <param name="exhaustiveContainmentCheck"></param>
            <returns>Weather the bounding box is disjoint, intersection or contained in the storage volume.</returns>
        </member>
        <member name="M:VRage.Game.Voxels.IMyStorage.Intersect(VRageMath.LineD@)">
            <summary>
            Weather a given storage space line intersects the contents of the storage.
            
            If so this method returns an approximation for the shortest interval of the line that contains all intersections.
            </summary>
            <param name="line">The queried line.</param>
            <returns>Weather there is an intersection.</returns>
        </member>
        <member name="E:VRage.Game.Voxels.IMyStorage.RangeChanged">
            <summary>
            Please use RangeChanged on voxel base if possible
            </summary>
        </member>
        <member name="M:VRage.Game.Voxels.IMyStorage.DebugDraw(VRageMath.MatrixD@,VRage.Game.Voxels.MyVoxelDebugDrawMode)">
            <summary>
            Debug draw the storage at the give position orientation and scale.
            </summary>
            <param name="worldMatrix">World transform for the debug draw.</param>
            <param name="mode">Debug draw mode.</param>
        </member>
        <member name="P:VRage.Game.Voxels.IMyStorage.DataProvider">
            <summary>
            The procedural provider of data for this storage, can be null.
            </summary>
        </member>
        <member name="T:VRage.Game.Voxels.MyVoxelRequestFlags">
             <summary>
             Flags used when requesting voxel materials and content.
            
             These flags allow for optimizations such as avoiding
             expensive material computations or quickly assigning the
             whole storage the same material or content.
             </summary>
        </member>
        <member name="M:VRage.Game.Voxels.IMyStorageDataProvider.ReadRange(VRage.Game.Voxels.MyVoxelDataRequest@)">
            Read range of data.
            
            The data for the request, providing any optimizations that are requested in there.
        </member>
        <member name="M:VRage.Game.Voxels.IMyStorageDataProvider.SupportedFlags">
            What optimizations this storage supports, the caller will never request for an optimization the storage does not support.
        </member>
        <member name="M:VRage.Game.Voxels.IMyStorageDataProvider.Intersect(VRageMath.LineD@,System.Double@,System.Double@)">
            Intersect line with storage.
            
            Returnas the tightest line interval that does intersect the storage.
            The precision of this method varies from storage to storage.
            
            The offsets are normalised.
        </member>
        <member name="M:VRage.Game.Voxels.IMyStorageDataProvider.PostProcess(VRage.Voxels.VrVoxelMesh,VRage.Voxels.MyStorageDataTypeFlags)">
            <summary>
            Post-process the mesh generated from the data in this storage.
            </summary>
            <param name="mesh"></param>
            <param name="dataTypes">The types of data requested for the mesh.</param>
        </member>
        <member name="F:VRage.Game.Voxels.MyPrecalcJob.IsValid">
            <summary>
            Invalid tasks finishes normally and restarts afterwards. Even if results
            are not valid, they may still be useful.
            </summary>
        </member>
        <member name="T:VRage.Core.MyObjectAttribute">
            <summary>
            Attribute that marks the base class of an object type.
            </summary>
        </member>
        <member name="T:VRage.Core.MyObjectSerializer`1">
            <summary>
            Serializer that can be used for any type that inherits from IMyObject.
            </summary>
            <typeparam name="TObject"></typeparam>]
        </member>
        <member name="T:VRage.Core.IMyObject">
            <summary>
            Base class for a serializable object in the engine/scene.
            </summary>
        </member>
        <member name="P:VRage.Core.IMyObject.Id">
            <summary>
            Unique id of this object in the game scene.
            </summary>
        </member>
        <member name="P:VRage.Core.IMyObject.DefinitionId">
            <summary>
            Definition for this object.
            </summary>
        </member>
        <member name="P:VRage.Core.IMyObject.NeedsSerialize">
            <summary>
            Whether this object should be persisted with the scene.
            </summary>
        </member>
        <member name="M:VRage.Core.IMyObject.Deserialize(VRage.ObjectBuilders.MyObjectBuilder_Base)">
            <summary>
            Deserialize this object from it's serialized state.
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:VRage.Core.IMyObject.Serialize">
            <summary>
            Serialize this object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:VRage.Core.IMyObject`1">
            <summary>
            Generic version of IMyObject with type safe key.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:VRage.Core.IMyObject`1.Id">
            <summary>
            Unique id of this object in the game scene.
            </summary>
        </member>
        <member name="T:VRage.Definitions.Block.MyBlockVariantsDefinition">
            <summary>
            Definition of the block group.
            </summary>
        </member>
        <member name="T:VRage.Definitions.Block.MyBlockGroupDefinition">
            <summary>
            Definition of the block group.
            </summary>
        </member>
        <member name="P:VRage.Definitions.Block.MyBlockGroupDefinition.Blocks">
            <summary>
            List of blocks in this block group.
            </summary>
        </member>
        <member name="T:VRage.Definitions.Block.MyBlockDefinition">
            <summary>
            Definition of the cube block.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Block.MyBlockDefinition.BoundingBox">
            <summary>
            Bounding box of the block, measured in cubes. Minimum coordinate is inclusive, maximum exclusive.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Block.MyBlockDefinition.Positions">
            <summary>
            Taken positions of this block.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Block.MyBlockDefinition.GridDataDefinitionId">
            <summary>
            Definition that points at which grid this block can be used in
            </summary>
        </member>
        <member name="F:VRage.Definitions.Block.MyBlockDefinition.PreviewModel">
            <summary>
            Preview model used for grid placing. It is a different model from the final model of the block.
            </summary>
        </member>
        <member name="P:VRage.Definitions.Block.MyBlockDefinition.DamagesVoxels">
            <summary>
            Does placing this block trigger the voxel damage effect?
            </summary>
        </member>
        <member name="F:VRage.Definitions.Block.MyBlockDefinition.CheckNeighbouringEdges">
            <summary>
            Check edges of the block also for tests.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Block.MyBlockDefinition.m_fallbackShape">
            <summary>
            Fallback box shape in case model is missing any collision shapes.
            </summary>
        </member>
        <member name="P:VRage.Definitions.Block.MyBlockDefinition.Size">
            <summary>
            Bounding box size in cubes.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Components.Character.MyCharacterMovementComponentDefinition.SlopeDetectedTimeout">
            <summary>
            Path is blocked by slope - animation timeout.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Components.Character.MyRenderComponentCharacterDefinition.MaterialsDisabledIn1st">
            <summary>
            Materials that are disabled from rendering when the player is in first person view.
            </summary>
        </member>
        <member name="P:VRage.Definitions.Components.Character.MyRenderComponentCharacterDefinition.DamageEffects">
            <summary>
            Damage effects to use.
            </summary>
        </member>
        <member name="P:VRage.Definitions.Components.Character.MyRenderComponentCharacterDefinition.DeathOverlay">
            <summary>
            Overlay displayed when character is dead.
            </summary>
        </member>
        <member name="P:VRage.Definitions.Components.Character.MyRenderComponentCharacterDefinition.DecalBones">
            <summary>
            List of bones permitted for decals.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Components.Entity.CubeGrid.MyGridDataComponentDefinition.Size">
            <summary>
            Grid size in meters.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Components.Entity.CubeGrid.MyGridDataComponentDefinition.Diagonal">
            <summary>
            Diagonal of grid size.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Components.Entity.MyDeathComponentDefinition.RespawnTime">
            <summary>
            Time before respawning the entity.
            </summary>
        </member>
        <member name="P:VRage.Definitions.Components.Entity.MyDeathComponentDefinition.RespawnCost">
            <summary>
            Cost for respawning
            </summary>
        </member>
        <member name="P:VRage.Definitions.Components.Entity.MyDeathComponentDefinition.RespawnCostStats">
            <summary>
            Stats to consume from for paying the respawn cost.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Components.Entity.MyDeathComponentDefinition.BoxShapeScale">
            <summary>
            scaling factor of the dead body physics shape (aabb)
            </summary>
        </member>
        <member name="F:VRage.Definitions.Components.Entity.MyDeathComponentDefinition.RelativeCenterOfMass">
            <summary>
            center of mass relative to size of box [1 == half extent]
            </summary>
        </member>
        <member name="F:VRage.Definitions.Components.Entity.MyDeathComponentDefinition.RelativeShapeTranslation">
            <summary>
            translation of dead body physics shape, relative to size of box [1 == half extent]
            </summary>
        </member>
        <member name="F:VRage.Definitions.Components.Entity.MyDeathComponentDefinition.Friction">
            <summary>
            friction factor
            </summary>
        </member>
        <member name="F:VRage.Definitions.Components.Entity.MyDeathComponentDefinition.CorpseId">
            <summary>
            Definition id of the corpse entity.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Components.Entity.MyDeathComponentDefinition.LootId">
            <summary>
            Definition id of the loot to include in the corpse.
            </summary>
        </member>
        <member name="P:VRage.Definitions.Components.Entity.MyDeathComponentDefinition.DeathEvent">
            <summary>
            Event triggered when the character dies.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Components.Entity.MySkeletonComponentDefinition.BoneFirstPersonCamera">
            <summary>
            Attachment for first person camera.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Components.Entity.MyFlightComponentDefinition.MaximumSpeed">
            <summary>
            Maximum flight speed. [0..inf, m / s]
            </summary>
        </member>
        <member name="F:VRage.Definitions.Components.Entity.MyFlightComponentDefinition.Acceleration">
            <summary>
            Acceleration of velocity per second. [0..inf, (m / s) / s]
            </summary>
        </member>
        <member name="F:VRage.Definitions.Components.Entity.MyFlightComponentDefinition.SlowdownFactor">
            <summary>
            Slowdown factor, exponential slowdown [0..1, 0 = instant slowdown, 1 = no slowdown]
            </summary>
        </member>
        <member name="F:VRage.Definitions.Components.Entity.MyFlightComponentDefinition.RotationSpeedFactor">
            <summary>
            Rotation speed factor used to change rotation speed.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Components.Entity.MyModelComponentDefinition.DisplayNameEnum">
            <summary>
            Enum used for localization of display name. Null for player created definitions.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Components.Entity.MyModelComponentDefinition.DescriptionEnum">
            <summary>
            Enum used for localization of description. Null for player created definitions.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Components.Entity.MyModelComponentDefinition.DisplayNameString">
            <summary>
            String name used for user created definitions which do not have localization support.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Components.Entity.MyModelComponentDefinition.DescriptionString">
            <summary>
            String used for user created description which do not have localization support.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Components.Entity.MyModelComponentDefinition.Icons">
            <summary>
            Icons for the definition, they are used from top to bottom.
            </summary>
        </member>
        <member name="P:VRage.Definitions.Components.Entity.MyModelComponentDefinition.DisplayNameText">
            <summary>
            Use this property when showing name in GUI instead of DisplayName. This takes into
            account more complex name construction.
            </summary>
        </member>
        <member name="P:VRage.Definitions.Components.Entity.MyModelComponentDefinition.DescriptionText">
            <summary>
            Use this property when showing description in GUI, as it takes into account more
            complex description construction.
            </summary>
        </member>
        <member name="T:VRage.Definitions.Components.Entity.MyEntityStateComponentDefinition">
            <summary>
            Definition of entity states.
            </summary>
        </member>
        <member name="P:VRage.Definitions.Components.Entity.MyEntityStateComponentDefinition.StateTransitions">
            <summary>
            Mapping of states to potential other states.
            </summary>
        </member>
        <member name="P:VRage.Definitions.Components.Entity.MyEntityStateComponentDefinition.InitialState">
            <summary>
            Initial state.
            </summary>
        </member>
        <member name="P:VRage.Definitions.Components.MyAttachmentAnimationComponentDefinition.Sequence.Duration">
            <summary>
            The duration, in seconds, of the entire sequence.
            </summary>
        </member>
        <member name="M:VRage.Definitions.Components.MyAttachmentAnimationComponentDefinition.TryGetAnimationForAttachmentPoint(VRage.Utils.MyStringHash,VRage.Utils.MyStringHash,VRage.Definitions.Components.MyAttachmentAnimationComponentDefinition.Sequence.Animation@,System.Single@)">
            <summary>
            Get the animation for an attachment point.
            </summary>
            <param name="attachmentPoint">Attachment point to look for.</param>
            <param name="animation">Animation to look for.</param>
            <param name="animation">Animation output, set to null if method fails.</param>
            <param name="duration">Animation duration, set to null if method fails.</param>
            <returns>True if found, false otherwise.</returns>
        </member>
        <member name="P:VRage.Definitions.Components.MyModelAttachmentComponentDefinition.AttachmentPoint.Name">
            <summary>
            Attachment point name.
            </summary>
        </member>
        <member name="P:VRage.Definitions.Components.MyModelAttachmentComponentDefinition.AttachmentPoint.Bone">
            <summary>
            Bone to position the attachment at.
            </summary>
        </member>
        <member name="P:VRage.Definitions.Components.MyModelAttachmentComponentDefinition.AttachmentPoint.Offset">
            <summary>
            Offset from the bone, or center of the entity.
            </summary>
        </member>
        <member name="P:VRage.Definitions.Components.MyModelAttachmentComponentDefinition.AttachmentPoint.DefaultEntity">
            <summary>
            Default entity to create at this attachment point.
            </summary>
        </member>
        <member name="P:VRage.Definitions.Components.MyModelAttachmentComponentDefinition.AttachmentPoints">
            <summary>
            Collection of attachment points by name.
            </summary>
        </member>
        <member name="P:VRage.Definitions.Components.MyModelAttachmentComponentDefinition.DisableDynamicPhysics">
            <summary>
            Disable physics on the default entities if the parent physics become dynamic?
            </summary>
        </member>
        <member name="F:VRage.Definitions.Components.Camera.MyThirdPersonControllerComponentDefinition.SmoothingZoomCoeff">
            <summary>
            Exponential filtering coeff of user input: zoom. [0..1, 0=no effect, 1=instant effect].
            </summary>
        </member>
        <member name="F:VRage.Definitions.Components.Camera.MyThirdPersonControllerComponentDefinition.SmoothingYawCoeff">
            <summary>
            Exponential filtering coeff of user input: yaw. [0..1, 0=no effect, 1=instant effect].
            </summary>
        </member>
        <member name="F:VRage.Definitions.Components.Camera.MyThirdPersonControllerComponentDefinition.SmoothingPitchCoeff">
            <summary>
            Exponential filtering coeff of user input: pitch. [0..1, 0=no effect, 1=instant effect].
            </summary>
        </member>
        <member name="F:VRage.Definitions.Components.Camera.MyThirdPersonControllerComponentDefinition.SmoothingAccYawCoeff">
            <summary>
            Exponential filtering coeff of character rotation input: accumulated yaw. [0..1, 0=no effect, 1=accumulated yaw does not diminish].
            </summary>
        </member>
        <member name="F:VRage.Definitions.Components.Camera.MyThirdPersonControllerComponentDefinition.OffsetAccYawCoeff">
            <summary>
            Coeff describing the influence of accumulated yaw on horizontal frame offset. [0..1].
            </summary>
        </member>
        <member name="F:VRage.Definitions.Components.Camera.MyThirdPersonControllerComponentDefinition.CameraRadius">
            <summary>
            The camera size represented by sphere radius.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Components.Camera.MyThirdPersonControllerComponentDefinition.TargetOffsetMinDist">
            <summary>
            Target offset on minimum camera distance.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Components.Camera.MyThirdPersonControllerComponentDefinition.TargetOffsetMaxDist">
            <summary>
            Target offset on maximum camera distance.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Components.Camera.MyThirdPersonControllerComponentDefinition.UnsafeCapsule">
            <summary>
            Capsule area that will force the camera to minimum distance.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Components.Camera.MyThirdPersonControllerComponentDefinition.MinScrollOffset">
            <summary>
            Offset added to minimum distance. Min distance + scroll offset = minimum controllable distance of camera.
            </summary>
        </member>
        <member name="T:VRage.Definitions.Effects.MyParticleEffectDefinition.Animated2DProperty`1">
            <summary>
            Two-dimensional timeline.
            Outer: Particle Lifetime
            Inner: Effect Lifetime
            </summary>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="M:VRage.Definitions.Effects.MyParticleEffectDefinition.Animated2DProperty`1.FromSerializableVector3(VRage.ObjectBuilders.MyObjectBuilder_ParticleEffectDefinition.Animated2DPropertyDef{VRage.SerializableVector3})">
            <summary>
            Converts definition with SerializableVector3 to definition with Vector3.
            </summary>
            <param name="definition"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Definitions.Effects.MyParticleEffectDefinition.Animated2DProperty`1.ToSerializableVector3(VRage.Definitions.Effects.MyParticleEffectDefinition.Animated2DProperty{VRageMath.Vector3})">
            <summary>
            Converts definition with Vector3 to definition with SerializableVector3.
            </summary>
            <param name="definition"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Definitions.Effects.MyParticleEffectDefinition.Animated2DProperty`1.FromColor(VRage.ObjectBuilders.MyObjectBuilder_ParticleEffectDefinition.Animated2DPropertyDef{VRageMath.Color})">
            <summary>
            Converts definition with Color to definition with Vector4.
            </summary>
            <param name="definition"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Definitions.Effects.MyParticleEffectDefinition.Animated2DProperty`1.ToColor(VRage.Definitions.Effects.MyParticleEffectDefinition.Animated2DProperty{VRageMath.Vector4})">
            <summary>
            Converts definition with Vector4 to definition with Color.
            </summary>
            <param name="definition"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Definitions.Effects.MyParticleEffectDefinition.Animated2DProperty`1.FromString(VRage.ObjectBuilders.MyObjectBuilder_ParticleEffectDefinition.Animated2DPropertyDef{System.String})">
            <summary>
            Converts definition with string to definition with MyTransparentMaterial.
            </summary>
            <param name="definition"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Definitions.Effects.MyParticleEffectDefinition.Animated2DProperty`1.ToString(VRage.Definitions.Effects.MyParticleEffectDefinition.Animated2DProperty{VRageRender.MyTransparentMaterial})">
            <summary>
            Converts definition with MyTransparentMaterial to definition with string.
            </summary>
            <param name="definition"></param>
            <returns></returns>
        </member>
        <member name="T:VRage.Definitions.Effects.MyParticleEffectDefinition.AnimatedProperty`1">
            <summary>
            One-dimensional timeline - Particle Lifetime.
            </summary>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="M:VRage.Definitions.Effects.MyParticleEffectDefinition.AnimatedProperty`1.FromSerializableVector3(VRage.ObjectBuilders.MyObjectBuilder_ParticleEffectDefinition.AnimatedPropertyDef{VRage.SerializableVector3})">
            <summary>
            Converts definition with SerializableVector3 to definition with Vector3.
            </summary>
            <param name="definition"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Definitions.Effects.MyParticleEffectDefinition.AnimatedProperty`1.ToSerializableVector3(VRage.Definitions.Effects.MyParticleEffectDefinition.AnimatedProperty{VRageMath.Vector3})">
            <summary>
            Converts definition with Vector3 to definition with SerializableVector3.
            </summary>
            <param name="definition"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Definitions.Effects.MyParticleEffectDefinition.AnimatedProperty`1.FromColor(VRage.ObjectBuilders.MyObjectBuilder_ParticleEffectDefinition.AnimatedPropertyDef{VRageMath.Color})">
            <summary>
            Converts definition with Color to definition with Vector4.
            </summary>
            <param name="definition"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Definitions.Effects.MyParticleEffectDefinition.AnimatedProperty`1.ToColor(VRage.Definitions.Effects.MyParticleEffectDefinition.AnimatedProperty{VRageMath.Vector4})">
            <summary>
            Converts definition with Vector4 to definition with Color.
            </summary>
            <param name="definition"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Definitions.Effects.MyParticleEffectDefinition.AnimatedProperty`1.FromString(VRage.ObjectBuilders.MyObjectBuilder_ParticleEffectDefinition.AnimatedPropertyDef{System.String})">
            <summary>
            Converts definition with string to definition with MyTransparentMaterial.
            </summary>
            <param name="definition"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Definitions.Effects.MyParticleEffectDefinition.AnimatedProperty`1.ToString(VRage.Definitions.Effects.MyParticleEffectDefinition.AnimatedProperty{VRageRender.MyTransparentMaterial})">
            <summary>
            Converts definition with MyTransparentMaterial to definition with string.
            </summary>
            <param name="definition"></param>
            <returns></returns>
        </member>
        <member name="P:VRage.Definitions.Inventory.MyLootTableDefinition.Row.ItemDefinition">
            <summary>
            What items the loot crate/box contains.
            </summary>
        </member>
        <member name="P:VRage.Definitions.Inventory.MyLootTableDefinition.Row.Weight">
            <summary>
            Weight in kilograms of the loot cate/box.
            </summary>
        </member>
        <member name="P:VRage.Definitions.Inventory.MyLootTableDefinition.Row.IsUnique">
            <summary>
            If the loot should drop more then once.
            </summary>
        </member>
        <member name="P:VRage.Definitions.Inventory.MyLootTableDefinition.Row.AlwaysDrops">
            <summary>
            If it always drops in every session.
            </summary>
        </member>
        <member name="P:VRage.Definitions.Inventory.MyLootTableDefinition.Row.Amount">
            <summary>
            Amount of times this loot may be placed in the world.
            </summary>
        </member>
        <member name="T:VRage.Definitions.Inventory.MyInventoryItemDefinition">
            <summary>
            Base definition for a physical item.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Inventory.MyInventoryItemDefinition.Tags">
            <summary>
            Tags the item can be identified by.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Inventory.MyInventoryItemDefinition.Size">
            <summary>
            Size the item takes up in inventory and world.
            
            Unit is meters.
            </summary>
        </member>
        <member name="P:VRage.Definitions.Inventory.MyInventoryItemDefinition.Volume">
            <summary>
            The volume of this item.
            This is always calculated from size.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Inventory.MyInventoryItemDefinition.Mass">
            <summary>
            Mass of the item.
            
            Unit is kilograms.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Inventory.MyInventoryItemDefinition.MaxStackAmount">
            <summary>
            Maximum ammount on a stack.
            
            Clamped between 1 and 65535.
            </summary>
        </member>
        <member name="P:VRage.Definitions.Inventory.MyInventoryItemDefinition.Model">
            <summary>
            Get the first model for this item.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Inventory.MyInventoryItemDefinition.Models">
            <summary>
            List of possible models for the item in the world.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Inventory.MyInventoryItemDefinition.PhysicalMaterial">
            <summary>
            Physical material for the item in the world.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Inventory.MyInventoryItemDefinition.Health">
            <summary>
            Health of the item when in the world.
            </summary>
        </member>
        <member name="P:VRage.Definitions.Inventory.MyInventoryItemDefinition.GuiVisible">
            <summary>
            Does this item show up on the GUI? (Defaults to true)
            </summary>
        </member>
        <member name="P:VRage.Definitions.Inventory.MyInventoryItemDefinition.HasModelVariants">
            <summary>
            Whether this item has multiple models that are chosen at random when spawning it in the world.
            </summary>
        </member>
        <member name="M:VRage.Definitions.Inventory.MyInventoryItemDefinition.GetItemOrTagDefinition(VRage.Game.MyDefinitionId)">
            <summary>
            Get item tag definition or physical item definition, based on the id.
            </summary>
            <param name="id"></param>
            <returns>Visual definition</returns>
        </member>
        <member name="F:VRage.Definitions.MyVoxelMaterialDefinition.PhysicalMaterialName">
            <summary>
            SubType name of the physical material.
            </summary>
        </member>
        <member name="F:VRage.Definitions.MyVoxelMaterialDefinition.DamagedMaterial">
            <summary>
            Material used to change to if voxel was modified at least once.
            </summary>
        </member>
        <member name="P:VRage.Definitions.MyVoxelMaterialDefinition.DamagedMaterialIndex">
            <summary>
            Index of DamageMaterial. -1 means it is not set.
            </summary>
        </member>
        <member name="P:VRage.Definitions.MyVoxelMaterialDefinition.Index">
            <summary>
            Value generated at runtime to ensure correctness. Do not serialize or deserialize.
            This is what the old cast to int used to result into, but now numbers depend on order in XML file.
            TODO Serialize to XML and ensure upon loading that these values are starting from 0 and continuous.
            </summary>
        </member>
        <member name="P:VRage.Definitions.MyVoxelMaterialDefinition.HasDamageMaterial">
            <summary>
            True if Damage material is set.
            </summary>
        </member>
        <member name="F:VRage.Definitions.MyVoxelMaterialDefinition.RenderParams">
            <summary>
            Render parameters.
            </summary>
        </member>
        <member name="P:VRage.Definitions.MyVoxelMaterialDefinition.DamagedMaterialMap">
            <summary>
            Mapping of voxel material (the index) to their damaged material type.
            </summary>
        </member>
        <member name="T:VRage.Definitions.MyDummySpec">
            <summary>
            Specification for a model dummy, either on an entity or subpart.
            
            Parses a string in the form [{Subpart}]:{DummyName}
            </summary>
        </member>
        <member name="F:VRage.Definitions.Cube.MyLegacyCubeBlockDefinition.LegacyBlockComponent.ReturnedItem">
            <summary>
            Item (or tag) Id that is returned upon deconstruction.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Cube.MyLegacyCubeBlockDefinition.BuildProgressModel.BuildRatioUpperBound">
            <summary>
            Upper bound when the model is no longer shown. If model is first in array
            and has build percentage of 0.33, it will be shown between 0% and 33% of
            build progress.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:VRage.Definitions.Cube.MyLegacyCubeBlockDefinition.MountPoint.ExclusionMask" -->
        <!-- Badly formed XML comment ignored for member "F:VRage.Definitions.Cube.MyLegacyCubeBlockDefinition.MountPoint.PropertiesMask" -->
        <member name="F:VRage.Definitions.Cube.MyLegacyCubeBlockDefinition.MountPoint.Enabled">
            <summary>
            Disabled mount points always return false when checking for connectivity
            </summary>
        </member>
        <member name="F:VRage.Definitions.Cube.MyLegacyCubeBlockDefinition.MountPoint.Default">
            <summary>
            Mark mount point as default for autorotate.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Cube.MyLegacyCubeBlockDefinition.Components">
            <summary>
            Index 0 is first component on stack, the one which is build first and destroyed last.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Cube.MyLegacyCubeBlockDefinition.GroupNameEnum">
            <summary>
            Enum used for localization of block group name. Null for player created definitions.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Cube.MyLegacyCubeBlockDefinition.GroupNameString">
            <summary>
            String used for user created block group name which do not have localization support.
            </summary>
        </member>
        <member name="P:VRage.Definitions.Cube.MyLegacyCubeBlockDefinition.GroupNameText">
            <summary>
            Use this property when showing block group name in GUI, as it takes into account more
            complex block group name construction.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Cube.MyLegacyCubeBlockDefinition.BuildType">
            <summary>
            Building type - always lower case (wall, ...).
            </summary>
        </member>
        <member name="F:VRage.Definitions.Cube.MyLegacyCubeBlockDefinition.BuildMaterial">
            <summary>
            Build material - always lower case (for walls - "stone", "wood"). 
            </summary>
        </member>
        <member name="P:VRage.Definitions.Cube.MyLegacyCubeBlockDefinition.Direction">
            <summary>
            Allowed cube block directions.
            </summary>
        </member>
        <member name="P:VRage.Definitions.Cube.MyLegacyCubeBlockDefinition.Rotation">
            <summary>
            Allowed cube block rotations.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Cube.MyLegacyCubeBlockDefinition.BuildProgressToPlaceGeneratedBlocks">
            <summary>
            Value of build progress when generated blocks start to generate.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Cube.MyLegacyCubeBlockDefinition.SubBlockDefinitions">
            <summary>
            Map from dummy name subblock definition.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Cube.MyLegacyCubeBlockDefinition.BlockStages">
            <summary>
            Array of block stages. Stage represents other block definition which have different UV mapping, mirrored model, etc (stone rounded corner...). Stages can be cycled when building cubes. 
            </summary>
        </member>
        <member name="F:VRage.Definitions.Cube.MyLegacyCubeBlockDefinition.BuildProgressModels">
            <summary>
            Models used when building. They are sorted in ascending order according to their percentage.
            </summary>
        </member>
        <member name="F:VRage.Definitions.Cube.MyLegacyCubeBlockDefinition.VoxelPlacement">
            <summary>
            Defines how much block can penetrate voxel.
            </summary>
        </member>
        <member name="P:VRage.Definitions.Cube.MyLegacyCubeBlockDefinition.DamagesVoxels">
            <summary>
            Does placing this block trigger the voxel damage effect?
            </summary>
        </member>
        <member name="M:VRage.Definitions.Cube.MyLegacyCubeBlockDefinition.ModelChangeIsNeeded(System.Single,System.Single)">
            <summary>
            Tells, whether a model change is needed, if the block changes integrity from A to B or vice versa.
            </summary>
        </member>
        <member name="M:VRage.Definitions.MyDefinitionLoader.LoadFile(VRage.Engine.IApplicationPackage,System.String)">
             <summary>
             Load all object builders from a file.
            
             Definitions are not created.
             
             This method is thread safe.
             </summary>
             <param name="context">Mod context for the loaded object builders.</param>
             <param name="path">File path.</param>
        </member>
        <member name="M:VRage.Definitions.MyDefinitionLoader.AddObjectBuilders(VRage.Engine.IApplicationPackage,System.Collections.Generic.IEnumerable{VRage.Game.MyObjectBuilder_DefinitionBase})">
             <summary>
             Add a set of object builders to the current loading pool.
            
             This method is thread safe.
             </summary>
             <param name="context"></param>
             <param name="definitions"></param>
        </member>
        <member name="M:VRage.Definitions.MyDefinitionLoader.InitAndPostProcess(VRage.Game.MyDefinitionSet)">
            <summary>
            Initialize stored object builders into definitions and post-process them.
            </summary>
            <param name="set">The definition set to merge into.</param>
        </member>
        <member name="M:VRage.Definitions.MyDefinitionLoader.DiscardBuilders">
            <summary>
            Discard all loaded object builders.
            </summary>
        </member>
        <member name="M:VRage.Definitions.MyDefinitionLoader.ResolveInheritance(VRage.Game.Definitions.MyDefinitionHandler,System.Collections.Generic.List{VRage.Game.MyObjectBuilder_DefinitionBase})">
            <summary>
            This method will handle any inheritance specified in a list of object builders.
            </summary>
            
            This process involves indexing the builders and sorting them according to their inheritance graph.
            
            Once builders are sorted we can merge from parent to child, from left to right. Because of the sorting
            we are guaranteed to process the top-most parents first, meaning we never need to process more than immediate relations.
            
            <param name="handler">Handler for the definitions specified by the object builders.</param>
            <param name="currentObset">Current initializing set.</param>
        </member>
        <member name="T:VRage.Definitions.MyDefinitionLoader.ContextualLogger">
            <summary>
            Logger that tracks and prints contextual information about the definition being processed.
            </summary>
        </member>
        <member name="T:VRage.Definitions.MyDefinitionLoader.LogMessage">
            <summary>
            A message produced by the definition loader.
            </summary>
        </member>
        <member name="T:VRage.Entities.Components.MyVoxelDataComponent">
            <summary>
            Binding of some voxel data to an entity.
            </summary>
        </member>
        <member name="P:VRage.Entities.Components.MyVoxelDataComponent.Storage">
            <summary>
            Storage data associated with this object.
            </summary>
        </member>
        <member name="P:VRage.Entities.Components.MyVoxelDataComponent.Scale">
            <summary>
            Scale of the voxel data.
            </summary>
        </member>
        <member name="P:VRage.Entities.Components.MyVoxelDataComponent.CenterOffset">
            <summary>
            The position of the centermost sample of the data represented by this component.
            </summary>
        </member>
        <member name="M:VRage.Entities.Components.MyVoxelDataComponent.OnAddedToContainer">
            <inheritdoc />
        </member>
        <member name="M:VRage.Entities.Components.MyVoxelDataComponent.ReadRange(VRage.Voxels.MyStorageData,VRage.Voxels.MyStorageDataTypeFlags,System.Int32,VRageMath.BoundingBoxI@,VRage.Game.Voxels.MyVoxelRequestFlags)">
            <summary>
            Read a range of storage data.
            </summary>
            <param name="target">The destination for the read content.</param>
            <param name="dataToRead">The data type to read.</param>
            <param name="lodIndex">The requested lod index.</param>
            <param name="range">The range of data to read.</param>
            <param name="requestFlags">Additional request flags.</param>
            <returns>The return flags with information that is specific to the provided flags.</returns>
        </member>
        <member name="M:VRage.Entities.Components.MyVoxelDataComponent.ReadOriginalRange(VRage.Voxels.MyStorageData,VRage.Voxels.MyStorageDataTypeFlags,System.Int32,VRageMath.BoundingBoxI@,VRage.Game.Voxels.MyVoxelRequestFlags)">
            <summary>
            Read a range of the original storage data (from the storage provider if any).
            </summary>
            <remarks>If the current storage has no providers this method will read from the current data instead.</remarks>
            <param name="target">The destination for the read content.</param>
            <param name="dataToRead">The data type to read.</param>
            <param name="lodIndex">The requested lod index.</param>
            <param name="range">The range of data to read.</param>
            <param name="requestFlags">Additional request flags.</param>
            <returns>The return flags with information that is specific to the provided flags.</returns>
        </member>
        <member name="M:VRage.Entities.Components.MyVoxelDataComponent.WriteRange(VRage.Voxels.MyStorageData,VRage.Voxels.MyStorageDataTypeFlags,VRageMath.BoundingBoxI@)">
            <summary>
            Writes range of content and/or materials from cache to storage. Note that this can only write to LOD0 (higher LODs must be computed based on that).
            </summary>
            <param name="source">Source of the voxel data to write.</param>
            <param name="dataToWrite">Which parameters of the voxel data to write.</param>
        </member>
        <member name="F:VRage.Entities.Components.MyDecimatePostprocessing.m_instance">
            <summary>
            Native decimator is shared across all definitions but before use setup with correct data.
            </summary>
        </member>
        <member name="M:VRage.Entities.Components.MyVoxelPostprocessing.Get(System.Int32,VRage.Voxels.VrPostprocessing@)">
            <summary>
            Retrieve the native postprocessing step associated with this.
            </summary>
            <param name="lod">Prepare the step fo the given lod.</param>
            <param name="postprocess"></param>
            <returns>The native postprocessing step.</returns>
        </member>
        <member name="M:VRage.Entities.Gravity.MyGravityProviderSystem.GetStrongestNaturalGravityWell(VRageMath.Vector3D,VRage.Entities.Gravity.IMyGravityProvider@)">
            <summary>
            Returns the planet that has the most influential gravity well in the given world point.
            The most influential gravity well is defined as the planet that has the highest gravity in the point and
            if no such planet is found, it returns the planet, whose gravity well is the closest to the given point.
            </summary>
            <param name="worldPosition">Position to test for the strongest gravity well</param>
            <param name="nearestProvider"></param>
            <returns>Planet that has the most influential gravity well in the given world point</returns>
        </member>
        <member name="M:VRage.Entities.Gravity.MyGravityProviderSystem.IsPositionInNaturalGravity(VRageMath.Vector3D,System.Double)">
            <summary>
            This quickly checks if a given position is in any natural gravity.
            </summary>
            <param name="position">Position to check</param>
            <param name="sphereSize">Sphere size to test with.</param>
            <returns>True if there is natural gravity at this position, false otherwise.</returns>
        </member>
        <member name="T:VRage.Network.IMyEntityReplicable">
            <summary>
            Interface describing the publicly visible aspects of a replicable for an entity.
            </summary>
        </member>
        <member name="P:VRage.Network.IMyEntityReplicable.PriorityFunction">
            <summary>
            Override the built in priority function.
            </summary>
        </member>
        <member name="M:VRage.Network.IMyEntityReplicable.CalculateBasePriority(VRage.Network.MyClientInfo)">
            <summary>
            Base calculation of an entity's replication priority.
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="T:VRage.Network.PriorityCalculator">
            <summary>
            Description of a delegate used to calculate the priority of an entity's replicable.
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="T:VRage.Network.IMyEntityReplicableInternal">
            <summary>
            Interface used to interact with the generic MyEntityReplicableBase class.
            </summary>
        </member>
        <member name="P:VRage.Network.IMyEntityReplicableInternal.Closure">
            <summary>
            The closure of all groups containing this entity.
            </summary>
        </member>
        <member name="M:VRage.Network.IMyEntityReplicableInternal.SetClosure(VRage.Network.MyGroupClosure)">
            <summary>
            Set the group closure that contains this entity and it's groups.
            </summary>
            <param name="closure"></param>
        </member>
        <member name="M:VRage.Network.IMyEntityReplicableInternal.GetGroups">
            <summary>
            Get the groups this entity is a member of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Network.IMyEntityReplicableInternal.GetObjectBuilder">
            <summary>
            Get the object builder for the entity.
            </summary>
            <returns></returns>
        </member>
        <member name="T:VRage.Network.IMyGroupReplicableInternal">
            <summary>
            Interface that allows the generic MyGroupReplicable class to interact with other instances of itself.
            </summary>
        </member>
        <member name="P:VRage.Network.IMyGroupReplicableInternal.Group">
            <summary>
            The scene group managed by this replicable.
            </summary>
        </member>
        <member name="P:VRage.Network.IMyGroupReplicableInternal.Closure">
            <summary>
            The group closure this group is a member of.
            </summary>
        </member>
        <member name="M:VRage.Network.IMyGroupReplicableInternal.SetClosure(VRage.Network.MyGroupClosure)">
            <summary>
            Set the closure for this group.
            </summary>
            <param name="closure"></param>
        </member>
        <member name="M:VRage.Network.IMyGroupReplicableInternal.ChildEntityRemoved(VRage.Network.IMyEntityReplicableInternal)">
            <summary>
            Notify the group that a child entity has been removed.
            </summary>
            <param name="myEntityReplicable"></param>
        </member>
        <member name="M:VRage.Network.IMyGroupReplicableInternal.ChildEntityAdded(VRage.Network.IMyEntityReplicableInternal)">
            <summary>
            Notify the group that a child entity has been added.
            </summary>
            <param name="myEntityReplicable"></param>
        </member>
        <member name="M:VRage.Network.IMyGroupReplicableInternal.GetObjectBuilder">
            <summary>
            Get the object builder for this group.
            </summary>
            <returns></returns>
        </member>
        <member name="T:VRage.Network.MyEntityReplicable`1">
            <summary>
                Abstract base class for entity replicables.
            </summary>
            <typeparam name="TEntity">The type of the replicated entity</typeparam>
        </member>
        <member name="F:VRage.Network.MyEntityReplicable`1.BaseVisibility">
            <summary>
            Base visibility factor.
            </summary>
            <remarks>This value represents the maximum replication distance for an object whose approximate cross section surface area is 1m.</remarks>
        </member>
        <member name="P:VRage.Network.MyEntityReplicable`1.PriorityFunction">
            <inheritdoc />
        </member>
        <member name="M:VRage.Network.MyEntityReplicable`1.CalculateBasePriority(VRage.Network.MyClientInfo)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Network.MyEntityReplicable`1.GetBasePriority(VRageMath.Vector3D,VRageMath.Vector3,VRage.Network.MyClientInfo)">
            <summary>
            Calculate the priority of a given object based on it's size, position, and the client it should replicate to.
            </summary>
            <param name="position">The position of the object.</param>
            <param name="size">The size of the object.</param>
            <param name="client">Information about the client it should replicate to.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Network.MyEntityReplicable`1.GetPriority(VRage.Network.MyClientInfo)">
            <inheritdoc cref="T:VRage.Network.IMyReplicable" />
        </member>
        <member name="F:VRage.Network.MyEntityReplicable`1.ShouldStreamObjectBuilder">
             <summary>
             Specifies whether the entity object builder should be streamed to the client.
             
             When set to true, object builder is generated and serialized on the server and then streamed to the client.
             Client then deserialized object builder and loads the entity from it.
            
             When set to false, only entity id is streamed to the client. Client then verifies if an entity having this entity id exists.
             </summary>
        </member>
        <member name="T:VRage.Network.MyEntityReplicable`1.SerializationData">
            <summary>
            Streamable data for entity replicable.
            </summary>
        </member>
        <member name="M:VRage.Network.MyEntityReplicable`1.InstanceOnGroupChanged(VRage.Game.Entity.MyEntity,System.Type,VRage.Scene.MyGroup,VRage.Scene.MyGroup)">
            <summary>
            Handle group change event for the target instance.
            </summary>
            <param name="entity"></param>
            <param name="groupType"></param>
            <param name="previous"></param>
            <param name="current"></param>
        </member>
        <member name="T:VRage.Network.MyGroupClosure">
            <summary>
            Representation of the tracked master group data.
            </summary>
        </member>
        <member name="F:VRage.Network.MyGroupClosure.m_childEntities">
            <summary>
            List of child entities of this master group.
            </summary>
        </member>
        <member name="F:VRage.Network.MyGroupClosure.m_groups">
            <summary>
            Graph containing our child groups and the connections that make them part of this master group.
            </summary>
        </member>
        <member name="F:VRage.Network.MyGroupClosure.m_edgeCounts">
            <summary>
            Reference counts for each edge holding this closure together.
            </summary>
        </member>
        <member name="F:VRage.Network.MyGroupClosure.m_dirty">
            <summary>
            Whether the dual graph has been modified with edge removals and needs to be checked.
            </summary>
        </member>
        <member name="P:VRage.Network.MyGroupClosure.Master">
            <summary>
            The elected master replicable for this closure.
            </summary>
        </member>
        <member name="P:VRage.Network.MyGroupClosure.Groups">
            <summary>
            The child groups contained in this closure.
            </summary>
        </member>
        <member name="P:VRage.Network.MyGroupClosure.Entities">
            <summary>
            The collection of all entity replicables that are children of the groups in this closure.
            </summary>
        </member>
        <member name="M:VRage.Network.MyGroupClosure.ChildRemoved(VRage.Network.IMyGroupReplicableInternal,VRage.Network.IMyEntityReplicableInternal)">
            <summary>
            Child entity removed from a child group.
            </summary>
            <param name="group"></param>
            <param name="entity"></param>
        </member>
        <member name="M:VRage.Network.MyGroupClosure.ChildAdded(VRage.Network.IMyGroupReplicableInternal,VRage.Network.IMyEntityReplicableInternal)">
            <summary>
            Notify that a child entity has been added to some group in this closure.
            </summary>
            <param name="group"></param>
            <param name="entity"></param>
        </member>
        <member name="M:VRage.Network.MyGroupClosure.CheckDirty">
            <summary>
            Check if the graph needs splitting.
            </summary>
        </member>
        <member name="M:VRage.Network.MyGroupClosure.MergeClosures(VRage.Network.IMyGroupReplicableInternal)">
            <summary>
            Merge the current master group with the master group of another replicable.
            </summary>
            <param name="neighbor"></param>
        </member>
        <member name="M:VRage.Network.MyGroupClosure.GetOrCreate(VRage.Network.IMyGroupReplicableInternal)">
            <summary>
            Find the closure for a given group or create a new one.
            
            </summary>
            <param name="replicable"></param>
            <returns></returns>
        </member>
        <member name="T:VRage.Network.MySceneComponentReplicable`1">
            <summary>
            Replicable for scene components.
            </summary>
            <typeparam name="TSceneComponent"></typeparam>
        </member>
        <member name="T:VRage.Network.MyGroupReplicable`1">
            <summary>
                Base class for group replicables.
            </summary>
            <typeparam name="TGroup"></typeparam>
        </member>
        <member name="F:VRage.Network.MyComponentReplicable`1.m_serializationEntityId">
            <summary>
            Serialization and verification of component replicable is rather primitive
            and there is no need to allocate new instance of serialization class for it.
            Therefore MyComponentReplicable implements IMyReplicableSerializationData directly.
            </summary>
        </member>
        <member name="T:VRage.Network.MyExternalReplicableEvent`1">
            <summary>
            Same as MyExternalReplicableEvent, but with support for event proxy.
            </summary>
        </member>
        <member name="P:VRage.Network.MyExternalReplicableEvent`1.Target">
            <inheritdoc />
        </member>
        <member name="T:VRage.Network.MyExternalReplicable`1">
            <summary>
            External replicable which is hooked to replicated object.
            On server instances are created by reacting to event like MyEntities.OnEntityCreated, subscribed by MyMultiplayerServerBase
            On clients instances are created by replication layer, which creates instance and calls OnLoad()
            </summary>
            <typeparam name="T">Type of the object to which is replicable hooked.</typeparam>
        </member>
        <member name="M:VRage.Network.MyExternalReplicable`1.Hook(System.Object)">
            <summary>
            Called on server before adding object to replication layer.
            </summary>
        </member>
        <member name="T:VRage.Network.ReplicatedComponentAttribute">
            <summary>
            This annotation marks a component to be replicated.
            </summary>
        </member>
        <member name="M:VRage.Network.ReplicatedComponentAttribute.#ctor">
            <summary>
            Declare a replicable type for a given object.
            
            This constructor will mark the component with it's default replicable type.
            </summary>
        </member>
        <member name="M:VRage.Network.ReplicatedComponentAttribute.#ctor(System.Type)">
            <summary>
            Declare a replicable type for a given object.
            </summary>
            <param name="replicableType">The type of the replicable to use for this class.</param>
        </member>
        <member name="T:VRage.ObjectBuilders.Components.Entity.Grid.MyObjectBuilder_GridHierarchyIdsComponent">
            <summary>
            Same as MyObjectBuilder_GridHierarchyComponent but the target component does not create any entities,
            it is there just for the mapping.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.MyObjectBuilder_DeathComponent.Respawning">
            <summary>
            Is the character currently respawning.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_DamageOverTimeEffectDefinition.DamageType">
            <summary>
            Damage type applied for this effect.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_DamageOverTimeEffectDefinition.Interval">
            <summary>
            Interval for the damage ticks.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_DamageOverTimeEffectDefinition.Amount">
            <summary>
            Amount of damage caused each tick.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_DamageOverTimeEffectDefinition.Limit">
            <summary>
            Does not deal damage if Health is less than or equal to this value.
            If left null there is no limit.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_EntityEffectDefinition.Category">
            <summary>
            Category of this effect.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_EntityEffectDefinition.Duration">
            <summary>
            How much time this effect lasts before expiring.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_EntityEffectDefinition.IsCancellable">
            <summary>
            Whether or not the user can request to cancel this effect.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_EntityEffectDefinition.IsSerialized">
            <summary>
            Is this effect serialized to the game save? Default: true.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_EntityEffectDefinition.LostOnReset">
            <summary>
            Whether or not death removes this effect.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_EntityEffectDefinition.ActivationEvent">
            <summary>
            Event fired on owner entity on activation.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_EntityEffectDefinition.DeactivationEvent">
            <summary>
            Event fired on owner entity on deactivation.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_EntityEffectDefinition.EffectType">
            <summary>
            Is this effect neutral, positive or negative for the receiver?
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_EntityEffectDefinition.ActivationSound">
            <summary>
            Local GUI audio played when this effect is activated.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_EntityEffectDefinition.DeactivationSound">
            <summary>
            Local GUI audio played when this effect is deactivated.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_EntityEffectDefinition.ActivationMode">
            <summary>
            When the effect is activated, does it reset the duration, or will it ignore changes?
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_MovementSpeedEffectDefinition.ForwardMultiplier">
            <summary>
            Multiplier to apply to the speed.
            If left blank this multiplier is considered as a multiplicative value of 1.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_MovementSpeedEffectDefinition.BackwardMultiplier">
            <summary>
            Multiplier to apply to the speed.
            If left blank this multiplier is considered as a multiplicative value of 1.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_MovementSpeedEffectDefinition.StrafingMultiplier">
            <summary>
            Multiplier to apply to the speed.
            If left blank this multiplier is considered as a multiplicative value of 1.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_MovementSpeedEffectDefinition.CanWalk">
            <summary>
            Allow or disallow walking.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_MovementSpeedEffectDefinition.CanSprint">
            <summary>
            Allow or disallow sprinting.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_MovementSpeedEffectDefinition.CanJump">
            <summary>
            Allow or disallow jumping.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_MovementSpeedEffectDefinition.CanCrouch">
            <summary>
            Allow or disallow crouching.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_MovementSpeedEffectDefinition.SupportedState">
            <summary>
            Supported movement state (e.g. Walk, Run, Sprint, Movement, Walk|Run, Run|Sprint, Walk|Sprint)
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_FOVEffectDefinition.FirstPersonFOVMultiplier">
            <summary>
            Multiply first person FOV with this value.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_FOVEffectDefinition.ThirdPersonFOVMultiplier">
            <summary>
            Multiply first person FOV with this value.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_FOVEffectDefinition.IntroInterpolation">
            <summary>
            Interpolation curve for the activation of the effect.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_FOVEffectDefinition.IntroDuration">
            <summary>
            Interpolation duration for the activation of the effect.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_FOVEffectDefinition.OutroInterpolation">
            <summary>
            Interpolation curve for the deactivation of the effect.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_FOVEffectDefinition.OutroDuration">
            <summary>
            Interpolation duration for the deactivation of the effect.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_ToolEfficiencyEffectDefinition.AffectedTools">
            <summary>
            Tool Tags for the tools that will be affected by the multiplier.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_ToolEfficiencyEffectDefinition.Multiplier">
            <summary>
            Multiplier to apply to the tool.
            If left blank this multiplier is considered as a multiplicative value of 1.
            This multiplier is used for all actions.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_ToolEfficiencyEffectDefinition.PrimaryActionMultiplier">
            <summary>
            Multiplier to apply to the tool.
            If left blank this multiplier is considered as a multiplicative value of 1.
            This multiplier is only used for primary action.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_ToolEfficiencyEffectDefinition.SecondaryActionMultiplier">
            <summary>
            Multiplier to apply to the tool.
            If left blank this multiplier is considered as a multiplicative value of 1.
            This multiplier is only used for secondary action.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_ToolEfficiencyEffectDefinition.TertiaryActionMultiplier">
            <summary>
            Multiplier to apply to the tool.
            If left blank this multiplier is considered as a multiplicative value of 1.
            This multiplier is only used for tartiary action.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_EntityStatDefinition.StatId">
            <summary>
            ID of the stat.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_EntityStatDefinition.Initial">
            <summary>
            Initial value, applied when the stat is first added to the entity.
            If left null will default to 1.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_EntityStatDefinition.Default">
            <summary>
            Default value, applied when the stat is reset to defaults.
            If left null, does not reset stat on reset.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_EntityStatDefinition.Minimum">
            <summary>
            Minimum value of the stat.
            If left null will default to 0.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_EntityStatDefinition.ClampToMinimum">
            <summary>
            Clamp value to maximum.
            If set to false stat can exceed max value.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_EntityStatDefinition.Maximum">
            <summary>
            Maximum value of the stat.
            If left null will default to 1.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_EntityStatDefinition.ClampToMaximum">
            <summary>
            Clamp value to maximum.
            If set to false stat can exceed max value.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_EntityStatDefinition.IsShownOnHUD">
            <summary>
            Does this stat show on the HUD's stat bar?
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_EntityStatDefinition.IgnoreLock">
            <summary>
            Does this stat ignore lock settings? (Creative-style gameplay locks stats)
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_EntityStatEffectDefinition.Stat">
            <summary>
            Stat to affect.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_EntityStatEffectDefinition.CancelOnDamage">
            <summary>
            Does this effect go away on damage?
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_EntityStatEffectDefinition.RegenPerSecond">
            <summary>
            Amount of stat regenerated per second.
            Can be null when there is no regen.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_EntityStatEffectDefinition.TotalRegen">
            <summary>
            Amount of stat regenerated over the duration.
            If duration is null or total regen is null, will use RegenPerSecond instead.
            If this is specified, and Duration is specified, will overwrite RegenPerSecond.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_EntityStatEffectDefinition.RegenLimit">
            <summary>
            Limit of the regen.
            If null there is no limit (other than min/max of stat).
            If RegenPerSecond is negative, this is the lower limit.
            If RegenPerSecond is positive, this is the upper limit.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_EntityStatEffectDefinition.AddedValue">
            <summary>
            Amount of stat value added straight-up on activation.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_EntityStatEffectDefinition.MinimumValue">
            <summary>
            Amount of min value changed.
            Can be null to not affect min value.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_EntityStatEffectDefinition.MinimumMultiplier">
            <summary>
            Multiplier for min value.
            Can be null to not affect min value.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_EntityStatEffectDefinition.MaximumValue">
            <summary>
            Amount of max value changed.
            Can be null to not affect max value.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_EntityStatEffectDefinition.MaximumMultiplier">
            <summary>
            Multiplier for max value.
            Can be null to not affect max value.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_StatEffectAffectorEffectDefinition.AffectedStatEffect">
            <summary>
            Effect ID to affect.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.MyObjectBuilder_StatEffectAffectorEffectDefinition.RegenMultiplier">
            <summary>
            Amount to affect the regen multiplier.
            </summary>
        </member>
        <member name="T:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.SerializableActionCost">
            <summary>
            Serializable action cost.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.SerializableActionCost.Stat">
            <summary>
            Stat to consume from.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.SerializableActionCost.Cost">
            <summary>
            Amount to consume.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.SerializableEffectOperation.Operations.Add">
            <summary>
            Adds an effect with EffectId.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.SerializableEffectOperation.Operations.Remove">
            <summary>
            Removes the effect with EffectId.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.SerializableEffectOperation.Operations.Replace">
            <summary>
            Replaces the effect with EffectId with the ReplaceEffect.
            If ReplaceEffect is left blank, acts like Remove.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.SerializableEffectOperation.Delay">
            <summary>
            Delay before the operation fires.
            If left blank operation is triggered immediately.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.SerializableEffectOperation.Operation">
            <summary>
            Operation type, add, remove or replace.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.SerializableEffectOperation.ReplaceEffect">
            <summary>
            Effect to replace the main effect with.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.SerializableEffectOperation.Category">
            <summary>
            Only used in conjunction with Remove operation, specify effect category to remove.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.SerializableEffectOperation.Chance">
            <summary>
            Chance this effect is applied. 0 = no chance, 1 = guaranteed, leaving this blank is treated as 1.
            </summary>
        </member>
        <member name="T:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.SerializableWeaponEffect.AffecteeSetting">
            <summary>
            Who is affected by this effect?
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.SerializableWeaponEffect.AffecteeSetting.Self">
            <summary>
            The effect operations are applied to the wielder of the weapon.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.SerializableWeaponEffect.AffecteeSetting.Target">
            <summary>
            The effect operations are applied to the target.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.SerializableWeaponEffect.AffecteeSetting.Both">
            <summary>
            The effect operations are applied to both the wielder and the target.
            </summary>
        </member>
        <member name="T:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.SerializableWeaponEffect.ContactTypes">
            <summary>
            Under which condition does this effect count?
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.SerializableWeaponEffect.ContactTypes.Hit">
            <summary>
            Counts when target is hit.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.SerializableWeaponEffect.ContactTypes.Miss">
            <summary>
            Counts when nothing is hit.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.SerializableWeaponEffect.ContactTypes.Blocked">
            <summary>
            Counts when attack was blocked.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.SerializableWeaponEffect.ContactTypes.Connect">
            <summary>
            Counts when the target is hit, or the attack was blocked.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.SerializableWeaponEffect.ContactTypes.Avoided">
            <summary>
            Counts when nothing was hit, or the attack was blocked.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.SerializableWeaponEffect.Affectee">
            <summary>
            Who is affected by this effect?
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.SerializableWeaponEffect.ContactType">
            <summary>
            Under which condition does this effect count?
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.SerializableWeaponEffect.HitRegion">
            <summary>
            What hit regions should the hit or block be for this effect to trigger?
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.Definitions.SerializableWeaponEffect.Effects">
            <summary>
            Effects to apply.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.MyObjectBuilder_DamageOverTimeEffect.Accumulator">
            <summary>
            Value to track interval progress
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.MyObjectBuilder_EntityEffect.ActivationTime">
            <summary>
            Game time when this effect was activated.
            Can be null if effect was not activated yet.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.MyObjectBuilder_EntityEffect.ApplicantEntityId">
            <summary>
            The identity id of the one responsible for this effect.
            Used for kill attribution, etc.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.Stats.MyObjectBuilder_EntityStat.CurrentValue">
            <summary>
            Current value of the stat.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.Entity.MyObjectBuilder_FlightComponent.Enabled">
            <summary>
            This flag is set to true when the flight component is enabled.
            </summary>
        </member>
        <member name="T:VRage.ObjectBuilders.Components.Physics.MyObjectBuilder_Constraint">
            <summary>
            Base object builder for physics constraints.
            </summary>
        </member>
        <member name="T:VRage.ObjectBuilders.Components.MyObjectBuilder_ComponentContainer">
            <summary>
            Builder for the contents of a component container.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Components.MyObjectBuilder_ComponentContainer.Components">
            <summary>
            List of components in the container.
            
            This is the only correct field to access. Other fields are transitional and will be removed at a later data.
            </summary>
        </member>
        <member name="T:VRage.ObjectBuilders.Definitions.Block.MyObjectBuilder_BlockVariantsDefinition">
            <summary>
            Object builder for block group definition.
            </summary>
        </member>
        <member name="T:VRage.ObjectBuilders.Definitions.Block.MyObjectBuilder_BlockGroupDefinition">
            <summary>
            Object builder for block group definition.
            </summary>
        </member>
        <member name="T:VRage.ObjectBuilders.Definitions.Block.MyObjectBuilder_BlockDefinition">
            <summary>
            Object builder for block definition.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Block.MyObjectBuilder_BlockDefinition.PreviewModel">
            <summary>
            Preview model used for grid placing. It is a different model from the final model of the block.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Block.MyObjectBuilder_BlockDefinition.DamagesVoxels">
            <summary>
            Does placing this block trigger the voxel damage effect?
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Block.MyObjectBuilder_BlockDefinition.CheckNeighbouringEdges">
            <summary>
            Indicates that block should check neighbouring edges also for mountpoint and additional block generator.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.Entity.CubeGrid.MyObjectBuilder_GridDataComponentDefinition.Size">
            <summary>
            Grid size in meters.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.Entity.CubeGrid.MyObjectBuilder_GridPhysicsShapeComponentDefinition.GridCellSize">
            <summary>
            The size of sharpe grid shape shape cell.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.Character.MyObjectBuilder_CharacterPhysicsDefinition.FrictionSpeedSqCoeff">
            <summary>
            How the speed affects the friction of character rigid body.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.Character.MyObjectBuilder_RenderComponentCharacterDefinition.DamageEffect.DamageType">
            <summary>
            Damage type to map the effect to.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.Character.MyObjectBuilder_RenderComponentCharacterDefinition.DamageEffect.ScreenEffect">
            <summary>
            Effect graphic to use.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.Character.MyObjectBuilder_RenderComponentCharacterDefinition.MaterialsDisabledIn1st">
            <summary>
            Materials that are disabled from rendering when the player is in first person view.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.Character.MyObjectBuilder_RenderComponentCharacterDefinition.DeathOverlay">
            <summary>
            Overlay displayed when character is dead.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.Character.MyObjectBuilder_RenderComponentCharacterDefinition.ScalingOverlays">
            <summary>
            Additional overlays.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.Character.MyObjectBuilder_CharacterMovementComponentDefinition.RotationToSupport">
            <summary>
            Align with the support? 
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.Character.MyObjectBuilder_CharacterMovementComponentDefinition.RequireJumpConfirmation">
            <summary>
            When set to true, movement component does not allow jumping without confirmation from the other system (like animation).
            This allows us to implement jump anticipation.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.Character.MyObjectBuilder_CharacterMovementComponentDefinition.SlopeDetectedTimeout">
            <summary>
            Path is blocked by slope - animation timeout in frames.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.Character.MyObjectBuilder_CharacterMovementComponentDefinition.MaterialToLandingEffects">
            <summary>
            Mapping of materials to landing effects (for soft,hard and running states).
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_AttachmentAnimationComponentDefinition.Sequence.AnimationWrapMode.Once">
            <summary>
            Play once, stop when finished.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_AttachmentAnimationComponentDefinition.Sequence.AnimationWrapMode.Loop">
            <summary>
            Play continuously, restart from the beginning when finished.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_AttachmentAnimationComponentDefinition.Sequence.AnimationWrapMode.PingPong">
            <summary>
            Play continuously, go back-and-forth.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_AttachmentAnimationComponentDefinition.Sequence.Event.Time">
            <summary>
            Time, in seconds, since the start of the animation for this event to get fired.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_AttachmentAnimationComponentDefinition.Sequence.Event.Name">
            <summary>
            Event to fire on the entity using the event bus component.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_AttachmentAnimationComponentDefinition.Sequence.Animation.Key.Time">
            <summary>
            Time, in seconds, since the start of the animation for this key.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_AttachmentAnimationComponentDefinition.Sequence.Animation.Key.Interpolation">
            <summary>
            Interpolation method to use from this key onwards.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_AttachmentAnimationComponentDefinition.Sequence.Animation.Key.Position">
            <summary>
            Position, relative to the attachment point's origin, for the entity to be at at the exact time of this key.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_AttachmentAnimationComponentDefinition.Sequence.Animation.Key.OrientationEuler">
            <summary>
            Orientation, relative to the attachment point's origin, for the entity to have at the exact time of this key.
            In Yaw/Pitch/Roll format, in degrees, where x = yaw, y = pitch, z = roll.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_AttachmentAnimationComponentDefinition.Sequence.Animation.Key.Orientation">
            <summary>
            Orientation, relative to the attachment point's origin, for the entity to hae at the exact time of this key.
            In normalized quaternion format.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_AttachmentAnimationComponentDefinition.Sequence.Animation.AttachmentPoint">
            <summary>
            Reference to the attachment point as defined by the ModelAttachmentComponent.
            <seealso cref='F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_ModelAttachmentComponentDefinition.AttachmentPoint.Name' />
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_AttachmentAnimationComponentDefinition.Sequence.Animation.Keys">
            <summary>
            List of keys.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_AttachmentAnimationComponentDefinition.Sequence.Name">
            <summary>
            Name of the animation.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_AttachmentAnimationComponentDefinition.Sequence.WrapMode">
            <summary>
            Wrap mode of the animation.
            Once, Loop, and PingPong.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_AttachmentAnimationComponentDefinition.Sequence.Events">
            <summary>
            List of events.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_AttachmentAnimationComponentDefinition.Sequence.Animations">
            <summary>
            List of animations.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_AttachmentAnimationComponentDefinition.Sequences">
            <summary>
            List of sequences.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_AttachmentAnimationComponentDefinition.AnimationEventTrigger.EventName">
            <summary>
            Event to respond to, as thrown over the event bus component.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_AttachmentAnimationComponentDefinition.AnimationEventTrigger.AnimationName">
            <summary>
            Animation to start or stop.
            <seealso cref='F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_AttachmentAnimationComponentDefinition.Sequence.Name' />
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_AttachmentAnimationComponentDefinition.AnimationEventTrigger.Action">
            <summary>
            Action to perform, either Start or Stop.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_AttachmentAnimationComponentDefinition.Triggers">
            <summary>
            List of triggers.
            </summary>
        </member>
        <member name="P:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_AttachmentAnimationComponentDefinition.TriggersCompat">
            <summary>
            List of triggers. Depricated, used by mods.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_AttachmentAnimationComponentDefinition.InitialAnimation">
            <summary>
            Initial animation to play when the component is loaded.
            <seealso cref='F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_AttachmentAnimationComponentDefinition.Sequence.Name' />
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_AttachmentAnimationComponentDefinition.InitialPlaybackSpeed">
            <summary>
            Initial playback speed for the initial animation.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_ModelAttachmentComponentDefinition.AttachmentPoint.Name">
            <summary>
            Attachment point name.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_ModelAttachmentComponentDefinition.AttachmentPoint.Bone">
            <summary>
            Bone to position the attachment at.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_ModelAttachmentComponentDefinition.AttachmentPoint.Offset">
            <summary>
            Offset position, in meters, from the bone, or center of the entity.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_ModelAttachmentComponentDefinition.AttachmentPoint.Rotation">
            <summary>
            Offset rotation, in degrees, from the bone, or center of the entity.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_ModelAttachmentComponentDefinition.AttachmentPoint.DefaultEntity">
            <summary>
            Default entity to create at this attachment point.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_ModelAttachmentComponentDefinition.Attachments">
            <summary>
            Collection of attachment points by name.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_ModelAttachmentComponentDefinition.DisableDynamicPhysics">
            <summary>
            Disable physics on the default entities if the parent physics become dynamic?
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_DeathComponentDefinition.CorpseId">
            <summary>
            Definition id of the corpse entity to be spawned.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_DeathComponentDefinition.LootId">
            <summary>
            Definition id for the potential loot to be included with the corpse.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_DeathComponentDefinition.RespawnTime">
            <summary>
            Time before respawning the entity.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_DeathComponentDefinition.RespawnCost">
            <summary>
            Cost for respawning
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_DeathComponentDefinition.RespawnCostStats">
            <summary>
            Stats to consume from for paying the respawn cost.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_DeathComponentDefinition.BoxShapeScale">
            <summary>
            scaling factor of the dead body physics shape (aabb)
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_DeathComponentDefinition.RelativeCenterOfMass">
            <summary>
            center of mass relative to size of box [1 == half extent]
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_DeathComponentDefinition.RelativeShapeTranslation">
            <summary>
            translation of dead body physics shape, relative to size of box [1 == half extent]
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_DeathComponentDefinition.Friction">
            <summary>
            friction factor
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_DeathComponentDefinition.DeathEvent">
            <summary>
            Event triggered when the character dies.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_FlightComponentDefinition.MaximumSpeed">
            <summary>
            Maximum flight speed. [0..inf, m / s]
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_FlightComponentDefinition.Acceleration">
            <summary>
            Acceleration of velocity per second. [0..inf, (m / s) / s]
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_FlightComponentDefinition.SlowdownFactor">
            <summary>
            Slowdown factor, exponential slowdown [0..1, 0 = instant slowdown, 1 = no slowdown]
            TODO: reconsider, can't we just use acceleration instead? ;)
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_FlightComponentDefinition.RotationSpeedFactor">
            <summary>
            Rotation speed factor used to change rotation speed.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.Camera.MyObjectBuilder_ThirdPersonCameraComponentDefinition.MAX_CAMERA_DISTANCE_DEFAULT">
            <summary>
            Default maximum camera distance.
            </summary>
        </member>
        <member name="M:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_EntityEquipmentComponentDefinition.Slot.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Make a new slot with it's properties.
            </summary>
            <param name="name"></param>
            <param name="attachment"></param>
            <param name="animationEquip"></param>
            <param name="animationUnequip"></param>
            <param name="animationPickup"></param>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_EntityEquipmentComponentDefinition.Slots">
            <summary>
            List of available equipment slots and their properties.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Components.MyObjectBuilder_EntityEquipmentComponentDefinition.EquipmentInventory">
            <summary>
            Name of the inventory that should contain equipped items.
            </summary>
        </member>
        <member name="T:VRage.ObjectBuilders.Definitions.Grid.BlockVoxelSubmersion">
            <summary>
            Setup of submersion of blocks into voxel. Defines amount of block/grid that needs to be inside voxel in order to be placed.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Grid.BlockVoxelSubmersion.MinAllowed">
            <summary>
            Minimum amount of block being inside voxel [meters]. If positive, the block cannot be outside voxel at all.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Grid.BlockVoxelSubmersion.MaxAllowed">
            <summary>
            Maximum amount of block being inside voxel [meters]. If negative, the block cannot be inside voxel at all.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Grid.BlockVoxelSubmersion.SnapMin">
            <summary>
            Snap to minimum (do not allow the block to be submerged less than this defined value).
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Grid.BlockVoxelSubmersion.SnapMax">
            <summary>
            Snap to maximum (do not allow the block to be submerged more than this defined value).
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Grid.BlockVoxelSubmersion.VoxelOnly">
            <summary>
            Indicates if test for submersion should be done only in respect to voxel
            </summary>
        </member>
        <member name="M:VRage.ObjectBuilders.Definitions.Grid.BlockVoxelSubmersion.#ctor(System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Full construction of the block voxel submersion.
            </summary>
            <param name="minAllowed">Minimum amount of block being inside voxel [meters]. If positive, the block cannot be outside voxel at all.</param>
            <param name="maxAllowed">Maximum amount of block being inside voxel [meters]. If negative, the block cannot be inside voxel at all.</param>
            <param name="snapMin">Snap to minimum (do not allow the block to be submerged less than this defined value).</param>
            <param name="snapMax">Snap to maximum (do not allow the block to be submerged more than this defined value).</param>
        </member>
        <member name="P:VRage.ObjectBuilders.Definitions.Grid.BlockVoxelSubmersion.IsValid">
            <summary>
            Returns if there is a valid placement.
            </summary>
        </member>
        <member name="P:VRage.ObjectBuilders.Definitions.Grid.BlockVoxelSubmersion.BothInsideOutside">
            <summary>
            Returns if it is valid to place the block inside, partially and fully outside of the voxel as well.
            </summary>
        </member>
        <member name="T:VRage.ObjectBuilders.Definitions.Grid.PlacementSettings">
            <summary>
            Settings for voxel placement. 'StaticMode' or Snapped mode and 'DynamicMode' or free mode.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Grid.PlacementSettings.StaticMode">
            <summary>
            Static mode is used when the active block/grid is aligned to LCS (snapped mode). 
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Grid.PlacementSettings.DynamicMode">
            <summary>
            Dynamic mode is used when the active block/grid is not aligned to any LCS (free mode).
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_RDPathfindingLayerDefinition.AgentMaxSlope">
            <summary>
            Maximum slope that is considered walkable, in degrees
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_RDPathfindingLayerDefinition.AgentMaxClimb">
            <summary>
            Maximum ledge height that is considered to still be traversable.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_RDPathfindingLayerDefinition.AgentRadius">
            <summary>
            Radius of the agent who will traverse this layer.  Ideally a multiple of CellSize.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_RDPathfindingLayerDefinition.AgentHeight">
            <summary>
            Minimum floor to ceiling height that will be still walkable.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_RDPathfindingLayerDefinition.CellSize">
            <summary>
            Horizontal size of a cell.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_RDPathfindingLayerDefinition.CellHeight">
            <summary>
            Vertical size of a cell.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_RDPathfindingLayerDefinition.RegionMinSize">
            <summary>
            Minimum world space diameter for an isolated island to be preserved.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_RDPathfindingLayerDefinition.RegionMergeSize">
            <summary>
            Maximum world space diameter for an isolated island to, if possible, be merged with another island.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_RDPathfindingLayerDefinition.EdgeMaxLength">
            <summary>
            The maximum world space length for contour edges along the border of the mesh.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_RDPathfindingLayerDefinition.EdgeMaxError">
            <summary>
            The maximum world space distance a simplified border can deviate from the original border.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_RDPathfindingLayerDefinition.MaxVerticesPerPoly">
            <summary>
            Maximum vertices allowed per generated polygon
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_RDPathfindingLayerDefinition.DetailSampleDistance">
            <summary>
            Sampling distance used when generating the height mesh, in multiples of <see cref="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_RDPathfindingLayerDefinition.CellSize"/>
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_RDPathfindingLayerDefinition.DetailSampleMaximumError">
            <summary>
            Maximum distance the detail mesh should deviate from the height field, in multiples of <see cref="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_RDPathfindingLayerDefinition.CellHeight"/>
            </summary>
        </member>
        <member name="T:VRage.ObjectBuilders.Definitions.MyObjectBuilder_Blueprint">
            <summary>
            Serialized state of a blueprint object.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_Blueprint.Version">
            <summary>
            Blueprint version.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_Blueprint.Name">
            <summary>
            User friendly name of the blueprint.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_Blueprint.Author">
            <summary>
            User friendly name of the blueprint.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_Blueprint.Description">
            <summary>
            Blueprint description.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_Blueprint.SubScene">
            <summary>
            Scene contained inside this blueprint.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_Blueprint.WorkshopId">
            <summary>
            Id of this blueprint in the workshop platform it is stored.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_Blueprint.CreatorId">
            <summary>
            Id of the creator of this blueprint in the workshop platform it is stored.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Inventory.MyObjectBuilder_EquipmentItemEffectDefinition.Item">
            <summary>
            DefinitionId of the item we are interested in.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Inventory.MyObjectBuilder_EquipmentItemEffectDefinition.EquipEffects">
            <summary>
            Effects applied when item is equipped.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Inventory.MyObjectBuilder_EquipmentItemEffectDefinition.UnequipEffects">
            <summary>
            Effects applied when item is unequipped.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Inventory.MyObjectBuilder_DurableItemDefinition.BrokenItem">
            <summary>
            Definition of the item to replace this item when it breaks.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Inventory.MyObjectBuilder_DurableItemDefinition.ItemBreakEvent">
            <summary>
            Event to play on the holder when the item breaks.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Inventory.MyObjectBuilder_BlockItemDefinition.Block">
            <summary>
            References to the actual block.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Inventory.MyObjectBuilder_ConsumableItemDefinition.ReturnedItems">
            <summary>
            Item(s) returned to player upon consumption.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Inventory.MyObjectBuilder_EquipmentItemDefinition.Animation">
            <summary>
            Animation action that is fired after equipping the item.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Inventory.MyObjectBuilder_EquipmentItemDefinition.EquippedTransform">
            <summary>
            Transform to apply when the item is equipped.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Inventory.MyObjectBuilder_EquipmentItemDefinition.EquippedTransformFps">
            <summary>
            Transform to apply in first person when the item is equipped.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Inventory.MyObjectBuilder_EquipmentItemDefinition.EquippedTransformFpsCrouch">
            <summary>
            Transform to apply in first person when the item is equipped and character is crouching.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Inventory.MyObjectBuilder_EquipmentItemDefinition.DummyMappings">
            <summary>
            Mapping the model dummies to animation variables.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Inventory.MyObjectBuilder_HandItemDefinition.AllowEmotes">
            <summary>
            Does this equipment allow emotes?
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Inventory.MyObjectBuilder_InventoryItemDefinition.Mass">
            <summary>
            Mass in kilogram
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Inventory.MyObjectBuilder_InventoryItemDefinition.MaxStackAmount">
            <summary>
            Max amount that can be stacked in one inventory slot.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Inventory.MyObjectBuilder_InventoryItemDefinition.Health">
            <summary>
            Health of the item in the inventory.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Inventory.MyObjectBuilder_InventoryItemDefinition.GuiVisible">
            <summary>
            Does this item show up on the GUI? (Defaults to true)
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Inventory.MyObjectBuilder_UsableItemDefinition.UseSound">
            <summary>
            Sound played when item is used.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_SceneComponentDefinition.PersistedTags">
            <summary>
            Tags that should be persisted by the component.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.SessionComponents.MyObjectBuilder_SceneComponentDefinition.Default">
            <summary>
            Whether this component should register as the default persistence.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Chat.MyObjectBuilder_ChatChannelDefinition.MessageFormat.Full">
            <summary>
            Full format, [Time] (Channel) Sender: Message
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Chat.MyObjectBuilder_ChatChannelDefinition.MessageFormat.Simple">
            <summary>
            Simple format, [Time] Message
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Chat.MyObjectBuilder_ChatChannelDefinition.MessageFormat.Channel">
            <summary>
            Channel format, [Time] (Channel) Message
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Chat.MyObjectBuilder_ChatChannelDefinition.MessageFormat.Emote">
            <summary>
            Emote format, [Time] Sender Message
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Chat.MyObjectBuilder_ChatSenderDefinition.Range">
            <summary>
            Range of the chat sender. If null, unlimited range.
            </summary>
        </member>
        <member name="T:VRage.ObjectBuilders.Definitions.MyDefinitionMergeMode">
            <summary>
            Controls how two definition object builders get merged.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyDefinitionMergeMode.Merge">
            <summary>
            Merge all normal fields, overwrite collections.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyDefinitionMergeMode.Overwrite">
            <summary>
            Overwrite the whole definition, effectively disables the merge.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyDefinitionMergeMode.Append">
            <summary>
            Merge fields and append to collections.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_CharacterListDefinition.CharacterEntry.Id">
            <summary>
            Link to the entity container definition.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_CharacterListDefinition.CharacterEntry.Playable">
            <summary>
            Define whether this character can be used by player.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_CharacterListDefinition.CharacterEntry.Public">
            <summary>
            Is this character entry public?
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_CharacterListDefinition.Characters">
            <summary>
            List of all character entities.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Equipment.MyObjectBuilder_HandItemBehaviorDefinition.ToolheadMaterial">
            <summary>
            Material used for when the tool hits something in its swing.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Equipment.MyObjectBuilder_ToolBehaviorDefinition.ActionData.Animation">
            <summary>
            Animation to play when doing the action with the main hand.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Equipment.MyObjectBuilder_ToolBehaviorDefinition.ActionData.PrepareAnimation">
            <summary>
            Animation (event) to play when trying to perform the action and having no valid target.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Equipment.MyObjectBuilder_ToolBehaviorDefinition.ActionData.StopPrepareAnimation">
            <summary>
            Interruption animation event for the preparing animation. If unspecified in sbc, it is generated as follows: stop_{PrepareAnimation}, e.g.: stop_prepare_axe
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Equipment.MyObjectBuilder_ToolBehaviorDefinition.ActionData.SwingSound">
            <summary>
            What sound to play when the action happens.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Equipment.MyObjectBuilder_ToolBehaviorDefinition.ActionData.HitTime">
            <summary>
            The hit time in the animation.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Equipment.MyObjectBuilder_ToolBehaviorDefinition.ActionData.AnimationTime">
            <summary>
            Total time the animation takes to finish, if this is set incorrectly the aniamtion may get cut or reset.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.Equipment.MyObjectBuilder_ToolBehaviorDefinition.StatCosts">
            <summary>
            Stat cost for performing any actions with this tool.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_DecalDefinition.Material">
            <summary>
            Material of the decal that would be applied on the target.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_DecalDefinition.Target">
            <summary>
            Target of the decal, for example Stone.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_DecalGlobalsDefinition.DecalQueueSize">
            <summary>
            Max decals allowed in the queue.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_HumanoidBotDefinition.BaseAttackWindow">
            <summary>
            Base attack duration, in milliseconds.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_HumanoidBotDefinition.AttackDecisionWindow">
            <summary>
            Time taken after deciding which direction to attack from, in milliseconds.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_HumanoidBotDefinition.BlockDelayWindow">
            <summary>
            Time taken to recover after getting blocked, in milliseconds.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_PrefabDefinition.m_sceneBuilder">
            <summary>
            Backing storage for scene compat.
            </summary>
        </member>
        <member name="P:VRage.ObjectBuilders.Definitions.MyObjectBuilder_PrefabDefinition.SubScene">
            <summary>
            SubScene containing the contents of the prefab.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_PrefabThrowerDefinition.MaxSpeed">
            <summary>
            In miliseconds
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_PrefabThrowerDefinition.MinSpeed">
            <summary>
            In miliseconds
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_PrefabThrowerDefinition.PushTime">
            <summary>
            In seconds
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_ShipBlueprintDefinition.WorkshopId">
            <summary>
            Workshop ID of the blueprint.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_ShipBlueprintDefinition.OwnerSteamId">
            <summary>
            Steam ID of the owner.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_ShadowTexture.Path">
            <summary>
            Path to texture of shadow.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_ShadowTexture.MinWidth">
            <summary>
            Minimal width.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_ShadowTexture.GrowFactorWidth">
            <summary>
            By how many times the shadow width grows.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_ShadowTexture.GrowFactorHeight">
            <summary>
            By how many times the shadow height grows.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Definitions.MyObjectBuilder_ShadowTexture.DefaultAlpha">
            <summary>
            Default alpha / Transparency
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.ComponentSystem.MyObjectBuilder_InventoryBaseDefinition.ShownInGUI">
            <summary>
            Whether or not this inventory shows up in the inventory GUI.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.ComponentSystem.MyObjectBuilder_InventoryBaseDefinition.OpenEvent">
            <summary>
            Event to fire on the entity's event bus when the inventory is opened.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.ComponentSystem.MyObjectBuilder_InventoryBaseDefinition.CloseEvent">
            <summary>
            Event to fire on the entity's event bus when the inventory is closed.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.ComponentSystem.MyObjectBuilder_InventoryComponentDefinition.InfiniteInCreative">
            <summary>
            Whether or not this inventory is infinite in creative mode.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.ComponentSystem.MyObjectBuilder_InventoryComponentDefinition.Constraint">
            <summary>
            Which inventory constraint should be used, if any?
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.ComponentSystem.MyObjectBuilder_InventoryComponentDefinition.SupportsAreaInventory">
            <summary>
            Whether or not this inventory can be included into area inventory.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.ComponentSystem.MyObjectBuilder_InventoryComponentDefinition.DefaultItems">
            <summary>
            Default items to insert into the inventory when it is first created.
            </summary>
        </member>
        <member name="T:VRage.ObjectBuilders.Scene.SerializableEdge">
            <summary>
            Serialized state for group edges.
            </summary>
        </member>
        <member name="T:VRage.ObjectBuilders.Scene.MyObjectBuilder_ComponentGroup">
            <inheritdoc />
        </member>
        <member name="M:VRage.ObjectBuilders.Scene.MyObjectBuilder_Group.Remap(VRage.ObjectBuilder.IMySceneRemapper)">
            <inheritdoc />
            <remarks>
            Child classes that store id's of scene objects or any other type of identifier
            that is global to the scene should override this method and implement the appropriate re-mapping.
            </remarks>
        </member>
        <member name="T:VRage.ObjectBuilders.Scene.MyObjectBuilder_GroupMultiLink`1">
            <summary>
            Base serializer class for entity groups.
            </summary>
            <typeparam name="TEdgeData">The type of the edge data.</typeparam>
        </member>
        <member name="T:VRage.ObjectBuilders.Scene.MyObjectBuilder_PhysicsConstraintGroup">
            <inheritdoc />
        </member>
        <member name="F:VRage.ObjectBuilders.Scene.MyObjectBuilder_PhysicsConstraintGroup.Constraints">
            <summary>
            Constraints stored per child edge.
            </summary>
        </member>
        <member name="T:VRage.ObjectBuilders.Scene.MyObjectBuilder_Scene">
            <summary>
            Serializable container for a set of entities and groups.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Scene.MyObjectBuilder_Scene.BoundingBox">
            <summary>
            World bounds of this subScene.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Scene.MyObjectBuilder_Scene.BoundingSphere">
            <summary>
            World bounds of this subScene.
            </summary>
        </member>
        <member name="P:VRage.ObjectBuilders.Scene.MyObjectBuilder_Scene.IsEmpty">
            <summary>
            Whether this builder contains no objects.
            </summary>
        </member>
        <member name="M:VRage.ObjectBuilders.Scene.MyObjectBuilder_Scene.Remap(VRage.ObjectBuilder.IMySceneRemapper)">
            <inheritdoc />
        </member>
        <member name="T:VRage.ObjectBuilders.Scene.MyObjectBuilder_TieredGroup">
            <summary>
            Serializer for the tiered constraint group.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Scene.MyObjectBuilder_TieredGroup.ChildParentEdges">
            <summary>
            Mapping of child edges to their corresponding parent edge.
            </summary>
        </member>
        <member name="T:VRage.ObjectBuilders.Session.MyObjectBuilder_SceneComponent">
            <summary>
            Object builder used by the scene component.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Block.MyObjectBuilder_Block.Id">
            <summary>
            Unique identifier for the block.
            </summary>
        </member>
        <member name="T:VRage.ObjectBuilders.MyModSetup">
            <summary>
            Defines a mod setup for a session.
            </summary>
            
            The mod setup is simply a list of mods to be loaded with the session.
        </member>
        <member name="F:VRage.ObjectBuilders.MyModSetup.Mods">
            <summary>
            List of mod references.
            </summary>
        </member>
        <member name="P:VRage.ObjectBuilders.MyModSetup.Empty">
            <summary>
            Whether this setup contains any mods or collections.
            </summary>
        </member>
        <member name="M:VRage.ObjectBuilders.MyModSetup.Clear">
            <summary>
            Clear all mod references.
            </summary>
        </member>
        <member name="M:VRage.ObjectBuilders.MyModSetup.Clone">
            <summary>
            Clone this setup.
            </summary>
        </member>
        <member name="T:VRage.ObjectBuilders.IMyRemappable">
            <summary>
            Interface identifying objects that contain id's of scene objects and need to be remapped when copied.
            </summary>
        </member>
        <member name="M:VRage.ObjectBuilders.IMyRemappable.Remap(VRage.ObjectBuilder.IMySceneRemapper)">
            <summary>
            Remap id's stored in this object.
            </summary>
            <param name="remapper"></param>
        </member>
        <member name="T:VRage.ObjectBuilders.SerializableVersion">
            <summary>
            Xml friendly version of <see cref="T:System.Version"/>.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilders.Inventory.MyObjectBuilder_InventoryItem.Amount">
            <summary>
            Quantity of items.
            </summary>
        </member>
        <member name="T:VRage.ObjectBuilders.SerializableModReference">
            <summary>
            A reference to a mod.
            </summary>
        </member>
        <member name="T:VRage.ObjectBuilders.MyObjectBuilder_ParticleEffectDefinition.Animated2DPropertyDef`1">
            <summary>
            Two-dimensional timeline.
            Outer: Particle Lifetime
            Inner: Effect Lifetime
            </summary>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="T:VRage.ObjectBuilders.MyObjectBuilder_ParticleEffectDefinition.AnimatedPropertyDef`1">
            <summary>
            One-dimensional timeline - Particle Lifetime.
            </summary>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="T:VRage.ObjectBuilders.MyObjectBuilderDefinitionAttribute">
            <summary>
            Attribute that identifies object builders.
            </summary>
        </member>
        <member name="M:VRage.ObjectBuilders.MyObjectBuilderSerializer.DeserializeXML(System.IO.Stream,VRage.ObjectBuilders.MyObjectBuilder_Base@,System.Type,System.Collections.Generic.Dictionary{System.String,System.String})">
            <param name="typeOverrideMap">Allows override of the type of the definition. Refer to MyDefinitionXmlSerializer</param>
        </member>
        <member name="M:VRage.ObjectBuilders.MyObjectBuilder_EntityBase.Remap(VRage.ObjectBuilder.IMySceneRemapper)">
            <inheritdoc />
            <remarks>
            Child classes that store id's of scene objects or any other type of identifier
            that is global to the scene should override this method and implement the appropriate re-mapping.
            </remarks>
        </member>
        <member name="M:VRage.ObjectBuilders.MyObjectBuilder_EntityBase.MorphContainer(VRage.ObjectBuilders.MyObjectBuilder_EntityBase,VRage.Game.MyContainerDefinition)">
            <summary>
            Create a copy of <paramref name="entity"/> after conversion from it's current state to the provided container definition.
            </summary>
            <param name="entity">The entity object builder to clone.</param>
            <param name="definition">The definition specifying which components to copy.</param>
            <returns>A new entity builder that is a copy of the original but only contains the components specified in the definition.</returns>
        </member>
        <member name="T:VRage.ObjectBuilders.MyObjectBuilder_ReplicableEntity">
            <summary>
            This object builder is old and is for "MyInventoryBagEntity". Do not use it as base class or for anything. It is here only for backward compatibility.
            </summary>
        </member>
        <member name="T:VRage.Entity.Block.BlockId">
            <summary>
            Identifier for an entity.
            </summary>
        </member>
        <member name="T:VRage.Entity.Block.MyBlock">
            <summary>
            Slim block base class.
            Defines a block that is on a grid.
            </summary>
        </member>
        <member name="E:VRage.Entity.Block.MyBlock.OnModelChanged">
            <summary>
            Event triggered when model changed.
            </summary>
        </member>
        <member name="P:VRage.Entity.Block.MyBlock.Factory">
            <summary>
            Cube block factory.
            </summary>
        </member>
        <member name="F:VRage.Entity.Block.MyBlock.m_model">
            <summary>
            Model for this block.
            </summary>
        </member>
        <member name="F:VRage.Entity.Block.MyBlock.m_position">
            <summary>
             Position on the grid.
            </summary>
        </member>
        <member name="F:VRage.Entity.Block.MyBlock.m_orientation">
            <summary>
            orientation of the block.
            </summary>
        </member>
        <member name="F:VRage.Entity.Block.MyBlock.SceneType">
            <summary>
            Scene object type for blocks.
            </summary>
        </member>
        <member name="M:VRage.Entity.Block.MyBlock.Create``1(VRage.Game.MyDefinitionId,VRage.Scene.MyScene)">
            <summary>
            Creates instance of cube block.
            </summary>
            <typeparam name="TCubeBlock">This has to be of type MyBlock.</typeparam>
            <param name="blockDefinitionId">Block definition id.</param>
            <param name="containingScene">The scene that will contain the block.</param>
            <returns>Instance of cube block. If produced type does not exist, returns null.</returns>
        </member>
        <member name="M:VRage.Entity.Block.MyBlock.GetRange(VRageMath.Vector3I@,VRageMath.Vector3I@)">
            <summary>
            Gets range of the block. Recalculated when dirty.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:VRage.Entity.Block.MyBlock.GridToBlockCoords(VRageMath.Vector3I)">
            <summary>
             Converts coordinate in respect to grid coordinate to local block coordinate.
            </summary>
            <param name="gridCoords">Grid coordinates to check for.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Entity.Block.MyBlock.GridCoordsToBlockLocal(VRageMath.Vector3I,VRageMath.Vector3I,VRageMath.MyBlockOrientation)">
            <summary>
            Gets grid coords converted to block local position.
            </summary>
            <param name="blockPosInGrid">Block position in grid.</param>
            <param name="gridCoords">Grid coordinates to test for.</param>
            <param name="blockOrient">Block orientation.</param>
            <returns>Local coordinate in respect to given block pos.</returns>
        </member>
        <member name="M:VRage.Entity.Block.MyBlock.BlockToGridCoords(VRageMath.Vector3I)">
            <summary>
            Converts coordinate in respect to the block to grid coordinate.
            </summary>
            <param name="blockCoords"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Entity.Block.MyBlock.GetBlockGridCoords(System.Collections.Generic.List{VRageMath.Vector3I})">
            <summary>
            Returns locations occupied by this block in respect to the grid it is in.
            </summary>
            <param name="allocatedList">if provided, this list is used instead of allocating new one internally</param>
            <returns>List of grid locations. It is an allocatedList instance, if provided.</returns>
        </member>
        <member name="M:VRage.Entity.Block.MyBlock.BlockLocalToGridCoords(VRageMath.Vector3I,VRageMath.Vector3I,VRageMath.MyBlockOrientation)">
            <summary>
            Gets coordinate of local coord in respect to grid coord.
            </summary>
            <param name="gridCoordPos">Grid coorinate.</param>
            <param name="localCoord">Local coordinate.</param>
            <param name="orientation">Orientation within grid coordinate.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Entity.Block.MyBlock.Transform(VRageMath.MatrixI@)">
            <summary>
            Transforms block position and orientation by Grid Matrix.
            </summary>
            <param name="transform">Grid Transform matrix</param>
        </member>
        <member name="M:VRage.Entity.Block.MyBlock.SetModel(VRage.Models.IMyModel,System.Action{VRage.Entity.Block.MyBlock})">
            <summary>
            Sets new model on a block. Do not use it externally. To set model on a grid, use MyGridDataComponent.ChangeModel.
            </summary>
            <remarks>To set model on a grid, use MyGridDataComponent.ChangeModel.</remarks>
            <param name="newModel">New model to set.</param>
            <param name="OnBeforeModelChanged">Method that will be called after model property is set but before model changed event.</param>
        </member>
        <member name="M:VRage.Entity.Block.MyBlock.GetCollisionShapeSafe">
            <summary>
            Gets collision shape of the block. If block model does not have collision shape, default shape is returned.
            </summary>
            <returns></returns>
        </member>
        <member name="P:VRage.Entity.Block.MyBlock.Id">
            <summary>
            Generates new Id that replaces the old one. 
            </summary>
        </member>
        <member name="P:VRage.Entity.Block.MyBlock.DefinitionId">
            <summary>
            Block Definition id.
            </summary>
        </member>
        <member name="P:VRage.Entity.Block.MyBlock.Definition">
            <summary>
            Block definition.
            </summary>
        </member>
        <member name="P:VRage.Entity.Block.MyBlock.Position">
            <summary>
            Gets/sets position of the block in the grid.
            </summary>
        </member>
        <member name="P:VRage.Entity.Block.MyBlock.Orientation">
            <summary>
            Gets/sets orientation of the block in the grid.
            </summary>
        </member>
        <member name="P:VRage.Entity.Block.MyBlock.Model">
            <summary>
            Model for this block.
            </summary>
        </member>
        <member name="M:VRage.Entity.EntityComponents.IMyAnimationDynamicOffset.ComputeOffset">
            <summary>
            Compute the offset direction vector.
            </summary>
        </member>
        <member name="M:VRage.Entity.EntityComponents.MyAnimationControllerComponentVariableCallbacks.RegisterCallback(VRage.Utils.MyStringId,VRage.Entity.EntityComponents.MyAnimationControllerComponentVariableCallbacks.VariableChangedDelegate)">
            <summary>
            Register a callback for variable value change.
            </summary>
            <param name="key">Variable key to register for.</param>
            <param name="callback">Callback to register.</param>
        </member>
        <member name="M:VRage.Entity.EntityComponents.MyAnimationControllerComponentVariableCallbacks.UnregisterCallback(VRage.Utils.MyStringId,VRage.Entity.EntityComponents.MyAnimationControllerComponentVariableCallbacks.VariableChangedDelegate)">
            <summary>
            Unregister a callback for variable value change.
            </summary>
            <param name="key">Variable key to unregister from.</param>
            <param name="callback">Callback to unregister.</param>
        </member>
        <member name="M:VRage.Entity.EntityComponents.MyAnimationControllerComponentVariableCallbacks.UnregisterCallback(VRage.Entity.EntityComponents.MyAnimationControllerComponentVariableCallbacks.VariableChangedDelegate)">
            <summary>
            Unregister a callback from all variables that it tracks.
            </summary>
            <param name="callback">Callback to unregister.</param>
        </member>
        <member name="P:VRage.Entity.EntityComponents.MyBlockModelComponent.Model">
            <summary>
            Model storage that should be accessed by anything that needs a model of an entity.
            </summary>
        </member>
        <member name="P:VRage.Entity.EntityComponents.MyBlockModelComponent.ModelCollision">
            <summary>
            Model storage that stores collision model.
            </summary>
        </member>
        <member name="F:VRage.Entity.EntityComponents.MyModelComponent.m_tmpDisplayName">
            <summary>
            Temporary storage for the display name during component deserialization.
            </summary>
        </member>
        <member name="P:VRage.Entity.EntityComponents.MyModelComponent.Model">
            <summary>
            Model storage that should be accessed by anything that needs a model of an entity.
            </summary>
        </member>
        <member name="P:VRage.Entity.EntityComponents.MyModelComponent.ModelCollision">
            <summary>
            Model storage that stores collision model.
            </summary>
        </member>
        <member name="P:VRage.Entity.EntityComponents.MyModelComponent.ColorMask">
            <summary>
            Colormask in HSV color format to be applied to the model.
            </summary>
        </member>
        <member name="T:VRage.Physics.MyPhysicsSystem">
            <summary>
            Base class for physics systems.
            </summary>
        </member>
        <member name="T:VRage.Physics.CollisionLayers">
            <summary>
            Collision layers that can be used to filter what collision should be found for casting methods.
            </summary>
            <remarks>!!** If new layer is added then also add conversion to "GetCollisionLayer" function **!! 
            Also max layer number is 31!!</remarks>
        </member>
        <member name="F:VRage.Physics.CollisionLayers.OnlyVoxelCollisionLayer">
            <summary>
            Collision layer only with voxels
            </summary>
        </member>
        <member name="F:VRage.Physics.CollisionLayers.PlayerEquipmentLayer">
            <summary>
            Used for equipment to collide with projectiles.
            </summary>
        </member>
        <member name="F:VRage.Physics.CollisionLayers.FracturePieceLayer">
            <summary>
            Used for fracture piece not to collide with themself.
            </summary>
        </member>
        <member name="F:VRage.Physics.CollisionLayers.NoVoxelCollisionLayer">
            <summary>
            Layer that works like 'DefaultCollisionLayer' but do not return collision with voxels (ex. Planet ground/asteroid).
            </summary>
        </member>
        <member name="F:VRage.Physics.MyPhysics.PhysicsConvexRadius">
            <summary>
            Convex radius to use by the various shapes that care.
            </summary>
        </member>
        <member name="M:VRage.Physics.MyPhysics.AssertNotInSimulation">
            <summary>
            Checks if the current thread is not currently executing a physics simulation.
            </summary>
        </member>
        <member name="M:VRage.Physics.MyPhysics.GetObjectOffset(System.UInt64)">
            <summary>
            Return offset of objects subspace center.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:VRage.Physics.MyHavokConstraint`1">
            <summary>
            Base class for havok based physics constraints.
            </summary>
            <typeparam name="TConstraintData"></typeparam>
        </member>
        <member name="F:VRage.Physics.MyHavokConstraint`1.ConstraintData">
            <summary>
            Constraint data.
            </summary>
        </member>
        <member name="F:VRage.Physics.MyHavokConstraint`1.Constraint">
            <summary>
            Constraint.
            </summary>
        </member>
        <member name="P:VRage.Physics.MyHavokConstraint`1.LastSolverImpulse">
            <summary>
            Las impulse applied by the solver in order to hold the constraint in place.
            </summary>
        </member>
        <member name="P:VRage.Physics.MyHavokConstraint`1.LastAbsoluteImpulseSquared">
            <summary>
            Las impulse applied by the solver in order to hold the constraint in place.
            </summary>
        </member>
        <member name="T:VRage.Physics.MyHavokPhysics">
            <summary>
            System that initializes and manages global Havok data.
            </summary>
        </member>
        <member name="T:VRage.Scene.BufferedQueue`1">
            <summary>
            Simple queue that uses a hashset as backing storage and allows queuing during enumeration.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:VRage.Scene.BufferedQueue`1.Empty">
            <summary>
            Whether this queue is empty.
            </summary>
        </member>
        <member name="T:VRage.Scene.EntityComponentId">
            <summary>
            Serializable reference to entity component.
            </summary>
        </member>
        <member name="P:VRage.Scene.EntityComponentId.SerializableComponentId">
            <summary>
            Used by MP serialization.
            </summary>
        </member>
        <member name="P:VRage.Scene.EntityComponentId.EntityId">
            <summary>
            The entity id for this component.
            </summary>
        </member>
        <member name="P:VRage.Scene.EntityComponentId.Component">
            <summary>
            The definition id for this component.
            </summary>
        </member>
        <member name="T:VRage.Scene.EntityFlags">
            <summary>
            Entity flags.
            </summary>
            <remarks>
            The first few entries in this enum match those in <see cref="T:VRage.Scene.SceneObjectFlags"/>.
            </remarks>
        </member>
        <member name="F:VRage.Scene.EntityFlags.None">
            <summary>
            No flags
            </summary>
        </member>
        <member name="F:VRage.Scene.EntityFlags.Active">
            <summary>
            Whether this entity is active.
            </summary>
        </member>
        <member name="F:VRage.Scene.EntityFlags.Static">
            <summary>
            Whether this entity does not move dynamically.
            </summary>
        </member>
        <member name="F:VRage.Scene.EntityFlags.Persist">
            <summary>
            Whether this entity should be persisted.
            </summary>
        </member>
        <member name="F:VRage.Scene.EntityFlags.Sync">
            <summary>
            Whether this entity should be synchronized to clients.
            </summary>
        </member>
        <member name="F:VRage.Scene.EntityFlags.Visible">
            <summary>
            Specifies whether draw this entity or not.
            </summary>
        </member>
        <member name="F:VRage.Scene.EntityFlags.NeedsUpdate">
            <summary>
            On this entity and its children will be called UpdateBeforeSimulation and UpdateAfterSimulation each frame
            </summary>
        </member>
        <member name="F:VRage.Scene.EntityFlags.NeedsDraw">
            <summary>
            Draw method of this entity will be called when suitable
            </summary>
        </member>
        <member name="F:VRage.Scene.EntityFlags.InvalidateOnMove">
            <summary>
            If object is moved, invalidate its renderobjects (update render)
            </summary>
        </member>
        <member name="F:VRage.Scene.EntityFlags.NeedsDrawFromParent">
            <summary>
            Draw method of this entity will be called when suitable and only from parent
            </summary>
        </member>
        <member name="F:VRage.Scene.EntityFlags.ShadowBoxLod">
            <summary>
            Draw LOD shadow as box
            </summary>
        </member>
        <member name="F:VRage.Scene.EntityFlags.NeedsUpdateBeforeNextFrame">
            <summary>
            Entity updated once before first frame.
            </summary>
        </member>
        <member name="F:VRage.Scene.EntityFlags.MarkedForDestroy">
            <summary>
            Whether this entity is marked for destruction.
            </summary>
        </member>
        <member name="F:VRage.Scene.EntityFlags.Destroyed">
            <summary>
            Whether this entity is closed.
            </summary>
        </member>
        <member name="T:VRage.Scene.EntityGroupChangedHandler">
            <summary>
            Event describing a change on group membership for an entity and group type.
            </summary>
            <param name="entity">The affected entity.</param>
            <param name="groupType">The type of the group that experienced the change.</param>
            <param name="previous">The previous group of the type the entity was a member of. Null if the entity was not previously a member of a group of this type.</param>
            <param name="current">The new group of the type the entity is now a member of. Null if the entity is no longer a member of a group of this type.</param>
        </member>
        <member name="T:VRage.Scene.EntityId">
            <summary>
            Identifier for an entity.
            </summary>
        </member>
        <member name="T:VRage.Scene.EntityNeighborCollection`1">
            <summary>
            Collection of neighboring entities in a group.
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:VRage.Scene.EntityNeighborCollection`1.Enumerator">
            <summary>
            Enumerator for the neighbor collection.
            </summary>
        </member>
        <member name="T:VRage.Scene.GroupFilter">
            <summary>
            Delegate type that defines a function used to filter groups.
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="T:VRage.Scene.GroupFlags">
            <summary>
            Enumeration describing group specific flags.
            </summary>
            <remarks>
            These flags are global for all instances of a group type.
            </remarks>
        </member>
        <member name="F:VRage.Scene.GroupFlags.Persisted">
             <summary>
             Indicates that instances of the group can be persisted.
            
             Groups with this flag will be persisted if their <see cref="P:VRage.Scene.MyGroup.Save"/> property is true.
             </summary>
        </member>
        <member name="F:VRage.Scene.GroupFlags.AlwaysConnected">
             <summary>
             Signals that a group cannot contain more than one connected component.
             </summary>
             <remarks>
             When more than one component results of some operation on a group of this type it gets split to it's connected components.
            
             This type of group also does not allow instances with a single vertex.
             </remarks>
        </member>
        <member name="F:VRage.Scene.GroupFlags.NoSingleVertex">
            <summary>
            Signals that groups of this type must have at least two connected entities.
            </summary>
        </member>
        <member name="F:VRage.Scene.GroupFlags.Synchronized">
             <summary>
             Signals that a group is synchronized from server to clients.
             </summary>
             <remarks>
             Synchronized groups can only be instantiated to the server, and entities contained in those groups are always replicated together to clients.
            
             Groups without this flag can be instantiated either on client or server, and will only execute their logic locally.
             </remarks>
        </member>
        <member name="F:VRage.Scene.GroupFlags.Default">
            <summary>
            Default set of flags for groups that do not explicitly specify them.
            </summary>
        </member>
        <member name="T:VRage.Scene.GroupId">
            <summary>
            Identifier for a group.
            </summary>
        </member>
        <member name="T:VRage.Scene.IMyObjectContainer`2">
            <summary>
            Interface describing a generic container for engine objects.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TObject">Type of the contained object.</typeparam>
        </member>
        <member name="T:VRage.Scene.IMySceneComponent">
            <summary>
            Interface defining a scene component.
            </summary>
            <remarks>
            Scene components are global objects that coordinate specific types of functionality in the scene.
            Usually scene components hold any code that is global to the scene, but that is not necessarily global to all scenes in
            a given application.
            They are also frequently used to share functionality for specific entity components, functioning somewhat like a
            <see cref="T:VRage.Scene.MyGroup"/>, but one that implicitly contains all instances of that component in the scene.
            </remarks>
        </member>
        <member name="T:VRage.Scene.IMySceneComponentContainer">
            <summary>
            Interface describing a container for scene components.
            </summary>
        </member>
        <member name="M:VRage.Scene.IMySceneComponentContainer.TryGetComponent(System.Type,VRage.Scene.IMySceneComponent@)">
            <summary>
            Try to get a scene component of a given type.
            </summary>
            <param name="componentType"></param>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="T:VRage.Scene.ISceneLoadListener">
            <summary>
            Interface describing a listener for scene load completion events.
            </summary>
        </member>
        <member name="M:VRage.Scene.ISceneLoadListener.OnLoaded(VRage.Scene.MyScene)">
            <summary>
            Invoked when a scene is finished loading.
            </summary>
            <param name="loadingScene">The staging scene where the objects were loaded.</param>
        </member>
        <member name="M:VRage.Scene.ISceneLoadListener.OnAddedToScene">
            <summary>
            Invoked after the loading scene is merged to the target scene.
            </summary>
        </member>
        <member name="T:VRage.Scene.MyClientServerIdAllocator">
            <summary>
            Identity allocator that generates different ids for server and client objects.
            </summary>
        </member>
        <member name="T:VRage.Scene.MyDefaultIdAllocator">
            <summary>
            Default identifier allocator.
            </summary>
        </member>
        <member name="T:VRage.Scene.MyRemapperEditable">
            <summary>
            Default scene remapper that utilizes MyEntityIdentifier to generate new Ids.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyRemapperEditable.SetMapping(VRage.Scene.SceneObjectTypeId,System.UInt64,System.UInt64)">
            <summary>
            Set the mapping from given id to another id for specified scene object type.
            </summary>
            <param name="type">scene object type</param>
            <param name="id">old identifier</param>
            <param name="newId">new identifier</param>
        </member>
        <member name="M:VRage.Scene.MyRemapperEditable.SetMappingGeneric(System.String,System.Int32,System.Int32)">
            <summary>
            Set the mapping from given id to another id for specified object type.
            </summary>
            <param name="objectType">object type name</param>
            <param name="id">old identifier</param>
            <param name="newId">new identifier</param>
        </member>
        <member name="M:VRage.Scene.MyRemapperEditable.SetMappingGeneric(System.String,System.UInt64,System.UInt64)">
            <summary>
            Set the mapping from given id to another id for specified object type.
            </summary>
            <param name="objectType">object type name</param>
            <param name="id">old identifier</param>
            <param name="newId">new identifier</param>
        </member>
        <member name="T:VRage.Scene.MyDummySceneComponentContainer">
            <summary>
            Dummy container that returns nothing, used by the the abstract scene base.
            </summary>
        </member>
        <member name="F:VRage.Scene.MyDummySceneComponentContainer.Instance">
            <summary>
            Singleton isntance.
            </summary>
        </member>
        <member name="T:VRage.Scene.MyGroupDebugger">
            <summary>
                Debug helper for groups.
            </summary>
        </member>
        <member name="T:VRage.Scene.IMyIdentifierAllocator">
            <summary>
            Interface describing an object that can allocate and manage scene object id's
            </summary>
        </member>
        <member name="T:VRage.Scene.MyScene">
            <summary>
            Class representing a scene. A set of of entities and entity groups that are all simulated and rendered together.
            </summary>
        </member>
        <member name="T:VRage.Scene.MyScene.OperationRecord">
            <summary>
            Represents a record of a group operation that was performed.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyScene.OperationRecord.#ctor(VRage.Scene.MyScene.GroupOperation,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyScene.OperationRecord.ToString">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyScene.Record(VRage.Scene.MyScene.OperationRecord@)">
            <summary>
            Record vertex add/remove operations.
            </summary>
            <param name="operation"></param>
        </member>
        <member name="M:VRage.Scene.MyScene.DebugCheckGroupConsistency">
            <summary>
            Check the consistency of groups in the scene.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyScene.CheckGroupConsistency(VRage.Scene.MyGroup)">
            <summary>
            Check the consistency of groups in the scene.
            </summary>
            <param name="mainInstance"></param>
            <returns></returns>
        </member>
        <member name="T:VRage.Scene.MyScene.TopLevelEntityEnumerable">
            <summary>
            Enumerable representing the top level entities contained within a scene.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyScene.TopLevelEntityEnumerable.System#Collections#Generic#IEnumerable{VRage#Game#Entity#MyEntity}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyScene.TopLevelEntityEnumerable.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:VRage.Scene.MyScene.TopLevelEntityEnumerator">
            <summary>
            Enumerator for the top level entities of a scene.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyScene.TopLevelEntityEnumerator.Dispose">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyScene.TopLevelEntityEnumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyScene.TopLevelEntityEnumerator.System#Collections#IEnumerator#Reset">
            <inheritdoc />
        </member>
        <member name="P:VRage.Scene.MyScene.TopLevelEntityEnumerator.Current">
            <inheritdoc />
        </member>
        <member name="P:VRage.Scene.MyScene.TopLevelEntityEnumerator.System#Collections#IEnumerator#Current">
            <inheritdoc />
        </member>
        <member name="T:VRage.Scene.MyScene.EntityGroupEnumerable">
            <summary>
            Enumerable object that can list all groups a given entity is a member of.
            </summary>
        </member>
        <member name="T:VRage.Scene.MyScene.EntityGroupEnumerator">
            <summary>
            Enumerator the the <see cref="T:VRage.Scene.MyScene.EntityGroupEnumerable"/>
            </summary>
        </member>
        <member name="F:VRage.Scene.MyScene.RemapperInternal">
            <summary>
            Remapper instance usable by this scene.
            </summary>
            <remarks>
            To override the remapper simply set this in the constructor of your child class.
            </remarks>
        </member>
        <member name="P:VRage.Scene.MyScene.Name">
            <summary>
            Debug name for this scene.
            </summary>
        </member>
        <member name="P:VRage.Scene.MyScene.Staging">
            <summary>
            Whether this is a staging scene.
            Staging scenes do not fire activation events for objects contained in them. Staging scenes are designed to allow
            for the asynchronous initialization of objects.
            </summary>
        </member>
        <member name="P:VRage.Scene.MyScene.Persistence">
            <summary>
            Object responsible for handling persistence in this scene.
            </summary>
        </member>
        <member name="P:VRage.Scene.MyScene.IdAllocator">
            <summary>
            Identifier allocator used for this scene.
            </summary>
        </member>
        <member name="P:VRage.Scene.MyScene.Scheduler">
            <summary>
            Update scheduler for this scene.
            </summary>
        </member>
        <member name="P:VRage.Scene.MyScene.Components">
            <summary>
            Update scheduler for this scene.
            </summary>
        </member>
        <member name="P:VRage.Scene.MyScene.Log">
            <summary>
            Log used to record runtime errors in the scene.
            </summary>
        </member>
        <member name="P:VRage.Scene.MyScene.IsEmpty">
            <summary>
            Whether this scene contains no objects.
            </summary>
        </member>
        <member name="F:VRage.Scene.MyScene.m_scenes">
            <summary>
            Static set of all scene instances.
            </summary>
        </member>
        <member name="P:VRage.Scene.MyScene.Scenes">
            <summary>
            Get a collection of all scene instances.
            </summary>
        </member>
        <member name="P:VRage.Scene.MyScene.ActiveScenes">
            <summary>
            Get all non-staging scene instances known to exist.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyScene.Merge(VRage.Scene.MyScene,System.Boolean)">
            <summary>
            Transfer all objects from the <paramref name="source"/> scene to this scene.
            </summary>
            <remarks>
            Most often the source would be a staging scene. Used exclusively to load and initialize objects asynchronously.
            </remarks>
            <param name="source"></param>
            <param name="destroyConflicting">Whether to destroy conflicting entities and groups.</param>
        </member>
        <member name="M:VRage.Scene.MyScene.Load(VRage.ObjectBuilders.Scene.MyObjectBuilder_Scene,VRage.Scene.ISceneLoadListener)">
            <summary>
            Load serialized scene contents into this scene.
            </summary>
            <param name="serializedScene">The serialized scene contents.</param>
            <param name="listener">A listener that collects the loaded entities.</param>
        </member>
        <member name="M:VRage.Scene.MyScene.Load(VRage.ObjectBuilders.Scene.MyObjectBuilder_Scene,System.Collections.Generic.List{VRage.Game.Entity.MyEntity},System.Collections.Generic.List{VRage.Scene.MyGroup})">
            <summary>
            Load serialized scene contents into this scene.
            </summary>
            <param name="serializedScene">The serialized scene contents.</param>
            <param name="outLoadedEntities">List where the entities that were loaded are stored, not used if null.</param>
            /// <param name="outLoadedGroups">List where the groups that were loaded are stored, not used if null.</param>
        </member>
        <member name="M:VRage.Scene.MyScene.LoadInternal(VRage.ObjectBuilders.Scene.MyObjectBuilder_Scene)">
            <summary>
            Load serialized scene contents into this scene.
            </summary>
            <param name="serializedScene">The serialized scene contents.</param>
        </member>
        <member name="M:VRage.Scene.MyScene.Clear">
            <summary>
            Clear the contents of this scene. Does not destroy any objects, just removes all references.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyScene.VRage#Components#IComponentContainer#Get(System.Type)">
            <inheritdoc />
        </member>
        <member name="P:VRage.Scene.MyScene.VRage#Components#IComponentContainer#Logger">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyScene.CreateRemapper">
            <summary>
            Creates a new remapper instance.
            </summary>
            <remarks>Override this method to use a custom remapper on your child class.</remarks>
            <returns></returns>
        </member>
        <member name="F:VRage.Scene.MyScene.MaxRemappers">
            <summary>
            Maximum acceptable number of retained remapper instances.
            </summary>
        </member>
        <member name="F:VRage.Scene.MyScene.m_remapperInstances">
            <summary>
            Pool of remapper instances available to users.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyScene.BorrowRemapper">
            <summary>
            lend a remapper to the caller.
            </summary>
            <returns>A remapper instance set up for this scene.</returns>
        </member>
        <member name="M:VRage.Scene.MyScene.ReturnRemapper(VRage.Scene.MyRemapperBase)">
            <summary>
            Return a previously borrowed scene remapper object.
            </summary>
            <param name="remapper"></param>
        </member>
        <member name="F:VRage.Scene.MyScene.m_entities">
            <summary>
            Mapping of id to each entity in scene.
            </summary>
        </member>
        <member name="F:VRage.Scene.MyScene.m_topLevelEntities">
            <summary>
            Set of top level entities.
            </summary>
        </member>
        <member name="F:VRage.Scene.MyScene.m_entitiesToDestroy">
            <summary>
            Queue of entities to be destroyed.
            </summary>
        </member>
        <member name="F:VRage.Scene.MyScene.m_entitiesToActivate">
            <summary>
            Queue of entities to activate.
            </summary>
        </member>
        <member name="P:VRage.Scene.MyScene.TopLevelEntities">
            <summary>
            The collection of all top level entities in this scene.
            </summary>
        </member>
        <member name="E:VRage.Scene.MyScene.EntityActivated">
            <summary>
            Event raised when an entity is added to this scene.
            </summary>
        </member>
        <member name="E:VRage.Scene.MyScene.EntityDeactivated">
            <summary>
            Event raised when an entity is removed from this scene.
            </summary>
        </member>
        <member name="E:VRage.Scene.MyScene.TopLevelEntityMoved">
            <summary>
            Event fired when any top level entity in this scene moves.
            </summary>
        </member>
        <member name="E:VRage.Scene.MyScene.TopLevelEntityResized">
            <summary>
            Event fired when any top level entity in this scene is resized.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyScene.RaiseEntityActivatedRecursive(VRage.Game.Entity.MyEntity)">
            <summary>
            Raise the entity added event on an instance and all of it's children.
            </summary>
            <param name="entity">The target of the event.</param>
        </member>
        <member name="M:VRage.Scene.MyScene.RaiseTopLevelEntityMoved(VRage.Game.Components.MyPositionComponentBase)">
            <summary>
            Raise the <see cref="E:VRage.Scene.MyScene.TopLevelEntityMoved"/> event.
            </summary>
            <param name="entity">The entity that moves.</param>
        </member>
        <member name="M:VRage.Scene.MyScene.RaiseTopLevelEntityResized(VRage.Game.Components.MyPositionComponentBase)">
            <summary>
            Raise the <see cref="E:VRage.Scene.MyScene.TopLevelEntityResized"/> event.
            </summary>
            <param name="entity">The entity that had it's bounds change.</param>
        </member>
        <member name="M:VRage.Scene.MyScene.TryGetEntity``1(VRage.Scene.EntityId,``0@)">
            <summary>
            Try to retrieve an entity given it's id.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="entityId">The id of the entity.</param>
            <param name="entity">The entity if found.</param>
            <returns>Whether the entity existed.</returns>
            <exception cref="T:System.InvalidCastException">If the actual type of the requested entity is not compatible with the type the caller expected.</exception>
        </member>
        <member name="M:VRage.Scene.MyScene.TryGetComponent``1(VRage.Scene.EntityId,``0@)">
            <summary>
            Try to find an entity component given it's entity's id.
            </summary>
            <typeparam name="TComponent">The type of the component.</typeparam>
            <param name="entityId">The id of the entity containing the component.</param>
            <param name="component">The located component or null.</param>
            <returns>Whether the component could be found.</returns>
        </member>
        <member name="M:VRage.Scene.MyScene.TryGetComponent``1(VRage.Scene.EntityComponentId,``0@)">
            <summary>
            Try to find an entity component given it's id.
            </summary>
            <typeparam name="TComponent">The type of the component.</typeparam>
            <param name="componentId">The global id of the entity component.</param>
            <param name="component">The located component or null.</param>
            <returns>Whether the component could be found.</returns>
        </member>
        <member name="M:VRage.Scene.MyScene.CreateEntityAndAdd``1(System.Action{``0},System.Nullable{VRage.Scene.EntityId},VRage.Game.Components.MyHierarchyComponent)">
            <summary>
            Create a new entity of a given type. This is transitional, in the future there will be no child entity types and this method will be removed.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyScene.LoadEntity(VRage.ObjectBuilders.MyObjectBuilder_EntityBase,VRage.Game.Components.MyHierarchyComponent,System.Boolean)">
            <summary>
            Load an entity from object builder.
            </summary>
            <param name="entityOb"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyScene.ActivateEntity(VRage.Game.Entity.MyEntity)">
            <summary>
            Activate the given entity.
            </summary>
            <remarks>
            Activation triggers the <see cref="E:VRage.Game.Entity.MyEntity.Activated"/> event and activates all components in the entity.
            </remarks>
            <param name="entity">The entity to activate.</param>
            <exception cref="T:System.ArgumentNullException">When the entity is null.</exception>
        </member>
        <member name="M:VRage.Scene.MyScene.EnqueueEntityActivation(VRage.Game.Entity.MyEntity)">
            <summary>
            Enqueue an entity for activation at a later moment.
            </summary>
            <remarks>
            Activation triggers the <see cref="E:VRage.Game.Entity.MyEntity.Activated"/> event and activates all components in the entity.
            </remarks>
            <param name="entity">The entity to activate.</param>
            <exception cref="T:System.ArgumentNullException">When the entity is null.</exception>
        </member>
        <member name="M:VRage.Scene.MyScene.DeactivateEntity(VRage.Game.Entity.MyEntity)">
            <summary>
            Deactivate an entity.
            </summary>
            <remarks>
            The entity is not destroyed. But all of it's components are deactivated, and all updates unscheduled.
            </remarks>
            <param name="entity"></param>
        </member>
        <member name="M:VRage.Scene.MyScene.Destroy(VRage.Game.Entity.MyEntity)">
            <summary>
            Destroy an entity.
            </summary>
            <remarks>
            The entity will be queued to be destroyed at an opportune moment and it's <see cref="P:VRage.Game.Entity.MyEntity.MarkedForClose"/> flag will be set.
            </remarks>
            <param name="entity">The entity to be destroyed.</param>
        </member>
        <member name="M:VRage.Scene.MyScene.ProcessPendingOperations">
            <summary>
            Process all pending once in a frame operations.
            </summary>
        </member>
        <member name="P:VRage.Scene.MyScene.HasPendingOperations">
            <summary>
            Whether this scene has any pending operations.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyScene.NotifyHierarchyChange(VRage.Game.Components.MyHierarchyComponent,VRage.Game.Components.MyHierarchyComponent,VRage.Game.Components.MyHierarchyComponent)">
            <summary>
            Handle a change in the hierarchy of entities in the scene.
            </summary>
            <param name="target"></param>
            <param name="oldParent"></param>
            <param name="newParent"></param>
        </member>
        <member name="M:VRage.Scene.MyScene.GetPersistence(VRage.Game.Entity.MyEntity)">
            <summary>
            Get persistence for entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyScene.UpdatePersistence(VRage.Game.Entity.MyEntity)">
            <summary>
            Update the persistence for a given entity.
            </summary>
            <param name="entity">The entity to update persistence for.</param>
        </member>
        <member name="E:VRage.Scene.MyScene.GroupAdded">
            <summary>
            Event raised when a group is added to this scene.
            </summary>
        </member>
        <member name="E:VRage.Scene.MyScene.GroupRemoved">
            <summary>
            Event raised when a group is removed from this scene.
            </summary>
        </member>
        <member name="E:VRage.Scene.MyScene.EntityGroupChanged">
            <summary>
            Event raised when an entity is added to this scene.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyScene.CreateGroup``1">
            <summary>
            Create and add to scene a new group instance.
            </summary>
            <typeparam name="TGroup"></typeparam>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyScene.CreateGroup(System.Type)">
            <summary>
            Create and add to scene a new group instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyScene.LoadGroup(VRage.ObjectBuilders.Scene.MyObjectBuilder_Group,System.Boolean)">
            <summary>
            Load a group from it's serialized state.
            </summary>
            <param name="groupData"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyScene.AddGroup(VRage.Scene.MyGroup)">
            <summary>
            Add a group to this scene.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:VRage.Scene.MyScene.Destroy(VRage.Scene.MyGroup,System.Boolean)">
            <summary>
            Destroy a group instance.
            </summary>
            <param name="group">The group to destroy.</param>
            <param name="unMapEntities">Whether to also remove entity mappings to this group.</param>
        </member>
        <member name="F:VRage.Scene.MyScene.m_entityToGroup">
            <summary>
            Mapping of entities to groups. Separated per group type.
            </summary>
        </member>
        <member name="F:VRage.Scene.MyScene.m_groups">
            <summary>
            Groups per group id.
            </summary>
        </member>
        <member name="F:VRage.Scene.MyScene.m_groupManagers">
            <summary>
            Dictionary of group listeners.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyScene.GetEntityGroupMap``1(System.Boolean)">
            <summary>
            Get the entity map for a group type.
            </summary>
            <typeparam name="TGroup">The type of the entity group.</typeparam>
            <param name="create">Whether to create the group if it does not exist.</param>
            <returns>the group map if it existed or was created, null otherwise.</returns>
        </member>
        <member name="M:VRage.Scene.MyScene.GetEntityGroupMap(System.Type,System.Boolean)">
            <summary>
            Get the entity map for a group type.
            </summary>
            <param name="type">The type of the entity group.</param>
            <param name="create">Whether to create the group if it does not exist.</param>
            <returns>the group map if it existed or was created, null otherwise.</returns>
        </member>
        <member name="M:VRage.Scene.MyScene.MakeGroup``2(``1)">
             <summary>
             Put the provided object into a group.
            
             Only groups that are not <see cref="P:VRage.Scene.MyGroup.AlwaysConnected"/> can contain a single entity.
             </summary>
             <typeparam name="TGroup">The type of the group.</typeparam>
             <typeparam name="TObject">The type of the object.</typeparam>
             <param name="entity">The first object to unite.</param>
             <returns>The final group containing both objects.</returns>
             <exception cref="T:System.ArgumentException">If the group type does not support disconnected components.</exception>
        </member>
        <member name="M:VRage.Scene.MyScene.AddToGroup``2(``0,``1)">
            <summary>
            Add an entity to an existing group.
            </summary>
            <remarks>
            The entity cannot be contained in another group of the same type.
            </remarks>
            <typeparam name="TGroup">The type of the group.</typeparam>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="entity">The second object to unite.</param>
            <returns>The final group containing both objects.</returns>
            <exception cref="T:System.ArgumentException">If the group type does not support disconnected components.</exception>
        </member>
        <member name="M:VRage.Scene.MyScene.Union``2(``1,``1)">
             <summary>
             Unite two objects in the same group.
            
             This will merge the groups the objects may already be contained in.
             </summary>
             <typeparam name="TGroup">The type of the group.</typeparam>
             <typeparam name="TObject">The type of the object.</typeparam>
             <param name="left">The first object to unite.</param>
             <param name="right">The second object to unite.</param>
             <returns>The final group containing both objects.</returns>
             <exception cref="T:System.ArgumentException">If the group type does not support disconnected components.</exception>
        </member>
        <member name="M:VRage.Scene.MyScene.Link``2(``1,``1)">
            <summary>
            Connect two objects. If either of them is already connected to other groups those are merged.
            </summary>
            <typeparam name="TGroup">The type of the group to merge the objects in.</typeparam>
            <typeparam name="TObject">The type of the object, usually <see cref="T:VRage.Game.Entity.MyEntity"/> or some entity component.</typeparam>
            <param name="left">The first object in the link.</param>
            <param name="right">The second object in the link.</param>
            <returns>The final group containing both objects.</returns>
        </member>
        <member name="M:VRage.Scene.MyScene.Link``3(``1,``1,``2)">
            <summary>
            Connect two objects. If either of them is already connected to other groups those are merged.
            </summary>
            <typeparam name="TGroup">The type of the group to merge the objects in.</typeparam>
            <typeparam name="TObject">The type of the object, usually <see cref="T:VRage.Game.Entity.MyEntity"/> or some entity component.</typeparam>
            <typeparam name="TLink">The type of the link information used by the group.</typeparam>
            <param name="left">The first object in the link.</param>
            <param name="right">The second object in the link.</param>
            <param name="link">Some optional information about the link.</param>
            <returns>The final group containing both objects.</returns>
        </member>
        <member name="M:VRage.Scene.MyScene.AddLink``3(``1,``1,``2)">
            <summary>
            Connect two objects. If either of them is already connected to other groups those are merged.
            </summary>
            <typeparam name="TGroup">The type of the group to merge the objects in.</typeparam>
            <typeparam name="TObject">The type of the object, usually <see cref="T:VRage.Game.Entity.MyEntity"/> or some entity component.</typeparam>
            <typeparam name="TLink">The type of the link information used by the  group.</typeparam>
            <param name="left">The first object in the link.</param>
            <param name="right">The second object in the link.</param>
            <param name="link">Some optional information about the link.</param>
            <returns>The final group containing both objects.</returns>
        </member>
        <member name="M:VRage.Scene.MyScene.UnionInternal``2(``1,``1)">
            <summary>
            Unite two groups, no questions asked.
            </summary>
            <typeparam name="TGroup"></typeparam>
            <typeparam name="TObject"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyScene.Unlink``2(``1,``1)">
            <summary>
            Disconnect two objects on the same group.
            </summary>
            <typeparam name="TGroup"></typeparam>
            <typeparam name="TObject"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <returns>Whether the link existed.</returns>
        </member>
        <member name="M:VRage.Scene.MyScene.RemoveLink``3(``1,``1,``2)">
            <summary>
            Remove a link between two objects on the same group.
            </summary>
            <typeparam name="TGroup"></typeparam>
            <typeparam name="TObject"></typeparam>
            <typeparam name="TLink"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <param name="link"></param>
            <returns>Whether the link existed.</returns>
        </member>
        <member name="M:VRage.Scene.MyScene.Disconnect``2(``1)">
            <summary>
            Disconnect an object from it's group.
            </summary>
            <typeparam name="TGroup">The type of the group.</typeparam>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="entity">The object to disconnect from it's group.</param>
            <returns>Whether the link existed.</returns>
        </member>
        <member name="M:VRage.Scene.MyScene.HandleSplit(VRage.Scene.MyGroup,VRage.Scene.MyGroup)">
            <summary>
            Ensure correct mappings when a group splits.
            </summary>
            <param name="parent">The group that previously contained the split vertices.</param>
            <param name="split">The new group.</param>
        </member>
        <member name="M:VRage.Scene.MyScene.HandleSplit(VRage.Scene.MyGroup,VRage.Game.Entity.MyEntity)">
            <summary>
            Ensure correct mappings when a group splits.
            </summary>
            <param name="parent">The parent group.</param>
            <param name="single"></param>
        </member>
        <member name="M:VRage.Scene.MyScene.ContainsGroup(VRage.Scene.GroupId)">
            <summary>
            Whether this scene contains a group with the given id.
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyScene.TryGetGroup(VRage.Scene.GroupId,VRage.Scene.MyGroup@)">
            <summary>
            Try to get a group by it's aid.
            </summary>
            <param name="id"></param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyScene.TryGetGroup``1(VRage.Scene.GroupId,``0@)">
            <summary>
            Try to get a group by it's aid.
            </summary>
            <param name="id"></param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyScene.GetGroup``2(``1)">
            <summary>
            Get the group for a given object.
            </summary>
            <typeparam name="TGroup">The type of the group to merge the objects in.</typeparam>
            <typeparam name="TObject">The type of the object, usually <see cref="T:VRage.Game.Entity.MyEntity"/> or some entity component.</typeparam>
            <param name="entity">The object to find the group for.</param>
            <returns>The group where the object is inserted, or null.</returns>
        </member>
        <member name="M:VRage.Scene.MyScene.AreLinked``2(``1,``1)">
            <summary>
            Find if two entities are linked for on the provided group type.
            </summary>
            <typeparam name="TGroup">The type of the group.</typeparam>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="left">First entity on the link.</param>
            /// <param name="right">Second entity on the link.</param>
            <returns>Whether the two objects are linked.</returns>
        </member>
        <member name="M:VRage.Scene.MyScene.AreInSameGroup``2(``1,``1)">
            <summary>
            Find if two entities are on the same group.
            </summary>
            <typeparam name="TGroup">The type of the group.</typeparam>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="left">First entity on the group.</param>
            /// <param name="right">Second entity on the group.</param>
            <returns>Whether the two objects are contained in the same group.</returns>
        </member>
        <member name="M:VRage.Scene.MyScene.GetGroup(System.Type,VRage.Game.Entity.MyEntity)">
            <summary>
            Get a group of provided type that contains the requested entity.
            </summary>
            <param name="groupType">The type of the group.</param>
            <param name="entity">The entity in the group.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyScene.GetAllGroups``1">
            <summary>
            Get all groups of a given type.
            </summary>
            <typeparam name="TGroup"></typeparam>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyScene.GetAllGroups(System.Type)">
            <summary>
            Get all groups of a given type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyScene.GetAllGroups">
            <summary>
            Get all groups in this scene.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyScene.GetEntityGroups(VRage.Scene.EntityId)">
            <summary>
            Get all groups an entity is a part of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyScene.IsInAnyGroup(System.Int64)">
            <summary>
            Get all groups an entity is a part of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyScene.Groups``1">
            <summary>
            Get group proxy instance. A helper class that simplifies the syntax for most operations.
            </summary>
            <typeparam name="TGroup"></typeparam>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyScene.GetGroupManager``1">
            <summary>
            Get the manager for a given group.
            </summary>
            <typeparam name="TGroup"></typeparam>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyScene.GetGroupManager(System.Type)">
            <summary>
            Get the manager for a given group.
            </summary>
            <param name="groupType">The type of the group.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyScene.GetPersistence(VRage.Scene.MyGroup)">
            <summary>
            Get persistence for group.
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyScene.SetPersistence(VRage.Scene.MyGroup,VRage.Session.IMyPersistenceComponent)">
            <summary>
            Set persistence for group.
            </summary>
            <param name="group"></param>
            <param name="persistence">Persistence component, or null.</param>
        </member>
        <member name="M:VRage.Scene.MyScene.RemovePersistence(VRage.Scene.MyGroup)">
            <summary>
            Remove persistence for group.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:VRage.Scene.MyScene.UpdatePersistence(VRage.Scene.MyGroup)">
            <summary>
            Update the persistence component used for a group by taking the one used for it's members.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:VRage.Scene.MyScene.UpdatePersistenceAfterUnion(VRage.Scene.MyGroup,VRage.Scene.MyGroup)">
            <summary>
            Incremental persistence update after two groups unite.
            </summary>
            <param name="mainGroup"></param>
            <param name="destroyedGroup"></param>
        </member>
        <member name="M:VRage.Scene.MyScene.UpdatePersistenceAfterAdd(VRage.Scene.MyGroup,VRage.Game.Entity.MyEntity)">
            <summary>
            Incremental persistence update after an entity is added to a group.
            </summary>
            <param name="group"></param>
            <param name="added"></param>
        </member>
        <member name="M:VRage.Scene.MyScene.UpdatePersistenceIncremental(VRage.Scene.MyGroup,VRage.Session.IMyPersistenceComponent)">
            <summary>
            Common method for incremental group persistence update.
            </summary>
            <param name="group">Group component to update.</param>
            <param name="otherPersistence">Persistence component used for the newly added group members.</param>
        </member>
        <member name="T:VRage.Scene.MyScene.GroupOperation">
            <summary>
            Enumeration describing the possible group operations.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyScene.ShouldSynchronize(VRage.Scene.MyGroup)">
            <summary>
            Whether operations on a given group should be synchronized.
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyScene.MergeGroupSynchronized(VRage.Scene.MyGroup,VRage.Scene.MyGroup)">
            <summary>
            Merge a group locally and broadcast the event if this instance is on the server.
            </summary>
            <param name="original"></param>
            <param name="mergeFrom"></param>
        </member>
        <member name="M:VRage.Scene.MyScene.GroupAddEntitySynchronized``2(``0,``1)">
            <summary>
            Add an entity to a group and synchronize the change to clients.
            </summary>
            <typeparam name="TGroup"></typeparam>
            <typeparam name="TObject"></typeparam>
            <param name="group"></param>
            <param name="entity"></param>
        </member>
        <member name="M:VRage.Scene.MyScene.GroupAddEntityInternal``2(``0,``1)">
            <summary>
            Add an entity to a group without any checking.
            </summary>
            <typeparam name="TGroup"></typeparam>
            <typeparam name="TObject"></typeparam>
            <param name="instance"></param>
            <param name="groupEntity"></param>
        </member>
        <member name="M:VRage.Scene.MyScene.GroupRemoveEntityInternal``2(``0,``1)">
            <summary>
            Remove an entity from a group without checking.
            </summary>
            <typeparam name="TGroup"></typeparam>
            <typeparam name="TObject"></typeparam>
            <param name="group"></param>
            <param name="entity"></param>
        </member>
        <member name="M:VRage.Scene.MyScene.MergeGroupsInternal(VRage.Scene.MyGroup,VRage.Scene.MyGroup)">
            <summary>
            Merge two groups without checking.
            </summary>
            <param name="instance"></param>
            <param name="mergeFrom"></param>
        </member>
        <member name="T:VRage.Scene.MySceneComponentContainerExtensions">
            <summary>
            Extension methods for the scene component container interface.
            </summary>
        </member>
        <member name="M:VRage.Scene.MySceneComponentContainerExtensions.TryGetComponent``1(VRage.Scene.IMySceneComponentContainer,``0@)">
            <summary>
            Try to get the first component of a given type on a scene.
            </summary>
            <typeparam name="TComponent"></typeparam>
            <param name="container"></param>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="T:VRage.Scene.MySceneFactory">
            <summary>
            A factory for creating new scenes.
            </summary>
        </member>
        <member name="P:VRage.Scene.MySceneFactory.CreatePersistence">
            <summary>
            Delegate used to create the scene's persistence manager.
            </summary>
        </member>
        <member name="P:VRage.Scene.MySceneFactory.CreateIdAllocator">
            <summary>
            Delegate used to create the scene's id allocator.
            </summary>
        </member>
        <member name="P:VRage.Scene.MySceneFactory.CreateComponentContainer">
            <summary>
            Delegate used to create the scene's component container.
            </summary>
        </member>
        <member name="P:VRage.Scene.MySceneFactory.CreateUpdateScheduler">
            <summary>
            Delegate used to create the scene's update scheduler.
            </summary>
        </member>
        <member name="P:VRage.Scene.MySceneFactory.CreateLogger">
            <summary>
            Delegate used to create the scene's logger.
            </summary>
        </member>
        <member name="F:VRage.Scene.MySceneFactory.Default">
            <summary>
            Scene factory used for all new scenes.
            </summary>
            <remarks>
            This factory instance is cached to reduce unneeded allocations when creating new scenes. Modifying it is not recommended.
            </remarks>
        </member>
        <member name="T:VRage.Scene.SceneObjectTypeId">
            <summary>
            Token for custom scene object identifiers.
            </summary>
            <remarks>
            Identifier by the id allocator to separate different scene object types.
            </remarks>
        </member>
        <member name="P:VRage.Scene.SceneObjectTypeId.Name">
            <summary>
            Name of this scene object type.
            </summary>
        </member>
        <member name="M:VRage.Scene.SceneObjectTypeId.Register(System.String,System.Int32)">
            <summary>
            Register a scene object type id with a specific index.
            </summary>
            <param name="name"></param>
            <param name="id">The index of the type being registered.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.SceneObjectTypeId.Register(System.String)">
            <summary>
            Register a scene object type id.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.SceneObjectTypeId.TryGet(System.String,VRage.Scene.SceneObjectTypeId@)">
            <summary>
            Try to get an object type id from it's name.
            </summary>
            <param name="name">The name of the object type.</param>
            <param name="id">The object type id or <see cref="F:VRage.Scene.SceneObjectTypeId.Null"/> if not found.</param>
            <returns>Whether the id was found.</returns>
        </member>
        <member name="F:VRage.Scene.SceneObjectTypeId.Null">
            <summary>
            Null type id instance.
            </summary>
        </member>
        <member name="F:VRage.Scene.SceneObjectTypeId.Entity">
            <summary>
            Type id for entities.
            </summary>
        </member>
        <member name="F:VRage.Scene.SceneObjectTypeId.Group">
            <summary>
            Type id for groups.
            </summary>
        </member>
        <member name="T:VRage.Scene.ObjectId`3">
            <summary>
            Identifier for a generic object.
            </summary>
        </member>
        <member name="T:VRage.Scene.GroupProxyExtensions">
            <summary>
            Extension methods that populate the basic methods in GroupProxy.
            </summary>
        </member>
        <member name="M:VRage.Scene.GroupProxyExtensions.MakeGroup``2(VRage.Scene.GroupProxy{``0},``1)">
             <summary>
             Put the provided object into a group.
            
             Only groups that are not <see cref="P:VRage.Scene.MyGroup.AlwaysConnected"/> can contain a single entity.
             </summary>
             <typeparam name="TGroup">The type of the group.</typeparam>
             <typeparam name="TObject">The type of the object.</typeparam>
             <param name="entity">The first object to unite.</param>
             <returns>The final group containing both objects.</returns>
             <exception cref="T:System.ArgumentException">If the group type does not support disconnected components.</exception>
        </member>
        <member name="M:VRage.Scene.GroupProxyExtensions.Union``2(VRage.Scene.GroupProxy{``0},``1,``1)">
             <summary>
             Unite two objects in the same group.
            
             This will merge the groups the objects may already be contained in.
             </summary>
             <typeparam name="TGroup">The type of the group.</typeparam>
             <typeparam name="TObject">The type of the object.</typeparam>
             <param name="left">The first object to unite.</param>
             <param name="right">The second object to unite.</param>
             <returns>The final group containing both objects.</returns>
             <exception cref="T:System.ArgumentException">If the group type does not support disconnected components.</exception>
        </member>
        <member name="M:VRage.Scene.GroupProxyExtensions.Link``2(VRage.Scene.GroupProxy{``0},``1,``1)">
            <summary>
            Connect two objects. If either of them is already connected to other groups those are merged.
            </summary>
            <typeparam name="TGroup">The type of the group to merge the objects in.</typeparam>
            <typeparam name="TObject">The type of the object, usually <see cref="T:VRage.Game.Entity.MyEntity"/> or some entity component.</typeparam>
            <param name="left">The first object in the link.</param>
            <param name="right">The second object in the link.</param>
            <returns>The final group containing both objects.</returns>
        </member>
        <member name="M:VRage.Scene.GroupProxyExtensions.Link``3(VRage.Scene.GroupProxy{``0},``1,``1,``2)">
            <summary>
            Connect two objects. If either of them is already connected to other groups those are merged.
            </summary>
            <typeparam name="TGroup">The type of the group to merge the objects in.</typeparam>
            <typeparam name="TObject">The type of the object, usually <see cref="T:VRage.Game.Entity.MyEntity"/> or some entity component.</typeparam>
            <typeparam name="TLink">The type of the link information used by the group.</typeparam>
            <param name="left">The first object in the link.</param>
            <param name="right">The second object in the link.</param>
            <param name="link">Some optional information about the link.</param>
            <returns>The final group containing both objects.</returns>
        </member>
        <member name="M:VRage.Scene.GroupProxyExtensions.AddLink``3(VRage.Scene.GroupProxy{``0},``1,``1,``2)">
            <summary>
            Connect two objects. If either of them is already connected to other groups those are merged.
            </summary>
            <typeparam name="TGroup">The type of the group to merge the objects in.</typeparam>
            <typeparam name="TObject">The type of the object, usually <see cref="T:VRage.Game.Entity.MyEntity"/> or some entity component.</typeparam>
            <typeparam name="TLink">The type of the link information used by the group.</typeparam>
            <param name="left">The first object in the link.</param>
            <param name="right">The second object in the link.</param>
            <param name="link">Some optional information about the link.</param>
            <returns>The final group containing both objects.</returns>
        </member>
        <member name="M:VRage.Scene.GroupProxyExtensions.Unlink``2(VRage.Scene.GroupProxy{``0},``1,``1)">
            <summary>
            Disconnect two objects on the same group.
            </summary>
            <typeparam name="TGroup"></typeparam>
            <typeparam name="TObject"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <returns>Whether the link existed.</returns>
        </member>
        <member name="M:VRage.Scene.GroupProxyExtensions.RemoveLink``3(VRage.Scene.GroupProxy{``0},``1,``1,``2)">
            <summary>
            Disconnect two objects on the same group.
            </summary>
            <typeparam name="TGroup"></typeparam>
            <typeparam name="TObject"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <returns>Whether the link existed.</returns>
        </member>
        <member name="M:VRage.Scene.GroupProxyExtensions.Disconnect``2(VRage.Scene.GroupProxy{``0},``1)">
            <summary>
            Disconnect an object from it's group.
            </summary>
            <typeparam name="TGroup">The type of the group.</typeparam>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="entity">The object to disconnect from it's group.</param>
            <returns>Whether the link existed.</returns>
        </member>
        <member name="M:VRage.Scene.GroupProxyExtensions.Get``2(VRage.Scene.GroupProxy{``0},``1)">
            <summary>
            Get the group for a given object.
            </summary>
            <typeparam name="TGroup">The type of the group to merge the objects in.</typeparam>
            <typeparam name="TObject">The type of the object, usually <see cref="T:VRage.Game.Entity.MyEntity"/> or some entity component.</typeparam>
            <param name="entity">The object to find the group for.</param>
            <returns>The group where the object is inserted, or null.</returns>
        </member>
        <member name="M:VRage.Scene.GroupProxyExtensions.GetAll``1(VRage.Scene.GroupProxy{``0})">
            <summary>
            Get all groups of a given type.
            </summary>
            <typeparam name="TGroup">The type of the group to merge the objects in.</typeparam>
            <returns>The group where the object is inserted, or null.</returns>
        </member>
        <member name="M:VRage.Scene.GroupProxyExtensions.AreLinked``2(VRage.Scene.GroupProxy{``0},``1,``1)">
            <summary>
            Find if two entities are linked for on the provided group type.
            </summary>
            <typeparam name="TGroup">The type of the group.</typeparam>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="left">First entity on the link.</param>
            /// <param name="right">Second entity on the link.</param>
            <returns>Whether the two objects are linked.</returns>
        </member>
        <member name="M:VRage.Scene.GroupProxyExtensions.AreInSameGroup``2(VRage.Scene.GroupProxy{``0},``1,``1)">
            <summary>
            Find if two entities are on the same group.
            </summary>
            <typeparam name="TGroup">The type of the group.</typeparam>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="left">First entity on the group.</param>
            /// <param name="right">Second entity on the group.</param>
            <returns>Whether the two objects are contained in the same group.</returns>
        </member>
        <member name="T:VRage.Scene.IMyGroupManagerAttribute">
            <summary>
            Description of a group manager attribute.
            </summary>
        </member>
        <member name="T:VRage.Scene.IMyObjectIdentifier">
            <summary>
            Base interface for an identifier for a scene object.
            </summary>
        </member>
        <member name="T:VRage.Scene.IMyObjectIdentifier`2">
            <summary>
            Interface that describes an identifier for a scene object.
            </summary>
        </member>
        <member name="T:VRage.Scene.IMyTieredManager`2">
            <summary>
            Type safe interface used by tiered groups to communicate with the generic manager.
            </summary>
            <typeparam name="TChildComponent"></typeparam>
            <typeparam name="TParentComponent"></typeparam>
        </member>
        <member name="M:VRage.Scene.MyEntityExtensions.GetGroup``1(VRage.Game.Entity.MyEntity)">
            <summary>
            Get the group of a given type the entity belongs to.
            </summary>
            <typeparam name="TGroup">The type of the group.</typeparam>
            <param name="self">The entity.</param>
            <returns>The group the entity belongs to or null if the entity is not on a group.</returns>
        </member>
        <member name="M:VRage.Scene.MyEntityExtensions.GetGroups(VRage.Game.Entity.MyEntity)">
            <summary>
            Get all groups that contain the entity.
            </summary>
            <param name="self">The entity.</param>
            <returns>An enumeration containing all groups the entity is a part of.</returns>
        </member>
        <member name="M:VRage.Scene.MyEntityExtensions.IsInAnyGroup(VRage.Game.Entity.MyEntity)">
            <summary>
            Get all groups that contain the entity.
            </summary>
            <param name="self">The entity.</param>
            <returns>An enumeration containing all groups the entity is a part of.</returns>
        </member>
        <member name="T:VRage.Scene.MyRemapperBase">
            <summary>
            Default scene remapper that utilizes MyEntityIdentifier to generate new Ids.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyRemapperBase.RemapObject(VRage.Scene.SceneObjectTypeId,System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyRemapperBase.AllocateId(VRage.Scene.SceneObjectTypeId)">
            <summary>
            Allocate an id for a scene object.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyRemapperBase.AllocateId(System.String)">
            <summary>
            Allocate a new id for a generic object with the given type.
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyRemapperBase.Clear">
            <summary>
            Clear the contents of this remapper.
            </summary>
        </member>
        <member name="T:VRage.Scene.MyGroupFactory">
            <summary>
            Factory for groups.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyGroupFactory.GetListenerEntityTypes(System.Type)">
            <summary>
            Ge the entity types for each implementation of <see cref="T:VRage.Scene.IMyGroupListener`1"/> in the given listener type.
            </summary>
            <param name="listenerType">The listener type.</param>
            <returns>An enumeration of the entity types supported by the listener.</returns>
        </member>
        <member name="M:VRage.Scene.MyGroupFactory.CreateManager``1">
            <summary>
            Create the group manager for a given group type.
            </summary>
            <typeparam name="TGroup"></typeparam>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyGroupFactory.CreateManager(System.Type)">
            <summary>
            Create the group manager for a given group type.
            </summary>
            <param name="groupType">The type of the group to create a manager for.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyGroupFactory.GetSupportedEntityTypes(System.Type)">
            <summary>
            Ge the entity types for each implementation of <see cref="T:VRage.Scene.IMyGroup`1"/> in the given group type.
            </summary>
            <param name="groupType"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyGroupFactory.GetObjectType(System.Type)">
             <summary>
             Get the object type from the provided group interface.
            
             The interface should be a concrete version of either
             <see cref="T:VRage.Scene.IMyGroup`1"/>, <see cref="T:VRage.Scene.IMyGroup`2"/>, or<see cref="T:VRage.Scene.IMyGroupMultiLink`2"/>.
             </summary>
             <param name="groupInterfaceType"></param>
             <returns></returns>
        </member>
        <member name="T:VRage.Scene.IMyGroup`1">
            <summary>
            Interface describing a group.
            </summary>
            <typeparam name="TEntity">Type of the group node.</typeparam>
        </member>
        <member name="P:VRage.Scene.IMyGroup`1.EntityCount">
            <summary>
            The number of objects in this group.
            </summary>
        </member>
        <member name="P:VRage.Scene.IMyGroup`1.LinkCount">
            <summary>
            The number of links in this group.
            </summary>
        </member>
        <member name="P:VRage.Scene.IMyGroup`1.Entities">
            <summary>
            Collection of all entities in this group.
            </summary>
        </member>
        <member name="P:VRage.Scene.IMyGroup`1.Edges">
            <summary>
            An enumeration of edges representing the links on the graph.
            </summary>
        </member>
        <member name="M:VRage.Scene.IMyGroup`1.AddEntity(`0)">
            <summary>
            Add a link between two entities.
            </summary>
            <remarks>
            This can cause this group to merge with another.
            </remarks>
            <param name="entity">Entity to add.</param>
        </member>
        <member name="M:VRage.Scene.IMyGroup`1.RemoveEntity(`0)">
            <summary>
            Remove a link between entities, this can cause this group to split.
            </summary>
            <param name="entity">The entity to remove.</param>
        </member>
        <member name="M:VRage.Scene.IMyGroup`1.AddLink(`0,`0)">
            <summary>
            Add a link between two entities.
            </summary>
            <remarks>
            This can cause this group to merge with another.
            </remarks>
            <param name="left">First entity on the link.</param>
            <param name="right">Second entity on the link.</param>
        </member>
        <member name="M:VRage.Scene.IMyGroup`1.RemoveLink(`0,`0)">
            <summary>
            Remove a link between entities, this can cause this group to split.
            </summary>
            <param name="left">First entity on the link.</param>
            <param name="right">Second entity on the link.</param>
        </member>
        <member name="M:VRage.Scene.IMyGroup`1.Contains(`0)">
            <summary>
            Whether a given entity is contained in this group.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.IMyGroup`1.Contains(`0,`0)">
            <summary>
            Whether a given link is contained in this group.
            </summary>
            <param name="left">First entity on the link.</param>
            <param name="right">Second entity on the link.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.IMyGroup`1.GetEntityId(`0)">
            <summary>
            Retrieve a MyEntity from the abstract entity argument.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.IMyGroup`1.GetEntity(`0)">
            <summary>
            Retrieve a MyEntity from the abstract entity argument.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.IMyGroup`1.GetSyncDependency(`0)">
            <summary>
            Get the appropriate synchronization dependency for a given vertex on the graph.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.IMyGroup`1.GetEntity(VRage.Scene.EntityId)">
            <summary>
            Get the entity represented by the given id.
            </summary>
            <param name="entityId">The entity id.</param>
            <returns>The entity object represented by that id.</returns>
        </member>
        <member name="M:VRage.Scene.IMyGroup`1.GetNeighbors(`0)">
            <summary>
            Get a collection of all entities directly connected to <paramref name="entity"/>.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:VRage.Scene.IMyGroup`2">
            <summary>
            Interface describing a group that accepts data on each link.
            </summary>
        </member>
        <member name="M:VRage.Scene.IMyGroup`2.AddLink(`0,`0,`1)">
            <summary>
            Add a link between two entities already in this group.
            </summary>
            <param name="left">First entity on the link.</param>
            <param name="right">Second entity on the link.</param>
            <param name="link">Link data.</param>
        </member>
        <member name="M:VRage.Scene.IMyGroup`2.SetLinkData(`0,`0,`1)">
            <summary>
            Set the link data for a link already in this group.
            </summary>
            <param name="left">First entity on the link.</param>
            <param name="right">Second entity on the link.</param>
            <param name="link"></param>
        </member>
        <member name="M:VRage.Scene.IMyGroup`2.TryGetLinkData(`0,`0,`1@)">
            <summary>
            Try to fetch the data for two entities on the graph.
            </summary>
            <param name="left">First entity on the link.</param>
            <param name="right">Second entity on the link.</param>
            <param name="link">The link data or <c>default(TLink)</c> if not found.</param>
            <returns>True if both entities were linked in this group, false otherwise.</returns>
        </member>
        <member name="T:VRage.Scene.IMyGroupMultiLink`2">
            <summary>
            Interface describing a group that accepts data on each link.
            </summary>
        </member>
        <member name="M:VRage.Scene.IMyGroupMultiLink`2.AddLink(`0,`0,`1)">
            <summary>
            Add a link between two entities already in this group.
            </summary>
            <param name="left">First entity on the link.</param>
            <param name="right">Second entity on the link.</param>
            <param name="link">Link data.</param>
        </member>
        <member name="M:VRage.Scene.IMyGroupMultiLink`2.RemoveLink(`0,`0,`1)">
            <summary>
            Remove a link with given data.
            </summary>
            <param name="left">First entity on the link.</param>
            <param name="right">Second entity on the link.</param>
            <param name="link">The link to remove.</param>
        </member>
        <member name="M:VRage.Scene.IMyGroupMultiLink`2.ContainsLink(`0,`0,`1)">
            <summary>
            Find if two entities are linked with the given link data.
            </summary>
            <param name="left">First entity on the link.</param>
            <param name="right">Second entity on the link.</param>
            <param name="link">The link.</param>
            <returns>True if both entities were linked in this group, false otherwise.</returns>
        </member>
        <member name="M:VRage.Scene.IMyGroupMultiLink`2.GetLinks(`0,`0)">
            <summary>
            Find all links between two entities in this group.
            </summary>
            <param name="left">First entity on the link.</param>
            <param name="right">Second entity on the link.</param>
            <returns>An enumeration of all links between the two entities.</returns>
        </member>
        <member name="T:VRage.Scene.IMyGroupNodeComponent`1">
            <summary>
            Interface describing a component that represents a node in a graph.
            </summary>
            <typeparam name="TGroup"></typeparam>
        </member>
        <member name="T:VRage.Scene.MyComponentGroup`1">
            <summary>
            Base class for groups with entity components as nodes.
            </summary>
            <typeparam name="TComponent">Type of the component on this group.</typeparam>
        </member>
        <member name="F:VRage.Scene.MyComponentGroup`1.ComponentMap">
            <summary>
            Mapping of member entities to components in the group.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyComponentGroup`1.RemoveEntity(VRage.Game.Entity.MyEntity)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyComponentGroup`1.AddLink(VRage.Game.Entity.MyEntity,VRage.Game.Entity.MyEntity)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyComponentGroup`1.RemoveLink(VRage.Game.Entity.MyEntity,VRage.Game.Entity.MyEntity)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyComponentGroup`1.OnEntityAdded(`0)">
            <summary>
            Invoked right after an component has been added to this group.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:VRage.Scene.MyComponentGroup`1.OnEntityRemoved(`0)">
            <summary>
            Invoked right before an component is removed from this group.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:VRage.Scene.MyComponentGroup`1.OnLinkAdded(`0,`0)">
            <summary>
            Called right after a new link is added to this group.
            </summary>
            <param name="left">First component on the link.</param>
            <param name="right">Second component on the link.</param>
        </member>
        <member name="M:VRage.Scene.MyComponentGroup`1.OnLinkRemoved(`0,`0)">
            <summary>
            Called right before a link would be removed from this group.
            </summary>
            <param name="left">First component on the link.</param>
            <param name="right">Second component on the link.</param>
        </member>
        <member name="M:VRage.Scene.MyComponentGroup`1.AddEntity(`0)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyComponentGroup`1.RemoveEntity(`0)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyComponentGroup`1.AddLink(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyComponentGroup`1.RemoveLink(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyComponentGroup`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyComponentGroup`1.Contains(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyComponentGroup`1.GetEntityId(`0)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyComponentGroup`1.GetEntity(`0)">
            <inheritdoc />
        </member>
        <member name="P:VRage.Scene.MyComponentGroup`1.VRage#Scene#IMyGroup{TComponent}#Entities">
            <inheritdoc />
        </member>
        <member name="T:VRage.Scene.MyComponentGroup`2">
            <summary>
            Base class for groups with entity components as nodes and data for each link.
            </summary>
            <typeparam name="TComponent">Type of the component on this group.</typeparam>
            <typeparam name="TLink">Type of the link data.</typeparam>
        </member>
        <member name="M:VRage.Scene.MyComponentGroup`2.OnLinkAdded(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyComponentGroup`2.OnLinkAdded(`0,`0,`1)">
            <summary>
            Called right after a new link is added to this group.
            </summary>
            <param name="left">First component on the link.</param>
            <param name="right">Second component on the link.</param>
            <param name="link">Link data.</param>
        </member>
        <member name="M:VRage.Scene.MyComponentGroup`2.AddLink(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyComponentGroup`2.AddLink(`0,`0,`1)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyComponentGroup`2.SetLinkData(`0,`0,`1)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyComponentGroup`2.TryGetLinkData(`0,`0,`1@)">
            <inheritdoc />
        </member>
        <member name="T:VRage.Scene.MyComponentGroupMultiLink`2">
            <summary>
            Base class for groups with entity components as nodes and data for each link.
            </summary>
            <typeparam name="TComponent">Type of the component on this group.</typeparam>
            <typeparam name="TLink">Type of the link data.</typeparam>
        </member>
        <member name="F:VRage.Scene.MyComponentGroupMultiLink`2.ComponentMap">
            <summary>
            Mapping of member entities to components in the group.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyComponentGroupMultiLink`2.OnEntityAdded(`0)">
            <summary>
            Invoked right after an component has been added to this group.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:VRage.Scene.MyComponentGroupMultiLink`2.OnEntityRemoved(`0)">
            <summary>
            Invoked right before an component is removed from this group.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:VRage.Scene.MyComponentGroupMultiLink`2.OnLinkAdded(`0,`0,`1)">
            <summary>
            Called right after a new link is added to this group.
            </summary>
            <param name="left">First component on the link.</param>
            <param name="right">Second component on the link.</param>
            <param name="link">Link data.</param>
        </member>
        <member name="M:VRage.Scene.MyComponentGroupMultiLink`2.OnLinkRemoved(`0,`0)">
            <summary>
            Called right before a link would be removed from this group.
            </summary>
            <param name="left">First component on the link.</param>
            <param name="right">Second component on the link.</param>
        </member>
        <member name="M:VRage.Scene.MyComponentGroupMultiLink`2.OnLinkRemoved(`0,`0,`1)">
            <summary>
            Called right before a link would be removed from this group.
            </summary>
            <param name="left">First component on the link.</param>
            <param name="right">Second component on the link.</param>
            <param name="link">The link data.</param>
        </member>
        <member name="M:VRage.Scene.MyComponentGroupMultiLink`2.GetSyncDependency(`0)">
            <inheritdoc />
        </member>
        <member name="T:VRage.Scene.MyGroup">
            <summary>
            Base class for entity groups.
            </summary>
        </member>
        <member name="P:VRage.Scene.MyGroup.Graph">
            <summary>
            Graph containing the entities and links of this group.
            </summary>
        </member>
        <member name="F:VRage.Scene.MyGroup.m_soFlags">
            <summary>
            Scene flags for this object.
            </summary>
        </member>
        <member name="F:VRage.Scene.MyGroup.m_groupFlags">
            <summary>
            Group flags, cached from group attribute.
            </summary>
        </member>
        <member name="P:VRage.Scene.MyGroup.Factory">
            <summary>
            Group factory.
            </summary>
        </member>
        <member name="P:VRage.Scene.MyGroup.Id">
            <summary>
            Session wide unique identifier for this group.
            </summary>
        </member>
        <member name="P:VRage.Scene.MyGroup.Scene">
            <summary>
            Scene where this group is inserted into.
            Groups never exist outside of a scene.
            </summary>
        </member>
        <member name="P:VRage.Scene.MyGroup.Save">
            <summary>
            Whether this group is persisted with the world.
            Default always returns false.
            </summary>
        </member>
        <member name="P:VRage.Scene.MyGroup.Active">
            <summary>
            Whether this group is persisted with the world.
            Default always returns false.
            </summary>
        </member>
        <member name="P:VRage.Scene.MyGroup.Sync">
            <summary>
            Whether this group synchronizes over the network.
            </summary>
        </member>
        <member name="P:VRage.Scene.MyGroup.AlwaysConnected">
            <summary>
            Whether this group does not allow disconnected components to be on the same group.
            </summary>
            <remarks>
            This is set via the group Flags in <see cref="T:VRage.Scene.MyGroupAttribute"/>.
            </remarks>
        </member>
        <member name="P:VRage.Scene.MyGroup.Entities">
            <summary>
            Collection of all entities in this group.
            </summary>
        </member>
        <member name="P:VRage.Scene.MyGroup.Scheduler">
            <inheritdoc />
        </member>
        <member name="P:VRage.Scene.MyGroup.Container">
            <inheritdoc />
        </member>
        <member name="P:VRage.Scene.MyGroup.IsAuthority">
            <summary>
            Whether this instance should maintain it's invariants on it own.
            </summary>
            <remarks>
            This is true if the instance is not synchronized, or if the instance is but the current environment is an authoritative application server.
            </remarks>
        </member>
        <member name="M:VRage.Scene.MyGroup.Serialize">
             <summary>
             Serialize the data contained in this group.
            
             Entities must be referenced by id, as they are persisted separately.
             </summary>
             <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyGroup.Deserialize(VRage.ObjectBuilders.Scene.MyObjectBuilder_Group)">
            <summary>
            Deserialize the contents of this group. Invoked after each referenced entity is loaded.
            </summary>
            <param name="groupData"></param>
        </member>
        <member name="M:VRage.Scene.MyGroup.OnEntityAdded(VRage.Game.Entity.MyEntity)">
            <summary>
            Invoked right after an entity has been added to this group.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:VRage.Scene.MyGroup.OnEntityRemoved(VRage.Game.Entity.MyEntity)">
            <summary>
            Invoked right before an entity is removed from this group.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:VRage.Scene.MyGroup.OnLinkAdded(VRage.Game.Entity.MyEntity,VRage.Game.Entity.MyEntity)">
            <summary>
            Called right after a new link is added to this group.
            </summary>
            <param name="left">First entity on the link.</param>
            <param name="right">Second entity on the link.</param>
        </member>
        <member name="M:VRage.Scene.MyGroup.OnLinkRemoved(VRage.Game.Entity.MyEntity,VRage.Game.Entity.MyEntity)">
            <summary>
            Called right before a link would be removed from this group.
            </summary>
            <param name="left">First entity on the link.</param>
            <param name="right">Second entity on the link.</param>
        </member>
        <member name="M:VRage.Scene.MyGroup.OnMerge(VRage.Scene.MyGroup)">
            <summary>
            Invoked right after all contents of target group have been merged into this, and before that group is removed from scene.
            
            No Add/Remove events are fired during merge. All data is transferred directly and any additional work must be performed here.
            </summary>
            <param name="mergeFrom">The group that is being merged into this.</param>
        </member>
        <member name="M:VRage.Scene.MyGroup.OnSplit(VRage.Scene.MyGroup)">
            <summary>
            Invoked right after this group is split.
            
            No Add/Remove events are fired during split. All data is transferred directly and any additional work must be performed here.
            </summary>
            <param name="split"></param>
        </member>
        <member name="M:VRage.Scene.MyGroup.OnEntitySplit(VRage.Game.Entity.MyEntity)">
            <summary>
            Invoked right after a single entity is split from this group.
            </summary>
            <param name="split"></param>
        </member>
        <member name="M:VRage.Scene.MyGroup.OnActivate">
            <summary>
            Event invoked as the group finishes loading and updating starts.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyGroup.OnDeactivate">
            <summary>
            Event invoked right before the group is destroyed.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyGroup.OnDestroy">
            <summary>
            Event invoked right before the group is destroyed.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyGroup.IsMoreRelevantThan(VRage.Scene.MyGroup)">
             <summary>
             Whether this group is more relevant than the target group.
            
             This is used for instance when groups are being merged, to decide which instance will be preserved.
             </summary>
             <remarks>
             This comparison does not need to be transitive.
            
             The default implementation selects the graph with the most edges.
             </remarks>
             <param name="group">The group to compare against.</param>
             <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyGroup.CanBeSingle(VRage.Game.Entity.MyEntity)">
            <summary>
            Whether the given entity can be alone on a group.
            </summary>
            <param name="entity">The given entity.</param>
            <remarks>
            The default implementation of this method returns false if the group is
            marked <see cref="F:VRage.Scene.GroupFlags.NoSingleVertex"/>, and false otherwise.
            </remarks>
        </member>
        <member name="M:VRage.Scene.MyGroup.#ctor">
            <summary>
            Base constructor for a group.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyGroup.Init(VRage.Scene.GroupId,VRage.Scene.MyScene)">
            <summary>
            Initialize this group.
            </summary>
            <param name="id"></param>
            <param name="scene"></param>
        </member>
        <member name="M:VRage.Scene.MyGroup.Activate">
            <summary>
            Mark this group as active.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyGroup.Destroy">
            <summary>
            Remove this group from scene and destroy it.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyGroup.DestroyInternal">
            <summary>
            Remove this group from scene.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyGroup.AddEntity(VRage.Game.Entity.MyEntity)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyGroup.RemoveEntity(VRage.Game.Entity.MyEntity)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyGroup.AddLink(VRage.Game.Entity.MyEntity,VRage.Game.Entity.MyEntity)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyGroup.RemoveLink(VRage.Game.Entity.MyEntity,VRage.Game.Entity.MyEntity)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyGroup.Merge(VRage.Scene.MyGroup)">
            <summary>
            Merge this and the target group.
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:VRage.Scene.MyGroup.Contains(VRage.Game.Entity.MyEntity)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyGroup.Contains(VRage.Game.Entity.MyEntity,VRage.Game.Entity.MyEntity)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyGroup.GetNeighbors(VRage.Game.Entity.MyEntity)">
            <summary>
            Get the entities linked with a member of this group.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyGroup.GetEdges(VRage.Game.Entity.MyEntity)">
            <summary>
            Get the entities linked with a member of this group.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="P:VRage.Scene.MyGroup.VRage#Scene#IMyGroup{VRage#Game#Entity#MyEntity}#Entities">
            <inheritdoc/>
        </member>
        <member name="P:VRage.Scene.MyGroup.Edges">
            <summary>
            Collection of all edges in this group.
            </summary>
        </member>
        <member name="P:VRage.Scene.MyGroup.EdgeEntities">
            <summary>
            Collection of all edges in this group.
            </summary>
        </member>
        <member name="P:VRage.Scene.MyGroup.EntityCount">
            <inheritdoc />
        </member>
        <member name="P:VRage.Scene.MyGroup.LinkCount">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyGroup.GetWorldBounds">
            <summary>
            Get the world bounds of each entity in this group.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyGroup.VRage#Collections#Graph#IGraphSplitHandler{VRage#Game#Entity#MyEntity}#CreateSplit">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyGroup.VRage#Collections#Graph#IGraphSplitHandler{VRage#Game#Entity#MyEntity}#HandleSplitGraph(VRage.Collections.Graph.IGraph{VRage.Game.Entity.MyEntity})">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyGroup.VRage#Collections#Graph#IGraphSplitHandler{VRage#Game#Entity#MyEntity}#HandleSplitVertex(VRage.Game.Entity.MyEntity)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyGroup.RemoveSingleVertex">
            <summary>
            Invoked when the graph is always connected but has a single vertex.
            </summary>
        </member>
        <member name="P:VRage.Scene.MyGroup.Synchronizes">
            <summary>
            Whether this group instance should fire synchronization events.
            </summary>
            <remarks>
            This is similar to <see cref="P:VRage.Scene.MyGroup.IsAuthority"/>, except that member is also true when the instance is not synchronized at all,
            whereas this member is true if the instance is synchronized and the current context is an authoritative application server.
            </remarks>
        </member>
        <member name="M:VRage.Scene.MyGroup.SerializeGraph(VRage.Scene.MyGroup.GroupGraph,System.UInt64[]@,System.UInt64[]@)">
            <summary>
            Serialize the graph for sending over the network.
            </summary>
            <param name="graph"></param>
            <param name="vertices"></param>
            <param name="edges"></param>
        </member>
        <member name="M:VRage.Scene.MyGroup.DeserializeGraph(System.UInt64[],System.UInt64[])">
            <summary>
            Deserialize server data.
            </summary>
            <param name="vertices"></param>
            <param name="edges"></param>
            <returns></returns>
        </member>
        <member name="P:VRage.Scene.MyGroup.DefinitionId">
            <inheritdoc />
        </member>
        <member name="T:VRage.Scene.MyGroup.Edge">
            <summary>
            Edge key for members of a group.
            </summary>
        </member>
        <member name="T:VRage.Scene.MyGroup.GroupGraph">
            <summary>
            Graph structured intended to be used by the MyGroup class.
            </summary>
        </member>
        <member name="T:VRage.Scene.MyGroup`1">
            <summary>
            Base class for groups that maintain some data attached to each edge.
            </summary>
            <remarks>
            This base class does not track link data internally.
            </remarks>
            <typeparam name="TLink">The type of the edge data.</typeparam>
        </member>
        <member name="M:VRage.Scene.MyGroup`1.OnLinkAdded(VRage.Game.Entity.MyEntity,VRage.Game.Entity.MyEntity)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyGroup`1.OnLinkAdded(VRage.Game.Entity.MyEntity,VRage.Game.Entity.MyEntity,`0)">
            <summary>
            Invoked when a new link is added.
            </summary>
            <param name="left">First entity on the link.</param>
            <param name="right">Second entity on the link.</param>
            <param name="link">Any user provided data about this link.</param>
        </member>
        <member name="M:VRage.Scene.MyGroup`1.AddLink(VRage.Game.Entity.MyEntity,VRage.Game.Entity.MyEntity)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyGroup`1.AddLink(VRage.Game.Entity.MyEntity,VRage.Game.Entity.MyEntity,`0)">
            <summary>
            Add a link between two entities already in this group.
            </summary>
            <param name="left">First entity on the link.</param>
            <param name="right">Second entity on the link.</param>
            <param name="link"></param>
        </member>
        <member name="M:VRage.Scene.MyGroup`1.SetLinkData(VRage.Game.Entity.MyEntity,VRage.Game.Entity.MyEntity,`0)">
            <summary>
            Set the link data for a link already in this group.
            </summary>
            <param name="left">First entity on the link.</param>
            <param name="right">Second entity on the link.</param>
            <param name="link"></param>
        </member>
        <member name="M:VRage.Scene.MyGroup`1.TryGetLinkData(VRage.Game.Entity.MyEntity,VRage.Game.Entity.MyEntity,`0@)">
            <summary>
            Try to fetch the data for two entities on the graph.
            </summary>
            <param name="left">First entity on the link.</param>
            <param name="right">Second entity on the link.</param>
            <param name="link">The link data or <c>default(TLink)</c> if not found.</param>
            <returns>True if both entities were linked in this group, false otherwise.</returns>
        </member>
        <member name="T:VRage.Scene.MyGroupAttribute">
            <summary>
            Attribute marking entity group classes.
            </summary>
        </member>
        <member name="T:VRage.Scene.MyGroupFactoryExtensions">
            <summary>
            Extension methods for the group factory.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyGroupFactoryExtensions.GetFlags``1(VRage.Factory.MyObjectFactory{VRage.Scene.MyGroupAttribute,VRage.Scene.MyGroup})">
            <summary>
            Get the flags for a given group type.
            </summary>
            <remarks>
            If the group is not indexed 0(no flags set) is returned.
            </remarks>
            <typeparam name="TGroup">The group type.</typeparam>
            <param name="self">The group factory.</param>
            <returns>The group flags.</returns>
        </member>
        <member name="M:VRage.Scene.MyGroupFactoryExtensions.GetFlags(VRage.Factory.MyObjectFactory{VRage.Scene.MyGroupAttribute,VRage.Scene.MyGroup},VRage.Scene.MyGroup)">
            <summary>
            Get the flags for a given group.
            </summary>
            <remarks>
            If the group is not indexed 0(no flags set) is returned.
            </remarks>
            <param name="group">The group instance.</param>
            <param name="self">The group factory.</param>
            <returns>The group flags.</returns>
        </member>
        <member name="T:VRage.Scene.MyGroupListenerAttribute">
            <summary>
            Attribute that sets the annotated class as a listener for the provided group.
            </summary>
        </member>
        <member name="T:VRage.Scene.MyGroupManager">
            <summary>
            Abstract base for a group manager.
            </summary>
            <remarks>
            This base class should only be used internally, please extend <see cref="T:VRage.Scene.MyGroupManager`1"/> instead.
            </remarks>
        </member>
        <member name="M:VRage.Scene.MyGroupManager.Disconnect(VRage.Game.Entity.MyEntity)">
            <summary>
            Used by the scene to disconnect entities from their groups when they are removed.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="T:VRage.Scene.MyGroupManager`1">
             <summary>
             Base class for a group manager.
             </summary>
             <remarks>
             Group managers can only be used for the exact group type they take as a generic argument.
            
             To have a default manager for a given group hierarchy specify a generic definition in
             the <see cref="T:VRage.Scene.MyGroupManagerAttribute"/>, the manager type will be automatically
             constructed with the child class as argument.
             </remarks>
             <typeparam name="TGroup">The type of the group managed by this class.</typeparam>
        </member>
        <member name="F:VRage.Scene.MyGroupManager`1.m_listenersPerEntityType">
            <summary>
            Dictionary containing per entity type lists oif listeners.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyGroupManager`1.GetOrCreateListenerList(System.Type)">
            <summary>
            Get or create the generic list of listeners for a given entity type.
            </summary>
            <param name="entityType">The entity type the listener is defined for.</param>
            <returns>A list of type List&lt;IMyGroupListener&lt;entityType&gt;&gt;.</returns>
        </member>
        <member name="M:VRage.Scene.MyGroupManager`1.GetListeners``1">
            <summary>
            Get a list of listeners specified for this group and the provided entity type.
            </summary>
            <typeparam name="TEntity">The type of the entity the listeners are specified for.</typeparam>
            <returns>The list of listeners if any.</returns>
        </member>
        <member name="T:VRage.Scene.MyGroupManagerAttribute">
            <summary>
            Attribute used to define a group manager for a given class.
            </summary>
        </member>
        <member name="T:VRage.Scene.MyGroupMultiLink`1">
            <summary>
            Base class for groups that maintain some data attached to each edge.
            </summary>
            <typeparam name="TLink">The type of the edge data.</typeparam>
        </member>
        <member name="F:VRage.Scene.MyGroupMultiLink`1.LinkData">
            <summary>
            Dictionary containing all stored information about the group links.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyGroupMultiLink`1.OnLinkAdded(VRage.Game.Entity.MyEntity,VRage.Game.Entity.MyEntity,`0)">
            <summary>
            Invoked when a new link is added.
            </summary>
            <param name="left">First entity on the link.</param>
            <param name="right">Second entity on the link.</param>
            <param name="link">Any user provided data about this link.</param>
        </member>
        <member name="M:VRage.Scene.MyGroupMultiLink`1.OnLinkRemoved(VRage.Game.Entity.MyEntity,VRage.Game.Entity.MyEntity,`0)">
            <summary>
            Invoked when a new link is added.
            </summary>
            <param name="left">First entity on the link.</param>
            <param name="right">Second entity on the link.</param>
            <param name="link">Any user provided data about this link.</param>
        </member>
        <member name="M:VRage.Scene.MyGroupMultiLink`1.SerializeLinkData(VRage.ObjectBuilders.Scene.MyObjectBuilder_Group)">
            <summary>
            Serializer for link data. Should be replaced if the object builder for this group does not inherit from <see cref="T:VRage.ObjectBuilders.Scene.MyObjectBuilder_GroupMultiLink`1"/>.
            </summary>
            <param name="groupData">Object to hold serialized data.</param>
        </member>
        <member name="M:VRage.Scene.MyGroupMultiLink`1.DeserializeLinkData(VRage.ObjectBuilders.Scene.MyObjectBuilder_Group)">
            <summary>
            De-serializer for link data. Should be replaced if the object builder for this group does not inherit from <see cref="T:VRage.ObjectBuilders.Scene.MyObjectBuilder_GroupMultiLink`1"/>.
            </summary>
            <param name="groupData">Object that holds serialized data.</param>
        </member>
        <member name="M:VRage.Scene.MyGroupMultiLink`1.AddLink(VRage.Game.Entity.MyEntity,VRage.Game.Entity.MyEntity)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyGroupMultiLink`1.RemoveLink(VRage.Game.Entity.MyEntity,VRage.Game.Entity.MyEntity)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyGroupMultiLink`1.Serialize">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyGroupMultiLink`1.Deserialize(VRage.ObjectBuilders.Scene.MyObjectBuilder_Group)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyGroupMultiLink`1.OnMerge(VRage.Scene.MyGroup)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyGroupMultiLink`1.OnSplit(VRage.Scene.MyGroup)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyGroupMultiLink`1.AddLink(VRage.Game.Entity.MyEntity,VRage.Game.Entity.MyEntity,`0)">
            <summary>
            Add a link between two entities already in this group.
            </summary>
            <param name="left">First entity on the link.</param>
            <param name="right">Second entity on the link.</param>
            <param name="link"></param>
        </member>
        <member name="T:VRage.Scene.MyGroupNodeComponent`1">
            <summary>
            Base class for entity components representing group nodes.
            </summary>
            <typeparam name="TGroup"></typeparam>
        </member>
        <member name="F:VRage.Scene.MyGroupNodeComponent`1.Groups">
            <summary>
            Group proxy for this component.
            </summary>
        </member>
        <member name="T:VRage.Scene.MyGroupNodeComponentExtensions">
            <summary>
            Component specific methods to populate group proxy.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyGroupNodeComponentExtensions.Groups``1(VRage.Scene.IMyGroupNodeComponent{``0})">
            <summary>
            Get a group proxy for this component.
            </summary>
            <typeparam name="TGroup">The type of the group.</typeparam>
            <returns>The group proxy for this component's group type.</returns>
        </member>
        <member name="M:VRage.Scene.MyGroupNodeComponentExtensions.GetGroup``1(VRage.Scene.IMyGroupNodeComponent{``0})">
            <summary>
            Get a group proxy for this component.
            </summary>
            <typeparam name="TGroup">The type of the group.</typeparam>
            <returns>The group proxy for this component's group type.</returns>
        </member>
        <member name="T:VRage.Scene.MyGroupHelpers">
             <summary>
             Helper class that simplifies the serialization of groups with per edge data.
            
             The methods of this class can be used if a conversion is needed between the runtime and serialized types of the edge data.
             </summary>
        </member>
        <member name="M:VRage.Scene.MyGroupHelpers.Merge``2(VRage.Scene.IMyGroup{``1},System.Collections.Generic.IDictionary{VRage.Scene.MyGroup.Edge,``0},System.Collections.Generic.IDictionary{VRage.Scene.MyGroup.Edge,``0},System.Boolean)">
            <summary>
            Merge a dictionary containing per edge data.
            </summary>
            <typeparam name="TValue">The type of the data stored in the dictionary.</typeparam>
            <typeparam name="TEntity">The type of the entity the group indexes.</typeparam>
            <param name="mergeFrom">The group being merge into the current.</param>
            <param name="destination">The dictionary in the current group.</param>
            <param name="source">The dictionary in the <paramref name="mergeFrom"/> group.</param>
        </member>
        <member name="M:VRage.Scene.MyGroupHelpers.Split``2(VRage.Scene.IMyGroup{``1},System.Collections.Generic.IDictionary{VRage.Scene.MyGroup.Edge,``0},System.Collections.Generic.IDictionary{VRage.Scene.MyGroup.Edge,``0},System.Boolean)">
            <summary>
            Split a dictionary containing per edge data.
            </summary>
            <typeparam name="TValue">The type of the data stored in the dictionary.</typeparam>
            <typeparam name="TEntity">The type of the entity the group indexes.</typeparam>
            <param name="split">The new group containing split data.</param>
            <param name="destination">The dictionary in the split group.</param>
            <param name="source">The dictionary in the original group.</param>
        </member>
        <member name="M:VRage.Scene.MyGroupHelpers.Merge``2(System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IDictionary{``1,``0},System.Collections.Generic.IDictionary{``1,``0})">
            <summary>
            Merge a dictionary containing per entity data.
            </summary>
            <typeparam name="TValue">The type of the data stored in the dictionary.</typeparam>
            <typeparam name="TEntity">The type of the entity the group indexes.</typeparam>
            <param name="mergeFrom">The group being merge into the current.</param>
            <param name="destination">The dictionary in the current group.</param>
            <param name="source">The dictionary in the <paramref name="mergeFrom"/> group.</param>
        </member>
        <member name="M:VRage.Scene.MyGroupHelpers.Split``2(System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IDictionary{``1,``0},System.Collections.Generic.IDictionary{``1,``0})">
            <summary>
            Split a dictionary containing per entity data.
            </summary>
            <typeparam name="TValue">The type of the data stored in the dictionary.</typeparam>
            <typeparam name="TEntity">The type of the entity the group indexes.</typeparam>
            <param name="split">The new group containing split data.</param>
            <param name="destination">The dictionary in the split group.</param>
            <param name="source">The dictionary in the original group.</param>
        </member>
        <member name="M:VRage.Scene.MyGroupHelpers.Merge``2(VRage.Scene.IMyGroup{``1},System.Collections.Generic.IDictionary{``1,``0},System.Collections.Generic.IDictionary{``1,``0})">
            <summary>
            Merge a dictionary containing per entity data.
            </summary>
            <typeparam name="TValue">The type of the data stored in the dictionary.</typeparam>
            <typeparam name="TEntity">The type of the entity the group indexes.</typeparam>
            <param name="mergeFrom">The group being merge into the current.</param>
            <param name="destination">The dictionary in the current group.</param>
            <param name="source">The dictionary in the <paramref name="mergeFrom"/> group.</param>
        </member>
        <member name="M:VRage.Scene.MyGroupHelpers.Split``2(VRage.Scene.IMyGroup{``1},System.Collections.Generic.IDictionary{``1,``0},System.Collections.Generic.IDictionary{``1,``0})">
            <summary>
            Split a dictionary containing per entity data.
            </summary>
            <typeparam name="TValue">The type of the data stored in the dictionary.</typeparam>
            <typeparam name="TEntity">The type of the entity the group indexes.</typeparam>
            <param name="split">The new group containing split data.</param>
            <param name="destination">The dictionary in the split group.</param>
            <param name="source">The dictionary in the original group.</param>
        </member>
        <member name="M:VRage.Scene.MyGroupHelpers.DeserializeMultiLinkData``2(VRage.Scene.MyGroupMultiLink{``0},VRage.ObjectBuilders.Scene.MyObjectBuilder_GroupMultiLink{``1},System.Func{``1,``0})">
            <summary>
            De-serialization helper for edge data.
            </summary>
            <typeparam name="TSerializedLink"></typeparam>
            <typeparam name="TLink"></typeparam>
            <param name="group"></param>
            <param name="groupData"></param>
            <param name="convert"></param>
        </member>
        <member name="M:VRage.Scene.MyGroupHelpers.SerializeMultiLinkData``2(VRage.Scene.MyGroupMultiLink{``0},VRage.ObjectBuilders.Scene.MyObjectBuilder_GroupMultiLink{``1},System.Func{``0,``1})">
            <summary>
            Serialization helper for edge data.
            </summary>
            <typeparam name="TSerializedLink"></typeparam>
            <typeparam name="TLink"></typeparam>
            <param name="group"></param>
            <param name="groupData"></param>
            <param name="convert"></param>
        </member>
        <member name="T:VRage.Scene.MyGroupSynchronizationExtensions">
             <summary>
             Helper class containing the extension methods used to perform the post-replication synchronization of groups.
             </summary>
             <remarks>
             This class contains extension methods and RPCs used to synchronize group changes on the level of the basic group operations:
               * AddEntity
               * RemoveEntity
               * AddLink
               * RemoveLink
               * AddDataLink
               * AddMultiLink
               * RemoveMultiLink
               * Merge
            
             The <emph>Split</emph> operation is handled by the group directly.
             </remarks>
        </member>
        <member name="M:VRage.Scene.MyGroupSynchronizationExtensions.AddEntityClient(VRage.Scene.MyGroup,VRage.Network.TypeId,VRage.Scene.IMyObjectIdentifier)">
            <summary>
            RPC for the AddEntity primitive operation.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyGroupSynchronizationExtensions.RemoveEntityClient(VRage.Scene.MyGroup,VRage.Network.TypeId,VRage.Scene.IMyObjectIdentifier)">
            <summary>
            RPC for the RemoveEntity primitive operation.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyGroupSynchronizationExtensions.AddLinkClient(VRage.Scene.MyGroup,VRage.Network.TypeId,VRage.Scene.IMyObjectIdentifier,VRage.Scene.IMyObjectIdentifier)">
            <summary>
            RPC for the AddLink primitive operation.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyGroupSynchronizationExtensions.RemoveLinkClient(VRage.Scene.MyGroup,VRage.Network.TypeId,VRage.Scene.IMyObjectIdentifier,VRage.Scene.IMyObjectIdentifier)">
            <summary>
            RPC for the RemoveLink primitive operation.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyGroupSynchronizationExtensions.AddDataLinkClient(VRage.Scene.MyGroup,VRage.Network.TypeId,VRage.Scene.IMyObjectIdentifier,VRage.Scene.IMyObjectIdentifier,System.Object)">
            <summary>
            RPC for the AddDataLink primitive operation.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyGroupSynchronizationExtensions.AddMultiLinkClient(VRage.Scene.MyGroup,VRage.Network.TypeId,VRage.Scene.IMyObjectIdentifier,VRage.Scene.IMyObjectIdentifier,System.Object)">
            <summary>
            RPC for the AddMultiLink primitive operation.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyGroupSynchronizationExtensions.RemoveMultiLinkClient(VRage.Scene.MyGroup,VRage.Network.TypeId,VRage.Scene.IMyObjectIdentifier,VRage.Scene.IMyObjectIdentifier,System.Object)">
            <summary>
            RPC for the RemoveMultiLink primitive operation.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyGroupSynchronizationExtensions.MergeClient(VRage.Scene.MyGroup,VRage.Scene.GroupId)">
            <summary>
            Merge a group on the client.
            </summary>
            <param name="self"></param>
            <param name="mergeFromId"></param>
        </member>
        <member name="F:VRage.Scene.MyGroupSynchronizationExtensions.Methods">
            <summary>
            Cached method metadata for our intermediate methods.
            </summary>
        </member>
        <member name="F:VRage.Scene.MyGroupSynchronizationExtensions.CachedMethods">
            <summary>
            Cached delegates for each group operation.
            </summary>
            <remarks>
            Because some groups implement the <see cref="T:VRage.Scene.IMyGroup`1"/> more than once we have to cache these delegates for each implementation.
            </remarks>
        </member>
        <member name="M:VRage.Scene.MyGroupSynchronizationExtensions.#cctor">
            <summary>
            Set up the basic method information.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyGroupSynchronizationExtensions.GetMethod``1(VRage.Scene.MyGroup,System.Type,System.String,System.Type)">
            <summary>
            Generic method getter.
            </summary>
            <remarks>
            Methods are cached by name and type.
            </remarks>
            <typeparam name="TDelegate">The type of the delegate to construct the methods as.</typeparam>
            <param name="group">The group where wqe take the group type from.</param>
            <param name="interfaceType">The type of the interface used in the call.</param>
            <param name="name">The name of the method to generate.</param>
            <param name="linkType">The type of the link data if any.</param>
            <returns></returns>
        </member>
        <member name="T:VRage.Scene.MyGroupSynchronizationExtensions.GroupInterfaceKey">
            <summary>
            Key for generated methods.
            </summary>
        </member>
        <member name="T:VRage.Scene.MyListenerForGroupAttribute">
            <summary>
            Attribute that sets a listener for the annotated group.
            </summary>
        </member>
        <member name="T:VRage.Scene.MySceneCollector">
            <summary>
            An object capable of collecting objects from a scene by following the Scene Graph.
            </summary>
        </member>
        <member name="F:VRage.Scene.MySceneCollector.Default">
            <summary>
            Default group filter.
            </summary>
        </member>
        <member name="P:VRage.Scene.MySceneCollector.Entities">
            <summary>
            Collected entities.
            </summary>
        </member>
        <member name="P:VRage.Scene.MySceneCollector.Groups">
            <summary>
            Collected groups.
            </summary>
        </member>
        <member name="M:VRage.Scene.MySceneCollector.CollectConnectedEntities(VRage.Game.Entity.MyEntity,VRage.Scene.GroupFilter)">
            <summary>
            Collect all the entities immediately connected to the provided entity via groups.
            </summary>
            <param name="entity">The target entity.</param>
            <param name="filter">An optional group filter.</param>
        </member>
        <member name="M:VRage.Scene.MySceneCollector.CollectAllConnectedEntities(VRage.Game.Entity.MyEntity,VRage.Scene.GroupFilter)">
            <summary>
            Collect all the entities connected to the provided entity via groups.
            </summary>
            <remarks>
            This method will also index entities that are not in the same group but are connected via a common sibling.
            </remarks>
            <param name="entity">The target entity.</param>
            <param name="filter">An optional group filter.</param>
        </member>
        <member name="M:VRage.Scene.MySceneCollector.CollectAllGroups(VRage.Scene.MyGroup,VRage.Scene.GroupFilter)">
            <summary>
            Collect all objects connected to the provided group.
            </summary>
            <remarks>
            This method will also index entities that are not in the same group but are connected via a common sibling.
            </remarks>
            <param name="group">The target group.</param>
            <param name="filter">An optional group filter.</param>
        </member>
        <member name="M:VRage.Scene.MySceneCollector.CollectQueued(System.Boolean)">
            <summary>
            Collect all queued objects.
            </summary>
            <param name="immediate">Whether to traverse newly discovered entities too.</param>
        </member>
        <member name="M:VRage.Scene.MySceneCollector.SerializeContents">
            <summary>
            Get serialize all collected objects and store that in a scene object builder that can be loaded back at a later moment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MySceneCollector.Clear">
            <summary>
            Clear the stored contents of the scene graph.
            </summary>
        </member>
        <member name="T:VRage.Scene.MySceneComponent">
            <summary>
            Session component that contains the scene.
            </summary>
        </member>
        <member name="F:VRage.Scene.MySceneComponent.EnableDebugDraw">
            <summary>
            Whether to debug draw the contents fo the scene.
            </summary>
        </member>
        <member name="T:VRage.Scene.MySceneDebugDraw">
            <summary>
            Debug draw helper for the scene.
            </summary>
        </member>
        <member name="F:VRage.Scene.MySceneDebugDraw.m_mySceneComponent">
            <summary>
            Scene component to debug draw.
            </summary>
        </member>
        <member name="F:VRage.Scene.MySceneDebugDraw.m_groupType">
            <summary>
            Base type for debug draw groups.
            </summary>
        </member>
        <member name="F:VRage.Scene.MySceneDebugDraw.m_groupTypes">
            <summary>
            List of know subclasses of the requested group type.
            </summary>
        </member>
        <member name="F:VRage.Scene.MySceneDebugDraw.m_groupTypeHierarchy">
            <summary>
            Cached hierarchy of all group types.
            </summary>
        </member>
        <member name="F:VRage.Scene.MySceneDebugDraw.m_debugDrawRangeSquared">
            <summary>
            Range for debug drawing entities and groups.
            </summary>
        </member>
        <member name="F:VRage.Scene.MySceneDebugDraw.DebugDrawGroupContents">
            <summary>
            Whether to debug draw the contents of groups.
            </summary>
        </member>
        <member name="F:VRage.Scene.MySceneDebugDraw.DebugDrawGroupNames">
            <summary>
            Whether to debug draw the names of groups.
            </summary>
        </member>
        <member name="F:VRage.Scene.MySceneDebugDraw.DefaultGroupType">
            <summary>
            Default group type to debug draw for new scenes.
            </summary>
        </member>
        <member name="P:VRage.Scene.MySceneDebugDraw.GroupType">
            <summary>
            Base type for debug draw groups.
            </summary>
        </member>
        <member name="P:VRage.Scene.MySceneDebugDraw.KnownGroupTypes">
            <summary>
            All known group types.
            </summary>
        </member>
        <member name="P:VRage.Scene.MySceneDebugDraw.DebugDrawRange">
            <summary>
            Maximum range for full debug draw of entities and groups.
            </summary>
        </member>
        <member name="M:VRage.Scene.MySceneDebugDraw.GetGroupNamePosition(VRageMath.BoundingBoxD@,VRageMath.Vector3D@)">
            <summary>
            Calculate correct position for drawing a group's name.
            </summary>
            <param name="box">The world bounds of the group.</param>
            <param name="up">The up vector of the view camera.</param>
            <returns></returns>
        </member>
        <member name="T:VRage.Scene.MySceneExtensions.MySceneLoadWork">
            <summary>
            Tracker of scene loading work.
            </summary>
        </member>
        <member name="F:VRage.Scene.MySceneExtensions.MySceneLoadWork.m_groupDependencies">
            <summary>
            Mapping of entity id to dependent group ids.
            </summary>
        </member>
        <member name="F:VRage.Scene.MySceneExtensions.MySceneLoadWork.m_pendingGroups">
            <summary>
            Mapping of group id to tracking data.
            </summary>
        </member>
        <member name="F:VRage.Scene.MySceneExtensions.MySceneLoadWork.m_readyToLoadGroups">
            <summary>
            List of groups whose dependencies have been satisfied and are ready to be loaded.
            </summary>
        </member>
        <member name="F:VRage.Scene.MySceneExtensions.MySceneLoadWork.m_entitiesToLoad">
            <summary>
            List of entities to load.
            </summary>
        </member>
        <member name="F:VRage.Scene.MySceneExtensions.MySceneLoadWork.m_scene">
            <summary>
            Staging scene where the entities are loaded.
            </summary>
        </member>
        <member name="F:VRage.Scene.MySceneExtensions.MySceneLoadWork.m_targetScene">
            <summary>
            Final scene where the entities will be stored.
            </summary>
        </member>
        <member name="F:VRage.Scene.MySceneExtensions.MySceneLoadWork.m_listener">
            <summary>
            Listener for completion.
            </summary>
        </member>
        <member name="T:VRage.Scene.MySceneExtensions.TargetEntityListener">
            <summary>
            Simple listener used when loading a single entity.
            </summary>
        </member>
        <member name="M:VRage.Scene.MySceneExtensions.LoadAsync(VRage.Scene.MyScene,VRage.ObjectBuilders.Scene.MyObjectBuilder_Scene,VRage.Scene.ISceneLoadListener)">
             <summary>
             Load a scene asynchronously.
            
             Objects are initialized into a staging scene and when loading is complete they are moved to the main scene.
             </summary>
             <param name="self">The main scene where the objects will be eventually added.</param>
             <param name="subScene">The serialized scene data to load.</param>
             <returns>A handle to the created parallel work.</returns>
        </member>
        <member name="M:VRage.Scene.MySceneExtensions.LoadAsync(VRage.Scene.MyScene,System.Collections.Generic.IEnumerable{VRage.ObjectBuilders.MyObjectBuilder_EntityBase},System.Collections.Generic.IEnumerable{VRage.ObjectBuilders.Scene.MyObjectBuilder_Group},VRage.Scene.ISceneLoadListener)">
             <summary>
             Load a scene asynchronously.
            
             Objects are initialized into a staging scene and when loading is complete they are moved to the main scene.
             </summary>
             <param name="self">The main scene where the objects will be eventually added.</param>
            <param name="entities">Set of entities to load.</param>
            <param name="groups">Set of groups to load.</param>
            <param name="listener"></param>
            <returns>A handle to the created parallel work.</returns>
        </member>
        <member name="M:VRage.Scene.MySceneExtensions.GetCollector(VRage.Scene.MyScene)">
             <summary>
             Get a scene collector instance.
             </summary>
             <remarks>
             The collector instance is thread static, any results must be processed immediately or stored in intermediate data structures.
            
             The user should also clear the instance after it is used to prevent memory leaks.
             </remarks>
             <param name="scene">This scene.</param>
             <returns>The scene collector object.</returns>
        </member>
        <member name="M:VRage.Scene.MySceneExtensions.GetConnected(VRage.Scene.MyScene,VRage.Game.Entity.MyEntity,System.Collections.Generic.ICollection{VRage.Game.Entity.MyEntity})">
            <summary>
            Get all entities on the same group as the target.
            </summary>
            <param name="scene">The scene containing the entity.</param>
            <param name="entity">The entity to start with.</param>
            <param name="outResults">A collection where the results will be stored.</param>
        </member>
        <member name="M:VRage.Scene.MySceneExtensions.RemapObject(VRage.Scene.MyScene,VRage.ObjectBuilders.IMyRemappable)">
            <summary>
            Remap all object Ids in the provided object.
            </summary>
            <param name="scene">The current scene.</param>
            <param name="subScene">The object to remap.</param>
        </member>
        <member name="M:VRage.Scene.MySceneExtensions.RemapEntities(VRage.Scene.MyScene,System.Collections.Generic.IEnumerable{VRage.ObjectBuilders.MyObjectBuilder_EntityBase})">
            <summary>
            Remap all object Ids in the provided entity builders.
            </summary>
            <param name="scene">The current scene.</param>
            <param name="entities">The entity object builder to remap.</param>
        </member>
        <member name="F:VRage.Scene.MySceneExtensions.LoadWorkPool">
            <summary>
            Pool of staging scenes.
            </summary>
        </member>
        <member name="F:VRage.Scene.MySceneExtensions.MaximumPoolSize">
            <summary>
            Maximum number of entries in the scene pool.
            </summary>
        </member>
        <member name="F:VRage.Scene.MySceneExtensions.m_instanceIndex">
            <summary>
            Running async scene id index.
            </summary>
        </member>
        <member name="M:VRage.Scene.MySceneExtensions.BorrowStagingScene(VRage.Scene.MyScene)">
            <summary>
            Borrow a staging scene.
            </summary>
        </member>
        <member name="M:VRage.Scene.MySceneExtensions.ReturnStagingScene(VRage.Scene.MyStagingScene@)">
            <summary>
            Return a staging scene that was borrowed using <see cref="M:VRage.Scene.MySceneExtensions.BorrowStagingScene(VRage.Scene.MyScene)"/>.
            </summary>
            <param name="scene"></param>
        </member>
        <member name="T:VRage.Scene.MyStagingScene">
            <summary>
            Scene designed to be used as a context and temporary storage for asynchronous loading.
            </summary>
        </member>
        <member name="F:VRage.Scene.MyStagingScene.m_siblings">
            <summary>
            Scenes that should also be shared with this staging scene.
            </summary>
        </member>
        <member name="F:VRage.Scene.MyStagingScene.m_parent">
            <summary>
            Parent scene instance.
            </summary>
        </member>
        <member name="P:VRage.Scene.MyStagingScene.Parent">
            <summary>
            Parent scene instance.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyStagingScene.AddSiblingScene(VRage.Scene.MyStagingScene)">
            <summary>
            Add a scene as a sibling. Sibling staging scenes can share their contents.
            </summary>
            <param name="scene"></param>
        </member>
        <member name="M:VRage.Scene.MyStagingScene.ContainsEntity(VRage.Scene.EntityId)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyStagingScene.TryGetEntity(VRage.Scene.EntityId,VRage.Game.Entity.MyEntity@)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyStagingScene.ContainsGroup(VRage.Scene.GroupId)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyStagingScene.TryGetGroup(VRage.Scene.GroupId,VRage.Scene.MyGroup@)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyStagingScene.Clear">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyStagingScene.StagingContainer.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyStagingScene.StagingContainer.TryGetComponent(System.Type,VRage.Scene.IMySceneComponent@)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyStagingScene.StagingContainer.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:VRage.Scene.MyTieredComponentGroup`2">
            <summary>
            A group where connections between child entities define a group of their parents.
            </summary>
            <remarks>
            This class defines two groups that exist at the same time, first a group of <typeparamref name="TParentComponent"/>.
            The scene will see this as a group of <typeparamref name="TParentComponent"/>, but users should treat it as a group of <typeparamref name="TChildComponent"/>.
            </remarks>
            <typeparam name="TParentComponent">The type of the parent component.</typeparam>
            <typeparam name="TChildComponent">The type of the child component.</typeparam>
        </member>
        <member name="F:VRage.Scene.MyTieredComponentGroup`2.ParentToChildConnections">
            <summary>
            Mapping of parent edges to the child edges that support them.
            </summary>
        </member>
        <member name="F:VRage.Scene.MyTieredComponentGroup`2.ChildGraph">
            <summary>
            Graph of child entities.
            </summary>
        </member>
        <member name="F:VRage.Scene.MyTieredComponentGroup`2.Parents">
            <summary>
            Mapping of child component to parent components.
            </summary>
        </member>
        <member name="F:VRage.Scene.MyTieredComponentGroup`2.ChildComponentMap">
            <summary>
            Mapping of child entity to it's component.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyTieredComponentGroup`2.OnSplit(VRage.Scene.MyGroup)">
            <summary>
            Invoked right after this group is split.
            
            No Add/Remove events are fired during split. All data is transferred directly and any additional work must be performed here.
            </summary>
            <param name="split"></param>
        </member>
        <member name="M:VRage.Scene.MyTieredComponentGroup`2.CanBeSingle(VRage.Game.Entity.MyEntity)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyTieredComponentGroup`2.RemoveEntity(VRage.Game.Entity.MyEntity)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyTieredComponentGroup`2.Contains(VRage.Game.Entity.MyEntity)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyTieredComponentGroup`2.Contains(VRage.Game.Entity.MyEntity,VRage.Game.Entity.MyEntity)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyTieredComponentGroup`2.GetComponentFromParent(VRage.Game.Entity.MyEntity)">
            <summary>
            Get the component from a parent entity.
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyTieredComponentGroup`2.GetComponentFromChild(VRage.Game.Entity.MyEntity)">
            <summary>
            Get the component from a child entity.
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyTieredComponentGroup`2.GetNeighbors(VRage.Game.Entity.MyEntity)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyTieredComponentGroup`2.GetChildEdges(VRage.Scene.MyGroup.Edge)">
            <summary>
            Get the collection of child edges
            </summary>
            <param name="edge">The parent edge.</param>
            <returns>The collection of child edges mapped to the parent.</returns>
        </member>
        <member name="P:VRage.Scene.MyTieredComponentGroup`2.Entities">
            <inheritdoc />
        </member>
        <member name="P:VRage.Scene.MyTieredComponentGroup`2.ParentEntities">
            <summary>
            Enumeration of all parent entities in this group.
            </summary>
        </member>
        <member name="P:VRage.Scene.MyTieredComponentGroup`2.Edges">
            <inheritdoc />
        </member>
        <member name="P:VRage.Scene.MyTieredComponentGroup`2.EdgeEntities">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.MyTieredComponentGroup`2.UnlinkAll(`1,System.Collections.Generic.List{VRage.MyTuple{`0,`0}}@,System.Collections.Generic.List{`1}@)">
            <summary>
            Unlink all edges adjacent to the provided entity.
            </summary>
            <param name="entity"></param>
            <param name="toUnlink">Location to store the list of parent links that need to be undone after the change.</param>
            <param name="toDisconnect">Location to store the list of child entities that were left with no links and can be removed from the graph.</param>
        </member>
        <member name="M:VRage.Scene.MyTieredComponentGroup`2.GetChildEntity(VRage.Scene.EntityId)">
            <summary>
            Find a child entity from it's id.
            </summary>
            <param name="entityId"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyTieredComponentGroup`2.RedoConnection(`1,`1)">
            <summary>
            Redo the connections between two child entities.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="T:VRage.Scene.MyTieredGroupManager`3">
            <summary>
            Group listener for tiered groups.
            </summary>
            <remarks>
            This listener is critical to ensure tiered groups are handled correctly.
            </remarks>
            <typeparam name="TParentComponent"></typeparam>
            <typeparam name="TChildComponent"></typeparam>
            <typeparam name="TGroup"></typeparam>
        </member>
        <member name="T:VRage.Scene.SceneObjectFlags">
            <summary>
            Set of flags for in scene objects.
            </summary>
        </member>
        <member name="F:VRage.Scene.SceneObjectFlags.Active">
            <summary>
            An object that is in a scene and has been activated.
            </summary>
        </member>
        <member name="F:VRage.Scene.SceneObjectFlags.Static">
            <summary>
            Whether this object is static (i.e. it does not move on the scene).
            </summary>
        </member>
        <member name="F:VRage.Scene.SceneObjectFlags.Persist">
            <summary>
            Whether the objects should be persisted.
            </summary>
        </member>
        <member name="F:VRage.Scene.SceneObjectFlags.Sync">
            <summary>
            Whether this object should be synchronized to clients.
            </summary>
        </member>
        <member name="F:VRage.Scene.SceneObjectFlags.All">
            <summary>
            Set of all flags.
            </summary>
        </member>
        <member name="T:VRage.Scene.SceneObjectType">
            <summary>
            Enum describing the high level types of scene objects.
            </summary>
        </member>
        <member name="F:VRage.Scene.SceneObjectType.None">
            <summary>
            Insanity value for uninitialized variables. 
            </summary>
        </member>
        <member name="F:VRage.Scene.SceneObjectType.Entity">
             <summary>
             Entity, an object in the game world.
            
             This includes player characters, terrain, vegetation, particle and sound emitters and more.
             </summary>
        </member>
        <member name="F:VRage.Scene.SceneObjectType.Group">
             <summary>
             Groups are objects that represent connections between entities.
            
             When multiple entities are connected outside of their hierarchy
             (i.e. via physics constraints or some other mechanism) that connection is represented as a group.
             </summary>
        </member>
        <member name="T:VRage.Scene.SerializableEntityComponentId">
            <summary>
            Xml serializable entity component id.
            </summary>
        </member>
        <member name="M:VRage.Scene.SerializableEntityComponentId.Remap(VRage.ObjectBuilder.IMySceneRemapper)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.SerializableEntityComponentId.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Scene.SerializableEntityComponentId.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:VRage.Scene.MyEntitiesInterface">
            <summary>
            Callbacks to various MyEntities methods.
            </summary>
        </member>
        <member name="F:VRage.Scene.MyEntitiesInterface.RegisterUpdate">
            <summary>
            Register entity for updating.
            </summary>
        </member>
        <member name="F:VRage.Scene.MyEntitiesInterface.UnregisterUpdate">
            <summary>
            Unregister entity from updating.
            </summary>
        </member>
        <member name="F:VRage.Scene.MyEntitiesInterface.RegisterDraw">
            <summary>
            Register entity for drawing.
            </summary>
        </member>
        <member name="F:VRage.Scene.MyEntitiesInterface.UnregisterDraw">
            <summary>
            Unregister entity from drawing.
            </summary>
        </member>
        <member name="F:VRage.Scene.MyEntitiesInterface.IsUpdateInProgress">
            <summary>
            Is update of all entities in progress?
            </summary>
        </member>
        <member name="F:VRage.Scene.MyEntitiesInterface.GetAll">
            <summary>
            Iterator to all entities.
            </summary>
        </member>
        <member name="P:VRage.Scene.MyEntityIdentifier.AllocationSuspended">
            <summary>
            Freezes allocating entity ids.
            This is important, because during load, no entity cannot allocate new id, because it could allocate id which already has entity which will be loaded soon.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyEntityIdentifier.AddEntityWithId(VRage.Game.Entity.MyEntity)">
            <summary>
            Registers entity with given ID. Do not call this directly, it is called automatically
            when EntityID is first time assigned.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="F:VRage.Scene.MyEntityIdentifier.ObjectType.Unknown">
            <summary>
            Used for everything else.
            </summary>
        </member>
        <member name="F:VRage.Scene.MyEntityIdentifier.ObjectType.Entity">
            <summary>
            Marks an identifier used for entities.
            </summary>
        </member>
        <member name="F:VRage.Scene.MyEntityIdentifier.ObjectType.Identity">
            <summary>
            Used for identities, player id's.
            </summary>
        </member>
        <member name="F:VRage.Scene.MyEntityIdentifier.ObjectType.Group">
            <summary>
            Used for entity groups.
            </summary>
        </member>
        <member name="F:VRage.Scene.MyEntityIdentifier.ObjectType.ClientEntity">
            <summary>
            Entity on the client.
            </summary>
        </member>
        <member name="F:VRage.Scene.MyEntityIdentifier.ObjectType.ClientGroup">
            <summary>
            Group on the client.
            </summary>
        </member>
        <member name="M:VRage.Scene.MyEntityIdentifier.AllocateId(VRage.Scene.MyEntityIdentifier.ObjectType,VRage.Scene.MyEntityIdentifier.AllocationMethod)">
            <summary>
            Allocated new entity ID (won't add to list)
            Entity with this ID should be added immediately
            </summary>
        </member>
        <member name="M:VRage.Scene.MyEntityIdentifier.GetIdType(System.Int64)">
            <summary>
            Get the type of an object from it's Id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyEntityIdentifier.GetIdNumber(System.Int64)">
            <summary>
            Get only the significant number out of an object id. The type is stripped.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyEntityIdentifier.ConstructId(VRage.Scene.MyEntityIdentifier.ObjectType,System.String)">
            <summary>
            
            </summary>
            <param name="objectType"></param>
            <param name="uniqueString"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyEntityIdentifier.ConstructId(VRage.Scene.MyEntityIdentifier.ObjectType,System.Int64)">
            <summary>
            Construct an object id from a "unique" number and the type of the object.
            </summary>
            <param name="objectType"></param>
            <param name="uniqueNumber"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Scene.MyEntityIdentifier.SwapRegisteredEntityId(VRage.Game.Entity.MyEntity,System.Int64,System.Int64)">
            <summary>
            Changes ID by which an entity is registered. Do not call this directly, it is called automatically when
            EntityID changes.
            </summary>
            <param name="entity">Entity whose ID has changed.</param>
            <param name="oldId">Old ID of the entity.</param>
            <param name="newId">New ID of the entity.</param>
        </member>
        <member name="M:VRage.Models.MyFracturedModelFactory.ModelPartClosure.#ctor(Havok.HkdBreakableShape,VRageMath.Matrix@,System.Int32@)">
            <summary>
            Construct from leaf shape.
            </summary>
        </member>
        <member name="M:VRage.Models.MyFracturedModelFactory.ModelPartClosure.#ctor(Havok.HkdBreakableShape,System.Collections.Generic.Dictionary{Havok.HkdBreakableShape,VRage.Models.MyFracturedModelFactory.ModelPartClosure},System.Collections.Generic.List{Havok.HkdConnection})">
            <summary>
            Construct from inner tree node.
            </summary>
        </member>
        <member name="M:VRage.Models.MyFracturedModelFactory.ModelPartClosure.#ctor(VRage.Models.IMyModel,VRageMath.Matrix@)">
            <summary>
            Construct from leaf IMyModel.
            </summary>
        </member>
        <member name="M:VRage.Models.MyFracturedModelFactory.Create(System.Object,VRage.Models.IMyModel,System.Boolean)">
            <summary>
            Convert given original model to compound model of fractured pieces.
            </summary>
            <param name="owner">owner of the created model</param>
            <param name="originalModel">reference to original model</param>
            <param name="generateShape">true by default, pass false if compound model should not generate its physics shape</param>
            <returns>fractured model</returns>
        </member>
        <member name="M:VRage.Models.MyFracturedModelFactory.CollectModelParts(VRage.Models.IMyModel,VRageMath.Matrix,VRage.Models.MyFracturedModelFactory.ModelPartClosure@)">
            <summary>
            Collect the model parts from given model. Recursive function that flattens the hierarchy of fractured pieces.
            </summary>
            <param name="model">reference to original model</param>
            <param name="parentTransform">transform of parent model part, default value is identity matrix</param>
            <param name="modelPartClosure"></param>
        </member>
        <member name="M:VRage.Models.MyFracturedModelFactory.CollectModelParts(Havok.HkdBreakableShape,VRageMath.Matrix,System.Int32@,VRage.Models.MyFracturedModelFactory.ModelPartClosure@)">
            <summary>
            Collect model parts from breakable shape.
            </summary>
            <param name="hkBreakableShape">input shape</param>
            <param name="parentTransform">parent transform of the model part</param>
            <param name="modelPartIndex">current index to be </param>
            <param name="modelPartClosure"></param>
        </member>
        <member name="T:VRage.Models.MyFracturedPieceModel">
            <summary>
            Implementation of IMyModel interface for fracture pieces.
            </summary>
        </member>
        <member name="T:VRage.Models.MyFracturedCompoundModel">
            <summary>
            Fractured compound model contains fracture pieces coming from the original model.
            </summary>
        </member>
        <member name="T:VRage.Models.MyFracturedCompoundModel.ConnectedGraphComponent">
            <summary>
            Class wrapping list of shape keys which are connected as single component.
            </summary>
        </member>
        <member name="F:VRage.Models.MyFracturedCompoundModel.m_modelParts">
            <summary>
            List that stores the model parts.
            </summary>
        </member>
        <member name="F:VRage.Models.MyFracturedCompoundModel.m_modelDummies">
            <summary>
            List that stores valid model dummies.
            Valid dummies are only those which collide with fractured pieces.
            </summary>
        </member>
        <member name="F:VRage.Models.MyFracturedCompoundModel.m_originalModel">
            <summary>
            Link to the original model.
            </summary>
        </member>
        <member name="F:VRage.Models.MyFracturedCompoundModel.m_shape">
            <summary>
            List shape including all model parts.
            </summary>
        </member>
        <member name="F:VRage.Models.MyFracturedCompoundModel.m_boundingBox">
            <summary>
            Local bounding box.
            </summary>
        </member>
        <member name="F:VRage.Models.MyFracturedCompoundModel.m_generateShape">
            <summary>
            Set to false when you don't need physics shape to be generated.
            </summary>
        </member>
        <member name="F:VRage.Models.MyFracturedCompoundModel.m_connectionEdges">
            <summary>
            Connections between model parts.
            </summary>
        </member>
        <member name="M:VRage.Models.MyFracturedCompoundModel.#ctor(System.Object,VRage.Models.IMyModel,System.Collections.Generic.List{VRage.Models.MyModelPart},System.Collections.Generic.List{VRage.Models.MyFracturedCompoundModel.Connection},System.Boolean)">
            <summary>
            Construct fractured compound model from given IMyModel instance. Don't forget to dispose the created instance.
            Creates READ-ONLY instance.
            </summary>
            /// <param name="owner">Owner of this instance. Only the owner is allowed to dispose this instance.</param>
            <param name="originalModel">Original IMyModel instance before fracturing.</param>
            <param name="modelParts">List of model parts which will become fractured pieces of this compound.</param>
            <param name="connections">List of connections.</param>
            <param name="generateShape">Set to false when you don't need physics shape to be generated</param>
        </member>
        <member name="M:VRage.Models.MyFracturedCompoundModel.#ctor(System.Object,VRage.Models.MyFracturedCompoundModel,System.Boolean)">
            <summary>
            Clone from another fractured compound model. Cloned model should be disposed as the original.
            </summary>
            <param name="owner">Owner of this instance. Only the owner is allowed to dispose this instance.</param>
            <param name="originalCompound">original compound model to be cloned</param>
            <param name="generateShape">Set to false when you don't need physics shape to be generated</param>
        </member>
        <member name="M:VRage.Models.MyFracturedCompoundModel.RemoveModelPart(System.UInt32)">
            <summary>
            Remove model part on the given index.
            </summary>
            <param name="index">model part index</param>
        </member>
        <member name="M:VRage.Models.MyFracturedCompoundModel.RemoveModelParts(System.Collections.Generic.List{System.UInt32})">
            <summary>
            Remove model part on the given index.
            </summary>
            <param name="indices">model part indices, pass null to remove all</param>
        </member>
        <member name="P:VRage.Models.MyFracturedCompoundModel.AssetName">
            <summary>
            For fractured compound model, asset name is null. Retrieve model parts to acquire model names or access property AssetNames.
            </summary>
        </member>
        <member name="P:VRage.Models.MyFracturedCompoundModel.CollisionShape">
            <summary>
            For fractured compound model, main collision shape is null. Retrieve model parts to acquire model shapes or access property CollisionShapes.
            </summary>
        </member>
        <member name="P:VRage.Models.MyFracturedCompoundModel.BoundingBox">
            <summary>
            Returns the bounding box of the original model (origin of fractured pieces).
            </summary>
        </member>
        <member name="P:VRage.Models.MyFracturedCompoundModel.VRage#Models#IMyModel#ModelParts">
            <summary>
            Get the model parts, fractured pieces in this case.
            </summary>
        </member>
        <member name="P:VRage.Models.MyFracturedCompoundModel.ModelPartsList">
            <summary>
            List that stores the model parts.
            </summary>
        </member>
        <member name="P:VRage.Models.MyFracturedCompoundModel.Dummies">
            <summary>
            Get filtered dummies of the original model: only those which intersect with fractured pieces. 
            Dummies of fractured pieces are ignored.
            </summary>
        </member>
        <member name="P:VRage.Models.MyFracturedCompoundModel.Bones">
            <summary>
            Get the bones of the original model. Bones of fractured pieces are ignored.
            </summary>
        </member>
        <member name="P:VRage.Models.MyFracturedCompoundModel.CollisionShapes">
            <summary>
            Get collision shapes of the fractured pieces. Original model collisions are not returned.
            </summary>
        </member>
        <member name="P:VRage.Models.MyFracturedCompoundModel.ConnectionEdges">
            <summary>
            Connections map between model parts.
            </summary>
        </member>
        <member name="P:VRage.Models.MyFracturedCompoundModel.OriginalModel">
            <summary>
            Link to the original model.
            </summary>
        </member>
        <member name="M:VRage.Models.MyFracturedCompoundModel.ApplyModelPartDebugRenderOffset(VRageMath.Vector3,VRageMath.Matrix@)">
            <summary>
            Utility method for debugging: Change the translation of the modelPartMatrix. This can be used to move pieces from each other to make them visible.
            </summary>
        </member>
        <member name="M:VRage.Models.MyModelDestructionData.LoadDestruction(VRage.Models.IMyModel)">
            <summary>
            Load destruction data for given model.
            </summary>
        </member>
        <member name="T:VRage.Models.MyModelExtensions">
            <summary>
            Collection of extension methods for models.
            </summary>
        </member>
        <member name="M:VRage.Models.MyModelExtensions.TryGetDummy(VRage.Models.IMyModel,System.String,VRageRender.Import.MyModelDummy@)">
            <summary>
            Try to find a model dummy by it's name.
            </summary>
            <param name="self"></param>
            <param name="name"></param>
            <param name="dummy"></param>
            <returns></returns>
        </member>
        <member name="T:VRage.Models.IMyModel">
            <summary>
            Interface for model data.
            </summary>
        </member>
        <member name="P:VRage.Models.IMyModel.AssetName">
            <summary>
            Name of the single asset. 
            Most models are only associated with a single asset.
            </summary>
        </member>
        <member name="P:VRage.Models.IMyModel.CollisionShape">
            <summary>
            Collision shape.
            </summary>
        </member>
        <member name="M:VRage.Models.IMyModel.GetIntersectionWithLine(VRageMath.LineD@,VRage.Game.Models.MyIntersectionResultLineTriangle@,VRage.Components.Physics.IntersectionFlags)">
            <summary>
            Gets intersection with line.
            </summary>
            <param name="line">Line to test intersection with. In local space to the model.</param>
            <param name="result">Intersection result.</param>
            <param name="flags">Intersection type flag.</param>
            <returns>True if intersection happens.</returns>
        </member>
        <member name="T:VRage.Models.MyModelPart">
            <summary>
            Part of compound model.
            </summary>
        </member>
        <member name="F:VRage.Models.MyModelPart.Model">
            <summary>
            Child model.
            </summary>
        </member>
        <member name="F:VRage.Models.MyModelPart.Matrix">
            <summary>
            Transform of child model.
            </summary>
        </member>
        <member name="M:VRage.Models.MyModelPart.#ctor(VRage.Models.IMyModel)">
            <summary>
            Construct from IMyModel. Local transform is set to identity.
            </summary>
            <param name="model">Model that is used for this model part</param>
        </member>
        <member name="M:VRage.Models.MyModelPart.#ctor(VRage.Models.IMyModel,VRageMath.Matrix)">
            <summary>
            Full constructor.
            </summary>
            <param name="model">Model that is used for this model part</param>
            <param name="matrix">Local transform matrix of the part</param>
        </member>
        <member name="T:VRage.Models.IMyIntersection">
            <summary>
            Interface providing intersections.
            </summary>
        </member>
        <member name="M:VRage.Models.IMyIntersection.GetIntersectionWithLine(VRageMath.LineD@,VRage.Models.MyIntersectionResult@,VRage.Components.Physics.IntersectionFlags)">
            <summary>
            Gets intersection with line.
            </summary>
            <param name="line">Line to test intersection with.</param>
            <param name="result">Intersection result.</param>
            <param name="flags">Intersection type flag.</param>
            <returns>True if intersection happens.</returns>
        </member>
        <member name="M:VRage.Factory.MyObjectFactoryExtensions.CreateAndDeserialize``1(VRage.Factory.MyObjectFactory,VRage.ObjectBuilders.MyObjectBuilder_Base)">
            <summary>
            Create a new instance of an object and deserialize it.
            
            Only valid for factories that create IMyObject instances.
            </summary>
            <typeparam name="TCreated">Created type of the factory.</typeparam>
            <param name="self">The factory.</param>
            <param name="builder">The object builder for the type.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Factory.MyObjectFactoryExtensions.CreateAndDeserialize``2(VRage.Factory.MyObjectFactory{``0,``1},VRage.ObjectBuilders.MyObjectBuilder_Base)">
            <summary>
            Create a new instance of an object and deserialize it.
            
            Only valid for factories that create IMyObject instances.
            </summary>
            <typeparam name="TCreated">Created type of the factory.</typeparam>
            <param name="self">The factory.</param>
            <param name="builder">The object builder for the type.</param>
            <returns></returns>
        </member>
        <member name="T:VRage.Factory.MyObjectFactory`2">
            <summary>
            Base class for automatic object factory.
            
            Object factories are created and set up automatically.
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <typeparam name="TCreatedObjectBase"></typeparam>
        </member>
        <member name="M:VRage.Factory.MyObjectFactory`2.RegisterDescriptor(`0,System.Type)">
            <summary>
            Register a type with descriptor.
            </summary>
            <param name="descriptor">Descriptor</param>
            <param name="type">Type</param>
        </member>
        <member name="M:VRage.Factory.MyObjectFactory`2.CreateInstance(VRage.ObjectBuilder.MyObjectBuilderType,System.Boolean)">
            <summary>
            Create default instance from object builder.
            </summary>
            <param name="objectBuilderType">The object builder type that maps to the object we want to create.</param>
            <param name="throwOnFailure">Whether to throw exception if creating the instance fails.</param>
            <returns></returns>
        </member>
        <member name="P:VRage.Factory.MyObjectFactory`2.Attributes">
            <summary>
            Enumerate all know attributes. And therefore all indexed types.
            </summary>
        </member>
        <member name="M:VRage.Factory.MyObjectFactory`2.GetAttribute(System.Type,System.Boolean)">
            <summary>
            Get an attribute for it's generated type.
            
            This may optionally check for attributes from parent classes in case the factory attribute allows inheritance.
            </summary>
            <param name="instanceType">The type to query.</param>
            <param name="inherited">Check for inheritance</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Factory.MyObjectFactory`2.TryGetAttribute(`1,`0@)">
            <summary>
            Try to get the attribute for an instance of an object created by this factory.
            </summary>
            <param name="instance"></param>
            <param name="attr"></param>
            <returns></returns>
        </member>
        <member name="T:VRage.Factory.MyObjectFactory">
            <summary>
            Abstract base class for an object factory.
            </summary>
        </member>
        <member name="F:VRage.Factory.MyObjectFactory.Factories">
            <summary>
            Index of factories by base type.
            </summary>
        </member>
        <member name="T:VRage.Factory.MyFactorableAttribute">
            <summary>
            Use this attribute to mark any factories you may use in code. This will automatically register the factory.
            </summary>
        </member>
        <member name="T:VRage.Factory.AttributeObserver">
            <summary>
            Delegate describing a method used to monitor type annotating attributes.
            </summary>
            <param name="type">The annotated type.</param>
            <param name="attr">The attribute annotating.</param>
        </member>
        <member name="T:VRage.ObjectBuilder.MySceneRemapperExtensions">
            <summary>
            Extensions for scene remappers.
            </summary>
        </member>
        <member name="M:VRage.ObjectBuilder.MySceneRemapperExtensions.RemapObject(VRage.ObjectBuilder.IMySceneRemapper,VRage.Scene.SceneObjectTypeId,System.UInt64@)">
            <summary>
            Remap the id of a scene object. The new id is placed into the reference.
            </summary>
            <param name="self">The remapper instance.</param>
            <param name="type">The type of the object.</param>
            <param name="id">The id of the object.</param>
        </member>
        <member name="T:VRage.ObjectBuilder.Merging.IMyObjectBuilderMerger">
            <summary>
            Interface describing an object that can merge two object builders or members thereof.
            </summary>
        </member>
        <member name="M:VRage.ObjectBuilder.Merging.IMyObjectBuilderMerger.Merge(System.Object,System.Object@,VRage.ObjectBuilders.Definitions.MyDefinitionMergeMode)">
            <summary>
            Merge the contents of base into changeResult, taking base as the original and changeResult as the deltas.
            </summary>
            <param name="base">Base object</param>
            <param name="changeResult">Destination and container of the deltas.</param>
            <param name="mode"></param>
        </member>
        <member name="T:VRage.ObjectBuilder.Merging.MyArrayMerger`1">
            <summary>
            Type safe merger for array types.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:VRage.ObjectBuilder.Merging.FieldMergerAttribute">
            <summary>
            Marks a field with a custom merger object.
            </summary>
        </member>
        <member name="T:VRage.ObjectBuilder.Merging.MyCustomMergerAdapter">
            <summary>
            Merge adapter for types that specify their ouwn merging method.
            </summary>
        </member>
        <member name="T:VRage.ObjectBuilder.Merging.MyMergingList`1">
            <summary>
            List with custom merging behavior that ensures item uniqueness.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="T:VRage.ObjectBuilder.Merging.NoMergeAttribute">
            <summary>
            Marks a field or auto-property not to be automatically merged.
            </summary>
        </member>
        <member name="T:VRage.ObjectBuilder.Merging.MyListMerger">
            <summary>
            Merger for lists.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilder.Merging.MyListMerger.Instance">
            <summary>
            Single instance of the list merger.
            </summary>
        </member>
        <member name="T:VRage.ObjectBuilder.Merging.MyNullableMerger`1">
            <summary>
            Type safe merger for nullable values.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:VRage.ObjectBuilder.Merging.MyObjectBuilderMerger`1">
            <summary>
            Generic type safe merger for normal objects.
            </summary>
            <typeparam name="TObject"></typeparam>
        </member>
        <member name="T:VRage.ObjectBuilder.Merging.MyObjectBuilderMerger">
            <summary>
            Default object builder merger, can handle most class types.
            </summary>
        </member>
        <member name="M:VRage.ObjectBuilder.Merging.MyObjectBuilderMerger.Compile">
            <summary>
            TODO: To speed up merging we can compile the merge code down to a runtime method.
            </summary>
        </member>
        <member name="T:VRage.ObjectBuilder.Merging.MyObjectBuilderMerger.MemberMerge">
            <summary>
            Information about ob members that can be merged.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilder.Merging.MyObjectBuilderMerger.MemberMerge.Info">
            <summary>
            Field info.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilder.Merging.MyObjectBuilderMerger.MemberMerge.MemberMerger">
            <summary>
            Merger for the field.
            </summary>
        </member>
        <member name="M:VRage.ObjectBuilder.Merging.MyObjectBuilderMerger.MemberMerge.ToString">
            <inheritdoc />
        </member>
        <member name="T:VRage.ObjectBuilder.Merging.IMyCustomObjectBuilderMerge">
            <summary>
            Interface describing an object that has customized merging behavior.
            </summary>
        </member>
        <member name="M:VRage.ObjectBuilder.Merging.IMyCustomObjectBuilderMerge.MergeFrom(VRage.ObjectBuilder.Merging.IMyCustomObjectBuilderMerge,VRage.ObjectBuilders.Definitions.MyDefinitionMergeMode)">
            <summary>
            Merge from another object.
            </summary>
            <param name="other">Base object</param>
            <param name="mode">Merge mode</param>
        </member>
        <member name="T:VRage.ObjectBuilder.MySerializableList`1">
            <summary>
            Custom list class to be used with object builders.
            
            This class provides a custom Add method that ignores null values,
            this is useful in conjunction with the abstract xml serializer
            because when elements are not de-serializable they are returned as null.
            </summary>
            <typeparam name="TItem">The type of the list element.</typeparam>
        </member>
        <member name="M:VRage.ObjectBuilder.MySerializableList`1.Add(`0)">
            <summary>
            Add value while checking if the value is not null.
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:VRage.ObjectBuilder.MySerializerObList`1">
            <summary>
            Serializer for the serializable list.
            </summary>
            <remarks>Copied from list serializer, better yet is to inherit and have an attribute scheme for serializers.</remarks>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="T:VRage.ObjectBuilder.IMySceneRemapper">
            <summary>
            Interface defining an object capable of remapping identifiers to avoid collisions when duplicating parts of a game scene.
            </summary>
            <remarks>
            Implementations of this interface should be fully capable of remapping scenes with cross referencing ids.
            </remarks>
        </member>
        <member name="M:VRage.ObjectBuilder.IMySceneRemapper.RemapObject(VRage.Scene.SceneObjectTypeId,System.UInt64)">
            <summary>
            Remap the id of a scene object.
            </summary>
            <param name="type">The type of the object.</param>
            <param name="id">The id of the object.</param>
            <returns>The new id for the object.</returns>
        </member>
        <member name="M:VRage.ObjectBuilder.IMySceneRemapper.RemapGeneric(System.String,System.Int32)">
            <summary>
            Remap a generic object type with a given key and Int32 id.
            </summary>
            <param name="objectType">A string identifying the type of the remapped object.</param>
            <param name="id">The id to remap.</param>
            <returns>A new id that is safe to use and different from the original.</returns>
        </member>
        <member name="M:VRage.ObjectBuilder.IMySceneRemapper.RemapGeneric(System.String,System.UInt64)">
            <summary>
            Remap a generic object type with a given key and Int64 id.
            </summary>
            <param name="objectType">A string identifying the type of the remapped object.</param>
            <param name="id">The id to remap.</param>
            <returns>A new id that is safe to use and different from the original.</returns>
        </member>
        <member name="T:VRage.ObjectBuilder.MyObjectBuilderIndexer">
            <summary>
            Indexer for object builders.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilder.MyObjectBuilderIndexer.m_typeByName">
            <summary>
            Index of object builder by it's name.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilder.MyObjectBuilderIndexer.m_typeByLegacyName">
            <summary>
            Index of object builder by it's legacy name.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilder.MyObjectBuilderIndexer.Static">
            <summary>
            Static instance of the indexer.
            </summary>
        </member>
        <member name="P:VRage.ObjectBuilder.MyObjectBuilderIndexer.Count">
            <summary>
            Count of indexed object builders for this indexer.
            </summary>
        </member>
        <member name="M:VRage.ObjectBuilder.MyObjectBuilderIndexer.TryGet(System.String,VRage.ObjectBuilder.MyObjectBuilderType@)">
            <summary>
            Try to get an ob type from it's name.
            
            This will check for short name (when we do not include the "MyObjectBuilder_" prefix)
            and legacy names (registered old names we have for compatibility).
            </summary>
            <param name="name">name of the object builder.</param>
            <param name="type">The type if found.</param>
            <returns>Whether the type was recognized.</returns>
        </member>
        <member name="M:VRage.ObjectBuilder.MyObjectBuilderIndexer.GetShortName(VRage.ObjectBuilder.MyObjectBuilderType)">
            <summary>
            Get the short name for a given object builder type (it's name minus the "MyObjectBuilder_" prefix).
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="F:VRage.ObjectBuilder.MyObjectBuilderType.ObjectBuilderPrefix">
            <summary>
            Prefix all object builder classes should have.
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilder.MyObjectBuilderType.Invalid">
            <summary>
            Invalid type reference, this reference will map to the magic runtime id 0 which is also invalid.
            </summary>
        </member>
        <member name="M:VRage.ObjectBuilder.MyObjectBuilderType.Parse(System.String)">
            <summary>
            Parse an object builder type.
            </summary>
            <param name="value">The name to parse as an object builder.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">When the argument could not be parsed.</exception>
        </member>
        <member name="M:VRage.ObjectBuilder.MyObjectBuilderType.TryParse(System.String,VRage.ObjectBuilder.MyObjectBuilderType@)">
            <summary>
            Try to parse and object builder name.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="result">The resulting value if available.</param>
            <returns>Whether parsing was successful.</returns>
        </member>
        <member name="F:VRage.ObjectBuilder.MyObjectBuilderType.m_type">
            <summary>
            The underlying type for this object builder.
            </summary>
        </member>
        <member name="T:VRage.ObjectBuilder.MyObjectBuilderType.ObjectBuilderTypeComparer">
            <summary>
            Comparer
            </summary>
        </member>
        <member name="F:VRage.ObjectBuilder.MyObjectBuilderType.Comparer">
            <summary>
            Static comparer instance that can be used to avoid boxing when using MyObjectBuilderType as a dictionary key or hashset entry.
            </summary>
        </member>
        <member name="T:VRage.Session.IMyPersistenceComponent">
            <summary>
            Interface describing a session component capable of persisting entities.
            </summary>
        </member>
        <member name="P:VRage.Session.IMyPersistenceComponent.PersistedTags">
            <summary>
            Entity tags that should be persisted by this component instance.
            </summary>
        </member>
        <member name="P:VRage.Session.IMyPersistenceComponent.DataFolders">
            <summary>
            Folders where this component stores data.
            </summary>
        </member>
        <member name="P:VRage.Session.IMyPersistenceComponent.Default">
            <summary>
            Whether this component should be the default for entities
            that are not persisted by any other component.
            </summary>
        </member>
        <member name="M:VRage.Session.IMyPersistenceComponent.Save">
            <summary>
            Save the current internal state to the scene database.
            </summary>
        </member>
        <member name="M:VRage.Session.IMyPersistenceComponent.AddEntity(VRage.Game.Entity.MyEntity)">
            <summary>
            Add the entity to be persisted by this component.
            </summary>
            <param name="entity">The entity to persist.</param>
        </member>
        <member name="M:VRage.Session.IMyPersistenceComponent.RemoveEntity(VRage.Game.Entity.MyEntity)">
            <summary>
            Remove an entity, so it is no longer persisted by this component.
            </summary>
            <param name="entity">The entity to remove.</param>
        </member>
        <member name="M:VRage.Session.IMyPersistenceComponent.AddGroup(VRage.Scene.MyGroup)">
            <summary>
            Add the group to be persisted by this component.
            </summary>
            <param name="group">The group to persist.</param>
        </member>
        <member name="M:VRage.Session.IMyPersistenceComponent.RemoveGroup(VRage.Scene.MyGroup)">
            <summary>
            Remove an group, so it is no longer persisted by this component.
            </summary>
            <param name="group">The group to remove.</param>
        </member>
        <member name="M:VRage.Session.IMyScenePersistence.AddEntity(VRage.Game.Entity.MyEntity)">
            <summary>
            Add the provided entity to the persistence system.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:VRage.Session.IMyScenePersistence.RemoveEntity(VRage.Game.Entity.MyEntity)">
            <summary>
            Remove an entity from persistence.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:VRage.Session.IMyScenePersistence.GetEntityPersistence(VRage.Game.Entity.MyEntity)">
            <summary>
            Get the persistence component responsible for the target entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Session.IMyScenePersistence.SetForGroup(VRage.Scene.MyGroup,VRage.Session.IMyPersistenceComponent)">
            <summary>
            Add the provided group to the persistence system.
            </summary>
            <param name="group">The group to add.</param>
            <param name="persistence">The specific persistence component that should persist the group.</param>
        </member>
        <member name="M:VRage.Session.IMyScenePersistence.RemoveGroup(VRage.Scene.MyGroup)">
            <summary>
            Remove a group from persistence.
            </summary>
            <param name="group">The group to remove.</param>
        </member>
        <member name="M:VRage.Session.IMyScenePersistence.GetGroupPersistence(VRage.Scene.MyGroup)">
            <summary>
            Get the persistence component responsible for the target group.
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="T:VRage.Session.IPersistentObject">
            <summary>
            Interface describing objects that want to control how they are serialized to a file.
            </summary>
        </member>
        <member name="M:VRage.Session.IPersistentObject.Serialize(System.IO.Stream,VRage.Session.MySessionPersistence)">
            <summary>
            Serialize this object to a stream.
            </summary>
            <param name="stream"></param>
            <param name="persistence"></param>
        </member>
        <member name="T:VRage.Session.IDraw">
            <summary>
            Interface to be implemented by session components that want to be invoked in the draw loop.
            </summary>
        </member>
        <member name="T:VRage.Session.MySessionDelta">
            <summary>
            Snapshot of a scene.
            </summary>
            <remarks>
            <para>
            The scene snapshot is not the same as the scenes object builder.
            The object builder captures the current state of the scene, whereas the
            snapshot works with the persistence components to collect all of the data about the current <i>session</i>.
            </para>
            <para>
            This snapshot is called incremental because it does not contain any data that has not been modified since it was last saved.
            To make a complete snapshot of the scene one would need to combine all files stored in the snapshot path with the data in the snapshot itself.
            </para>
            </remarks>
        </member>
        <member name="P:VRage.Session.MySessionDelta.SessionName">
            <summary>
            Name of the session, as shown in load screen, etc.
            </summary>
        </member>
        <member name="P:VRage.Session.MySessionDelta.SessionPath">
            <summary>
            Path where unmodified data is stored for this snapshot.
            </summary>
        </member>
        <member name="P:VRage.Session.MySessionDelta.Time">
            <summary>
            Date and time this snapshot was collected.
            </summary>
        </member>
        <member name="P:VRage.Session.MySessionDelta.Log">
            <summary>
            Log to be used when persisting this snapshot.
            </summary>
        </member>
        <member name="P:VRage.Session.MySessionDelta.Success">
            <summary>
            Whether saving this snapshot was a success.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionDelta.ModifiedFiles">
            <summary>
            Mapping of save files to their temporary file names.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionDelta.Deleted">
            <summary>
            Set of file paths that have been deleted.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionDelta.IgnoredPaths">
            <summary>
            Files and Directories that should be ignored by the snapshot.
            </summary>
        </member>
        <member name="T:VRage.Session.MySessionDelta.ExceptionCollector">
            <summary>
            Helper object used to collect exceptions when applying a snapshot.
            </summary>
        </member>
        <member name="T:VRage.Session.SnapshotException">
            <summary>
            An exception thrown while saving a scene snapshot.
            </summary>
        </member>
        <member name="T:VRage.Session.MyNullPersistence">
            <summary>
            Null persistence component that tracks no data.
            </summary>
        </member>
        <member name="F:VRage.Session.MyNullPersistence.Instance">
            <summary>
            Default persistence component instance.
            </summary>
        </member>
        <member name="T:VRage.Session.MySessionComponent">
            <summary>
            Base class for components of a gameplay session.
            </summary>
        </member>
        <member name="P:VRage.Session.MySessionComponent.Loaded">
            <summary>
            Whether this component is loaded.
            </summary>
        </member>
        <member name="P:VRage.Session.MySessionComponent.Session">
            <summary>
            Reference to this component's session.
            </summary>
        </member>
        <member name="P:VRage.Session.MySessionComponent.Scene">
            <summary>
            Scene containing this component.
            </summary>
        </member>
        <member name="P:VRage.Session.MySessionComponent.DebugName">
            <summary>
            Debugger friendly name of this component.
            </summary>
        </member>
        <member name="M:VRage.Session.MySessionComponent.LoadDefinition(VRage.Game.Components.Session.MySessionComponentDefinition)">
            <summary>
            Load data from the definition for this session component.
            
            Only invoked if there is a definition.
            </summary>
            <param name="definition"></param>
        </member>
        <member name="M:VRage.Session.MySessionComponent.Deserialize(VRage.Game.MyObjectBuilder_SessionComponent)">
            <summary>
            Deserialize saved data for this component.
            
            Only invoked if there was some saved data.
            </summary>
            <param name="objectBuilder"></param>
        </member>
        <member name="M:VRage.Session.MySessionComponent.Serialize">
            <summary>
            Serialize the state of this component into an object builder.
            </summary>
            <returns></returns>
        </member>
        <member name="P:VRage.Session.MySessionComponent.IsSerialized">
            <summary>
            Whether this component should have it's state serialized.
            </summary>
        </member>
        <member name="M:VRage.Session.MySessionComponent.OnLoad">
            <summary>
            Invoked when the session starts to load.
            </summary>
        </member>
        <member name="M:VRage.Session.MySessionComponent.OnSessionReady">
            <summary>
            Invoked when the session has finished loading and the game update loop is about to resume.
            </summary>
        </member>
        <member name="M:VRage.Session.MySessionComponent.OnUnload">
            <summary>
            Invoked before session de-initialization, after dependencies have loaded.
            </summary>
        </member>
        <member name="M:VRage.Session.MySessionComponent.AddToSession(VRage.Session.MySession)">
            <summary>
            Set the session for this component.
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:VRage.Session.MySessionComponent.Load(VRage.Session.MySessionComponentContainer)">
            <summary>
            Trigger the load event and set loaded to true.
            </summary>
        </member>
        <member name="M:VRage.Session.MySessionComponent.SessionLoaded">
            <summary>
            Trigger the session ready event.
            </summary>
        </member>
        <member name="M:VRage.Session.MySessionComponent.Unload">
            <summary>
            Trigger the unload event and set loaded to false.
            </summary>
        </member>
        <member name="T:VRage.Session.MySessionComponent.UpdateType">
            <summary>
            Enum indicating what update scheduler is used when the update scheduling shorthands in this class are invoked.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionComponent.UpdateType.Game">
            <summary>
            Indicates this session component uses the game update scheduler.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionComponent.UpdateType.System">
            <summary>
            Indicates that this component uses the system update scheduler.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionComponent.UpdateModel">
             <summary>
             What is the used update model for this session component.
            
             The default value is game.
             </summary>
        </member>
        <member name="P:VRage.Session.MySessionComponent.Scheduler">
            <summary>
            The update scheduler used for this component.
            </summary>
        </member>
        <member name="P:VRage.Session.MySessionComponent.Container">
            <inheritdoc/>
        </member>
        <member name="F:VRage.Session.MySessionComponentAttribute.Override">
            <summary>
            The component type
            </summary>
        </member>
        <member name="P:VRage.Session.MySessionComponentAttribute.AlwaysOn">
            <summary>
            Whether this component should always be part of a session, even if not included in the game definition.
            
            This defaults to false for game and plug-in components, but to true for mod scripts.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionComponentAttribute.AllowAutomaticCreation">
            <summary>
            Whether this component can be added implicitly to a component container when it is missing but is a critical dependency of another component.
            </summary>
        </member>
        <member name="P:VRage.Session.MySessionComponentAttribute.DefinitionRequired">
            <summary>
            Whether a definition is required for this component to be included into the session.
            </summary>
        </member>
        <member name="T:VRage.Session.MySessionComponentDebugger">
            <summary>
            Debug helper for session components.
            </summary>
        </member>
        <member name="T:VRage.Session.MySessionComponentFactory">
            <summary>
            Factory object for session components.
            </summary>
        </member>
        <member name="P:VRage.Session.MySessionComponentFactory.Dependencies">
            <summary>
            Full set of dependencies including parent ones.
            </summary>
        </member>
        <member name="T:VRage.Session.IMyAsyncSessionLoadStep">
            <summary>
            Represents data about a set of operations that need to be fulfilled before a session is loaded.
            
            This interface is designed to allow waiting for asynchronous loading operations.
            </summary>
        </member>
        <member name="P:VRage.Session.IMyAsyncSessionLoadStep.Complete">
            <summary>
            Whethern this step ios done loading.
            </summary>
        </member>
        <member name="P:VRage.Session.IMyAsyncSessionLoadStep.Progress">
            <summary>
            A [0, 1] range representing how close this step is to completion.
            
            0 shouold represent that the step has not yet started and 1 that it is done.
            </summary>
        </member>
        <member name="E:VRage.Session.IMyAsyncSessionLoadStep.ProgressEvent">
            <summary>
            Event triggered ion the main thread when the progress advances.
            </summary>
        </member>
        <member name="T:VRage.Session.MyModManager">
            <summary>
            Manager for mods and their scripts.
            </summary>
        </member>
        <member name="P:VRage.Session.MyModManager.Mods">
            <summary>
            List of mods loaded.
            </summary>
        </member>
        <member name="P:VRage.Session.MyModManager.Assemblies">
            <summary>
            Assemblies per mod.
            </summary>
        </member>
        <member name="M:VRage.Session.MyModManager.SerializeMods">
            <summary>
            Serialize the list of mods known to this session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Session.MyModManager.TryGetMod(System.String,VRage.Game.MyModContext@)">
            <summary>
            Try to get a mod based on it's name.
            </summary>
            <param name="id"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Session.MyModManager.TryGetAssembly(VRage.Game.MyModContext,System.Reflection.Assembly@)">
            <summary>
            Try to get the assembly generated from the scripts in the provided mod context.
            </summary>
            <param name="context">The mod context providing scripts.</param>
            <param name="modAssembly">The script assembly if any.</param>
            <returns>Whether the requested mod context produced any scripts assembly.</returns>
        </member>
        <member name="M:VRage.Session.MyModManager.GetModType(VRage.Game.MyModContext,System.String)">
            <summary>
            Find a type inside a mod assembly from it's type name.
            </summary>
            <param name="context"></param>
            <param name="qualifiedTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Session.MyModManager.IsModAssembly(System.Reflection.Assembly)">
            <summary>
            Whether an assembly is one generated from mod scripts.
            </summary>
            <param name="assembly">The assembly to query.</param>
            <returns>Whether the provided assembly was generated from modded scripts.</returns>
        </member>
        <member name="M:VRage.Session.MyModManager.Compile(System.Collections.Generic.IEnumerable{System.String},System.Boolean,VRage.Game.MyModContext)">
            <summary>
            Compile a set of script files into a mod assembly.
            </summary>
            <param name="scriptFiles"></param>
            <param name="zipped"></param>
            <param name="context"></param>
        </member>
        <member name="M:VRage.Session.MyModManager.Convert(VRage.Scripting.ErrorSeverity)">
            <summary>
            Convert an error severity to the equivalent log severity.
            </summary>
            <param name="severity"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Session.MyModManager.RegisterAssembly(VRage.Game.MyModContext,System.Reflection.Assembly)">
            <summary>
            Register a compiled assembly with our internal data structures.
            </summary>
            <param name="context"></param>
            <param name="assembly"></param>
        </member>
        <member name="T:VRage.Session.MySessionComponentContainer">
            <summary>
            Container of components for a session.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionComponentContainer.m_componentIndex">
            <summary>
            Index of loaded session components.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionComponentContainer.m_components">
            <summary>
            Dependency ordered list of components.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionComponentContainer.m_componentsDraw">
            <summary>
            Components queued for draw.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionComponentContainer.m_componentsToLoad">
            <summary>
            Final set of names of the components to load.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionComponentContainer.SessionComponentsEnabled">
            <summary>
            Any components forced to load.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionComponentContainer.SessionComponentsDisabled">
            <summary>
            Any components forced not to load.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionComponentContainer.m_sessionDefinition">
            <summary>
            Definition for the session containing this container.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionComponentContainer.m_session">
            <summary>
            Parent session of this container.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionComponentContainer.m_log">
            <summary>
            Local log reference.
            </summary>
        </member>
        <member name="M:VRage.Session.MySessionComponentContainer.#ctor(VRage.Session.MySession)">
            <summary>
            Create a new component container for a definition.
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:VRage.Session.MySessionComponentContainer.Load(VRage.Game.Definitions.MySessionDefinition,VRage.Game.MyObjectBuilder_Sector)">
            <summary>
            Load components using saved data and definition.
            </summary>
            <param name="definition"></param>
            <param name="savedData"></param>
        </member>
        <member name="M:VRage.Session.MySessionComponentContainer.Serialize(VRage.Game.MyObjectBuilder_Sector)">
            <summary>
            Serialize component data.
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:VRage.Session.MySessionComponentContainer.SessionLoaded">
            <summary>
            Notify the session finished loading.
            </summary>
        </member>
        <member name="M:VRage.Session.MySessionComponentContainer.Unload">
            <summary>
            Unload components.
            </summary>
        </member>
        <member name="M:VRage.Session.MySessionComponentContainer.DispatchDraw">
            <summary>
            Run through the queue of components for draw.
            </summary>
        </member>
        <member name="M:VRage.Session.MySessionComponentContainer.CreateComponent(System.Type,System.Nullable{VRage.Game.MyDefinitionId})">
            <summary>
            Try to register a component into the container.
            </summary>
            <param name="componentType">The type of the component.</param>
            <param name="definitionId">The definition for the component.</param>
        </member>
        <member name="M:VRage.Session.MySessionComponentContainer.ShouldRegisterComponent(System.Type,VRage.Game.Definitions.MySessionDefinition.ComponentData@)">
            <summary>
            Find if this component is in the definition and what name it used there.
            
            Also provide the definition for the component if provided.
            </summary>
            <param name="type">The session component type to look for.</param>
            <param name="data">Parameters for the initialization of the component.</param>
            <returns>Whether the provided component type is in the session definition.</returns>
        </member>
        <member name="M:VRage.Session.MySessionComponentContainer.TryGet(System.Type,VRage.Session.MySessionComponent@)">
            <summary>
            Try to get a session component of the requested type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Session.MySessionComponentContainer.TryGet``1(``0@)">
            <summary>
            Get a session component of the requested type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:VRage.Session.MySessionComponentContainer.Get``1">
            <summary>
            Get a session component of the requested type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:VRage.Session.MySessionComponentContainer.VRage#Components#IComponentContainer#Logger">
            <inheritdoc />
        </member>
        <member name="M:VRage.Session.MySessionComponentContainer.GetAll``1">
            <summary>
            Get any components that are a subtype or implement T.
            </summary>
            <typeparam name="T">The type argument</typeparam>
            <returns></returns>
        </member>
        <member name="T:VRage.Session.MySessionPersistence">
            <summary>
            Manager for persistent data about a session.
            </summary>
            <summary>
            Helper class capable of indexing and managing session persistence components.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionPersistence.TemporaryFolderPath">
            <summary>
            Path where temporary save files are stored.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionPersistence.m_latestVersion">
            <summary>
            Version of this database, incremented with every save.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionPersistence.m_fileStatus">
            <summary>
            Status for files modified since the last time this database was saved.
            </summary>
        </member>
        <member name="P:VRage.Session.MySessionPersistence.BasePath">
            <summary>
            Path where data for this database is stored.
            </summary>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.OpenUnversioned(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Open an unversioned file stream.
            </summary>
            <remarks>
            Unversioned files are not tracked by snapshots and are always saved directly in the session's directory.
            </remarks>
            <param name="path">The path to the file (relative to the current session).</param>
            <param name="mode">The requested file open mode.</param>
            <param name="access">The requested file access.</param>
            <returns>A stream to the opened file.</returns>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.DeleteUnversioned(System.String)">
            <summary>
            Delete the file stored in the given path.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.GetPathUnversioned(System.String)">
            <summary>
            Get the path to a file in the session.
            </summary>
            <remarks>
            This method does not consider file versioning, and should be only used to interact
            in a read only fashion with files that are known to not have changed since the last
            time the session was saved.
            </remarks>
            <param name="relativePath">The path to a file in the session's data.</param>
            <returns>An absolute path to where the file would be stored in the session.</returns>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.FileExists(System.String)">
            <summary>
            Check if a file exists.
            </summary>
            <param name="path">The file path relative to the current session.</param>
            <returns>Whether the file represented by the provided path exists.</returns>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary> 
            Open a file stream.
            </summary>
            <param name="path">The path to the file (relative to the current session).</param>
            <param name="mode">The requested file open mode.</param>
            <param name="access">The requested file access.</param>
            <returns>A stream to the opened file.</returns>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.OpenRead(System.String)">
            <summary> 
            Open a file stream for reading.
            </summary>
            <param name="path">The path to the file (relative to the current session).</param>
            <returns>A stream to the opened file.</returns>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.OpenCreate(System.String)">
            <summary> 
            Open a file stream for reading.
            </summary>
            <param name="path">The path to the file (relative to the current session).</param>
            <returns>A stream to the opened file.</returns>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.Delete(System.String)">
            <summary>
            Delete the file stored in the given path.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.EnumerateFiles(System.String,System.String)">
            <summary>
            Enumerate all files under a given path.
            </summary>
            <param name="path"></param>
            <param name="searchPattern"></param>
            <returns></returns>
        </member>
        <member name="F:VRage.Session.MySessionPersistence.m_pendingSerializationData">
            <summary>
            Mapping of file ids to data pending for write.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionPersistence.m_pendingSerialization">
            <summary>
            Queue of files with async writes pending.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionPersistence.m_currentFile">
            <summary>
            File currently being written to.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionPersistence.m_asyncWriteLock">
            <summary>
            Lock held while processing a file for async writing.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionPersistence.m_persistWork">
            <summary>
            Recurring persist work.
            </summary>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.WriteAsync(System.String,System.Byte[])">
            <summary>
            Enqueue an asynchronous write operation to the provided path with the provided data.
            </summary>
            <param name="path"></param>
            <param name="data"></param>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.WriteAsync(System.String,VRage.Session.IPersistentObject)">
            <summary>
            Enqueue an asynchronous write operation to the provided path with the provided data.
            </summary>
            <param name="path"></param>
            <param name="data"></param>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.WriteAsync(System.String,System.Object)">
            <summary>
            Enqueue an object for async writing.
            </summary>
            <param name="path">The final path where the object should end when written to.</param>
            <param name="data">The data to write.</param>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.FlushAsyncWrite(System.UInt64)">
            <summary>
            Ensure the 
            </summary>
            <param name="fileId"></param>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.ProcessAsyncWrite">
            <summary>
            Process the asynchronous writing queue.
            </summary>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.WriteObject(System.UInt64,System.Object)">
            <summary>
            Write an object to the corresponding temporary file.
            </summary>
            <param name="fileId"></param>
            <param name="data"></param>
        </member>
        <member name="F:VRage.Session.MySessionPersistence.CheckWriteStreams">
            <summary>
            Whether to collect and report the stack traces of misbehaving write streams.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionPersistence.m_fileStreams">
            <summary>
            Tracker for open streams.
            </summary>
            <remarks>
            This allows us to verify if the user is still writing to a versioned file when the session wants to save.
            </remarks>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.UntrackStream(VRage.Session.MySessionPersistence.TrackingStream)">
            <summary>
            Stop tracking a stream.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.TrackStream(VRage.Session.MySessionPersistence.TrackingStream)">
            <summary>
            Start tracking a file stream.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.OpenRead(System.UInt64)">
            <summary>
            Check the file state before moving int from the temporary storage to a new save.
            </summary>
            <param name="fileId">The file id to check.</param>
            <returns>A reader for the file.</returns>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.ReportStreams(System.UInt64,VRage.Session.MySessionPersistence.OpenFile)">
            <summary>
            Report a locked file.
            </summary>
            <param name="fileId"></param>
            <param name="of"></param>
        </member>
        <member name="T:VRage.Session.MySessionPersistence.FileAccessState">
            <summary>
            Access state of a file.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionPersistence.m_fileIdCounter">
            <summary>
            Counter used to generate temporary file id's.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionPersistence.NullFileId">
            <summary>
            File id used to represent no file at all.
            </summary>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.GetPathRead(System.String,System.UInt64@)">
            <summary>
            Get the path to a file that is being opened for reading.
            </summary>
            <param name="path">The file path.</param>
            <param name="fileId">The id of the internal temporary file or <see cref="F:VRage.Session.MySessionPersistence.NullFileId"/> if the file has not been modified.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.GetPathWrite(System.String,System.UInt64@)">
            <summary>
            Get the path to a file that is being opened for writing.
            </summary>
            <param name="path">The file path.</param>
            <param name="fileId">The id of the temporary file just created.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.SetPathState(System.String,VRage.Session.MySessionPersistence.FileState)">
            <summary>
            Set the 
            </summary>
            <param name="path"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="F:VRage.Session.MySessionPersistence.OpenFile.DeleteOnClose">
            <summary>
            Whether this file should be removed when all open readers are closed.
            </summary>
        </member>
        <member name="T:VRage.Session.MySessionPersistence.FileInfo">
            <summary>
            Information about a modified file.
            </summary>
            <remarks>
            A modified file is a file that has been removed or overwritten by the session or one of it's components.
            </remarks>
        </member>
        <member name="F:VRage.Session.MySessionPersistence.FileInfo.FileId">
            <summary>
            Id of the corresponding temporary file.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionPersistence.FileInfo.State">
            <summary>
            Current state of the file.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionPersistence.FileInfo.Version">
            <summary>
            Last database version to have modifications to this file.
            </summary>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.FileInfo.ToString">
            <inheritdoc />
        </member>
        <member name="T:VRage.Session.MySessionPersistence.FileState">
            <summary>
            Represents the modification state of a file.
            </summary>
        </member>
        <member name="T:VRage.Session.MySessionPersistence.TrackingStream">
            <summary>
            Stream wrapper that allows us to track if a user is still holding some versioned file open when we want to save the session.
            </summary>
        </member>
        <member name="P:VRage.Session.MySessionPersistence.TrackingStream.FileId">
            <summary>
            Id of the file tracked.
            </summary>
        </member>
        <member name="E:VRage.Session.MySessionPersistence.SaveException">
            <summary>
            Event invoked when an exception is encountered while saving a session.
            </summary>
        </member>
        <member name="E:VRage.Session.MySessionPersistence.SaveComplete">
            <summary>
            Event invoked when the session is saved.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionPersistence.m_currentWork">
            <summary>
            Current tracked save work.
            </summary>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.SaveAsAsync(System.String,System.String)">
            <summary>
            Save the current session to a new path and with a new name.
            </summary>
            <param name="path">The new session path.</param>
            <param name="name">The new name.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.SaveAsync">
            <summary>
            Save the current session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.SaveAs(System.String,System.String)">
            <summary>
            Save the current session to a new path and with a new name.
            </summary>
            <param name="path">The new session path.</param>
            <param name="name">The new name.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.Save">
            <summary>
            Save the current session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.Apply(VRage.Session.MySessionDelta)">
            <summary>
            Save this snapshot.
            </summary>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.SaveAs(VRage.Session.MySessionDelta,System.String)">
            <summary>
            Save this snapshot to the target path.
            </summary>
            <remarks>
            <para>
            All of the existing scene data is also copied to the destination in addition to the deltas contained in this snapshot.
            </para>
            <para>
            When saving a snapshot for a loaded scene use the scene's <see cref="P:VRage.Scene.MyScene.Persistence"/> instead.
            Otherwise any persistence components in there may end up unaware of the save and run out of sync with the in-disk state.
            </para>
            </remarks>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.MoveTempFile(System.String,System.UInt64)">
            <summary>
            Move a temporary file and update our internal data.
            </summary>
            <param name="destPath">Final in disk path.</param>
            <param name="fileId">The file to move.</param>
        </member>
        <member name="F:VRage.Session.MySessionPersistence.LastPersisted">
            <summary>
            Time when the scene was last persisted.
            </summary>
            <remarks>
            Some persistence components may automatically record temporary data to disk. Those are not considered for this member.
            </remarks>
        </member>
        <member name="P:VRage.Session.MySessionPersistence.DataFolders">
            <summary>
            Set of folders where data is stored.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionPersistence.m_dataFolders">
            <summary>
            Folders where persistence components store data.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionPersistence.m_persistenceComponents">
            <summary>
            List of the persistence components on the session.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionPersistence.m_persistenceComponentIndex">
            <summary>
            Mapping of indices to persistence component.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionPersistence.m_perTagComponents">
            <summary>
            Mapping of entity tags to the components that persist them.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionPersistence.m_defaultIndex">
            <summary>
            Index of the default persistence component.
            </summary>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.AddPersistenceHandler(VRage.Session.IMyPersistenceComponent)">
            <summary>
            Register a persistence component.
            </summary>
            <param name="persistence"></param>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.GetComponent(System.Int32)">
            <summary>
            Get the persistence component from it's index.
            </summary>
            <param name="componentIndex"></param>
            <returns></returns>
        </member>
        <member name="F:VRage.Session.MySessionPersistence.m_entityPersistence">
            <summary>
             Mapping of entity id to persistence.
            </summary>
        </member>
        <member name="F:VRage.Session.MySessionPersistence.m_groupPersistence">
            <summary>
             Mapping of group id to persistence.
            </summary>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.VRage#Session#IMyScenePersistence#AddEntity(VRage.Game.Entity.MyEntity)">
            <summary>
            Add the provided entity to the persistence system.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.VRage#Session#IMyScenePersistence#RemoveEntity(VRage.Game.Entity.MyEntity)">
            <summary>
            Remove an entity from persistence.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.VRage#Session#IMyScenePersistence#GetEntityPersistence(VRage.Game.Entity.MyEntity)">
            <summary>
            Get the persistence component responsible for the target entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.VRage#Session#IMyScenePersistence#SetForGroup(VRage.Scene.MyGroup,VRage.Session.IMyPersistenceComponent)">
            <summary>
            Add the provided group to the persistence system.
            </summary>
            <param name="group">The group to add.</param>
            <param name="persistence">The specific persistence component that should persist the group.</param>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.VRage#Session#IMyScenePersistence#RemoveGroup(VRage.Scene.MyGroup)">
            <summary>
            Remove a group from persistence.
            </summary>
            <param name="group">The group to remove.</param>
        </member>
        <member name="M:VRage.Session.MySessionPersistence.VRage#Session#IMyScenePersistence#GetGroupPersistence(VRage.Scene.MyGroup)">
            <summary>
            Get the persistence component responsible for the target group.
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="T:VRage.Session.MySessionLoading">
            <summary>
            Manager of the session load process.
            </summary>
        </member>
        <member name="P:VRage.Session.MySessionLoading.LoadingSession">
            <summary>
            Session being loaded.
            </summary>
        </member>
        <member name="M:VRage.Session.MySessionLoading.IsLoaded">
            <summary>
            Whether the contained session is fully loaded.
            </summary>
        </member>
        <member name="M:VRage.Session.MySessionLoading.WaitForStep(VRage.Session.IMyAsyncSessionLoadStep)">
            <summary>
            Tell the current loading session to wait until the provided load step is completed.
            </summary>
            <param name="loadStep"></param>
        </member>
        <member name="E:VRage.Session.MySessionLoading.OnLoaded">
            <summary>
            Event fired when the session is loaded.
            </summary>
        </member>
        <member name="M:VRage.Session.MySessionLoading.RaiseOnLoaded">
            <summary>
            Notify any handlers that the session is now loaded.
            </summary>
        </member>
        <member name="T:VRage.Session.SessionComponentId">
            <summary>
            Unique identifier in a session for one of it's components.
            </summary>
        </member>
        <member name="T:VRage.Session.MySession">
            <summary>
            Base class for a gameplay session.
            </summary>
        </member>
        <member name="P:VRage.Session.MySession.Static">
            <summary>
            Static reference to the currently loaded session.
            </summary>
        </member>
        <member name="P:VRage.Session.MySession.Components">
            <summary>
            The container of components for this session.
            </summary>
        </member>
        <member name="P:VRage.Session.MySession.Persistence">
            <summary>
            Database used to manage record data for this session.
            </summary>
        </member>
        <member name="P:VRage.Session.MySession.IsDedicated">
            <summary>
            Whether the session is form a dedicated server and has no local player.
            </summary>
        </member>
        <member name="P:VRage.Session.MySession.IsServer">
            <summary>
            Whether the session is a server and might have local player (both dedicated and non-dedicated version).
            </summary>
        </member>
        <member name="P:VRage.Session.MySession.PlayerEntity">
            <summary>
            Local player controlled entity.
            </summary>
        </member>
        <member name="P:VRage.Session.MySession.ElapsedGameTime">
            <summary>
            Elapsed simulation time.
            
            This is incremented every frame the game is not paused.
            </summary>
        </member>
        <member name="P:VRage.Session.MySession.IsPaused">
            <summary>
            Returns true if the game is paused, false otherwise.
            </summary>
        </member>
        <member name="P:VRage.Session.MySession.State">
            <summary>
            The state of the current session.
            </summary>
        </member>
        <member name="P:VRage.Session.MySession.GameUpdateScheduler">
            <summary>
            Manager of all game related session updates.
            </summary>
        </member>
        <member name="P:VRage.Session.MySession.SystemUpdateScheduler">
            <summary>
            Manager for updates that need to run regardless of weather the game is paused or not.
            </summary>
        </member>
        <member name="P:VRage.Session.MySession.Scene">
            <summary>
            Scene contained in this session.
            </summary>
        </member>
        <member name="P:VRage.Session.MySession.DataPath">
            <summary>
            Path where session specific data is saved.
            </summary>
        </member>
        <member name="M:VRage.Session.MySession.VRage#Scene#IMyObjectContainer{VRage#Session#SessionComponentId,VRage#Session#MySessionComponent}#TryGetObject(VRage.Session.SessionComponentId,VRage.Session.MySessionComponent@)">
            <summary>
            Try to find a session component from it's key.
            </summary>
            <param name="key"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Session.MySession.VRage#Scene#IMySceneComponentContainer#TryGetComponent(System.Type,VRage.Scene.IMySceneComponent@)">
            <inheritdoc />
        </member>
        <member name="M:VRage.GUI.Crosshair.IMyCrosshairStateInfo.GetIconsStates">
            <summary>
            Gets any number of icon states for client. (As one client may want draw more than one icon). Do not do heavy computations in this method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.GUI.Crosshair.IMyCrosshairStateInfo.GetHintTexts">
            <summary>
            Returns any number of instructions for the player, e.g. "Press LMB to cut".
            </summary>
            <returns></returns>
        </member>
        <member name="F:VRage.GUI.Crosshair.MyCrosshairIconInfo.SubtypeName">
            <summary>
            Icon name in the atlas.
            </summary>
        </member>
        <member name="F:VRage.GUI.Crosshair.MyCrosshairIconInfo.SizeMultiplier">
            <summary>
            Size multiplier. 1.0f for original size.
            </summary>
        </member>
        <member name="T:VRage.GUI.Crosshair.MyCrosshairIconInfo.IconPosition">
            <summary>
            Position of the crosshair info element.
            </summary>
        </member>
        <member name="F:VRage.GUI.Crosshair.MyCrosshairIconInfo.IconPosition.Center">
            <summary>
            Replaces center of crosshair
            </summary>
        </member>
        <member name="F:VRage.GUI.Crosshair.MyCrosshairIconInfo.IconPosition.TopLeftCorner">
            <summary>
            Positioned in top left corner
            </summary>
        </member>
        <member name="F:VRage.GUI.Crosshair.MyCrosshairIconInfo.IconPosition.TopRightCorner">
            <summary>
            Positioned in top right corner
            </summary>
        </member>
        <member name="F:VRage.GUI.Crosshair.MyCrosshairIconInfo.IconPosition.BelowCrosshair">
            <summary>
            Positioned below crosshair
            </summary>
        </member>
        <member name="F:VRage.GUI.Crosshair.MyCrosshairIconInfo.IconPosition.AboveCrosshair">
            <summary>
            Positioned above crosshair
            </summary>
        </member>
        <member name="F:VRage.GUI.Crosshair.MyCrosshairIconInfo.Position">
            <summary>
            Position of crosshair element
            </summary>
        </member>
        <member name="F:VRage.GUI.Crosshair.MyCrosshairIconInfo.AlphaMultiplier">
            <summary>
            Alpha multiplier (from 0 to 1).
            </summary>
        </member>
        <member name="F:VRage.GUI.Crosshair.MyCrosshairIconInfo.CrosshairVisibilityFlags">
            <summary>
            Indicates when crosshair can be visible (with what settings).
            </summary>
        </member>
        <member name="M:VRage.ModAPI.Components.Entity.IMyCubeBlockSubpartComponent.TryGetSubpart(System.String,VRage.Game.Entity.MyEntity@)">
            <summary>
            Tries to get a subpart by name.
            </summary>
            <param name="name">Name of the subpart</param>
            <param name="subpart">Output of the subpart</param>
            <returns>True if subpart exists, false otherwise</returns>
        </member>
        <member name="M:VRage.ModAPI.Components.Entity.IMyCubeBlockSubpartComponent.SetSubpartTransformation(System.String,VRageMath.Vector3,VRageMath.Quaternion)">
            <summary>
            Sets the transformation of a subpart, relative to its hinge position or bone.
            </summary>
            <param name="subpartName">Name of the subpart.</param>
            <param name="translation">Translation of the subpart.</param>
            <param name="orientation">Orientation of the subpart.</param>
            <returns>False if the specified subpart is not found, true otherwise.</returns>
        </member>
        <member name="M:VRage.ModAPI.Components.Entity.IMyCubeBlockSubpartComponent.TryGetSubpartVisibility(System.String,System.Boolean@)">
            <summary>
            Get the subpart visibility state.
            </summary>
            <param name="name">Name of the subpart.</param>
            <param name="isVisible">Visible or not.</param>
            <returns>True if the subpart was found, false otherwise.</returns>
        </member>
        <member name="M:VRage.ModAPI.Components.Entity.IMyCubeBlockSubpartComponent.SetSubpartVisibility(System.String,System.Boolean)">
            <summary>
            Sets the subpart visibility state.
            </summary>
            <param name="name">Name of the subpart.</param>
            <param name="isVisible">Visible or not.</param>
            <returns>True if the subpart visibility was changed, false otherwise.</returns>
        </member>
        <member name="M:VRage.ModAPI.Components.Entity.IMyCubeBlockSubpartComponent.TryGetSubpartPhysicsEnabled(System.String,System.Boolean@)">
            <summary>
            Get the subpart physics enabled state.
            </summary>
            <param name="name">Name of the subpart.</param>
            <param name="isPhysicsEnabled">Physics enabled or not.</param>
            <returns>True if the subpart was found, false otherwise.</returns>
        </member>
        <member name="M:VRage.ModAPI.Components.Entity.IMyCubeBlockSubpartComponent.SetSubpartPhysicsEnabled(System.String,System.Boolean)">
            <summary>
            Sets the subpart physics enabled state.
            </summary>
            <param name="name">Name of the subpart.</param>
            <param name="isPhysicsEnabled">Physics enabled or not.</param>
            <returns>True if the subpart Physics was changed, false otherwise.</returns>
        </member>
        <member name="P:VRage.ModAPI.Components.Entity.IMyEntityStateComponent.CurrentState">
            <summary>
            The state the entity is currently in.
            </summary>
        </member>
        <member name="M:VRage.ModAPI.Components.Entity.IMyEntityStateComponent.TransitionTo(VRage.Utils.MyStringHash)">
            <summary>
            Transition to another state.
            </summary>
            <param name="newState">The new state to transition to.</param>
            <returns>False if transition failed, true otherwise.</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyCamera.WorldToScreen(VRageMath.Vector3D@)">
            <summary>
            Gets screen coordinates of 3d world pos in 0 - 1 distance where 1.0 is screen width(for X) or height(for Y).
            WARNING: Y is from bottom to top.
            </summary>
            <param name="worldPos">World position.</param>
            <returns>Screen coordinate in 0-1 distance.</returns>
        </member>
        <member name="P:VRage.ModAPI.IMyPhysics.StepsLastSecond">
            <summary>
            Number of physics steps done in last second
            </summary>
        </member>
        <member name="P:VRage.ModAPI.IMyPhysics.SimulationRatio">
            <summary>
            Simulation ratio, when physics cannot keep up, this is smaller than 1
            </summary>
        </member>
        <member name="M:VRage.ModAPI.IMyPhysics.CastLongRay(VRageMath.Vector3D,VRageMath.Vector3D,VRage.ModAPI.IHitInfo@,System.Boolean)">
            <summary>
            Finds closest or any object on the path of the ray from->to. Uses Storage for voxels for faster 
            search but only good for long rays (more or less more than 50m). Use it only in such cases.
            </summary>
            <param name="from">Start of the ray.</param>
            <param name="to">End of the ray.</param>
            <param name="hitInfo">Hit info</param>
            <param name="any">Indicates if method should return any object found (May not be closest)</param>
            <returns>true if hit, false if no hit</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyPhysics.CastRay(VRageMath.Vector3D,VRageMath.Vector3D,System.Collections.Generic.List{VRage.ModAPI.IHitInfo},System.Int32)">
            <summary>
            Cast a ray and returns all matching entities.
            </summary>
            <param name="from">Start of ray.</param>
            <param name="to">End of ray.</param>
            <param name="toList">List of hits</param>
            <param name="raycastFilterLayer">Collision filter.</param>
        </member>
        <member name="M:VRage.ModAPI.IMyPhysics.CastRay(VRageMath.Vector3D,VRageMath.Vector3D,VRage.ModAPI.IHitInfo@,System.Int32)">
            <summary>
            Cast a ray and return first entity.
            </summary>
            <param name="from">Start of ray.</param>
            <param name="to">End of ray.</param>
            <param name="hitInfo">Hit info</param>
            <param name="raycastFilterLayer">Collision filter.</param>
            <returns>true if hit; false if no hit</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyPhysics.CastRay(VRageMath.Vector3D,VRageMath.Vector3D,VRage.ModAPI.IHitInfo@,System.UInt32,System.Boolean)">
            <summary>
            Cast a ray and return first entity.
            </summary>
            <param name="from">Start of ray.</param>
            <param name="to">End of ray.</param>
            <param name="hitInfo">Hit info</param>
            <param name="raycastCollisionFilter">Collision filter.</param>
            <returns>true if hit; false if no hit</returns>
        </member>
        <member name="M:VRage.ModAPI.IMyPhysics.EnsurePhysicsSpace(VRageMath.BoundingBoxD)">
            <summary>
            Ensure aabb is inside only one subspace. If no, reorder.
            </summary>
            <param name="aabb"></param>
        </member>
        <member name="M:VRage.ModAPI.IMyPhysics.GetCollisionLayer(System.String)">
            <summary>
            Given a string, gets the numeric value for the collision layer. Default: 0.
            </summary>
            <param name="strLayer">Name of collision layer. See MyPhysics.CollisionLayers for valid names.</param>
            <returns>Numeric value from MyPhysics.CollisionLayers</returns>
            <remarks>Default string used if not valid: DefaultCollisionLayer</remarks>
        </member>
        <member name="M:VRage.ModAPI.IMyStorage.Save(System.Byte[]@)">
            <summary>
            Gets compressed voxel data
            </summary>
        </member>
        <member name="M:VRage.ModAPI.IMyStorage.ReadRange(VRage.Voxels.MyStorageData,VRage.Voxels.MyStorageDataTypeFlags,System.Int32,VRageMath.Vector3I@,VRageMath.Vector3I@)">
            <summary>
            Reads range of content and/or materials from specified LOD. If you want to write data back later, you must read LOD0 as that is the only writable one.
            </summary>
            <param name="lodVoxelRangeMin">Inclusive.</param>
            <param name="lodVoxelRangeMax">Inclusive.</param>
        </member>
        <member name="M:VRage.ModAPI.IMyStorage.WriteRange(VRage.Voxels.MyStorageData,VRage.Voxels.MyStorageDataTypeFlags,VRageMath.Vector3I@,VRageMath.Vector3I@)">
            <summary>
            Writes range of content and/or materials from cache to storage. Note that this can only write to LOD0 (higher LODs must be computed based on that).
            </summary>
            <param name="voxelRangeMin">Inclusive.</param>
            <param name="voxelRangeMax">Inclusive.</param>
        </member>
        <member name="P:VRage.ModAPI.IMyVoxelBase.VoxelSize">
            <summary>
            The size ofa single voxel in this store.
            </summary>
        </member>
        <member name="T:VRage.ModAPI.MyAPIGatewayShortcuts">
            <summary>
            Links to modapi actions. Delegates are set inside MyAPIGateway.
            VRAGE TODO: This is probably a temporary class helping us to remove sandbox.
            </summary>
        </member>
        <member name="F:VRage.ModAPI.MyAPIGatewayShortcuts.RegisterEntityUpdate">
            <summary>
            Registers entity in update loop.
            Parameters: IMyEntity entity (ref to entity to be registered)
            </summary>
        </member>
        <member name="F:VRage.ModAPI.MyAPIGatewayShortcuts.UnregisterEntityUpdate">
            <summary>
            Unregisters entity from update loop.
            Parameters: IMyEntity entity (ref to entity to be unregistered), bool immediate (default is false)
            </summary>
        </member>
        <member name="T:VRage.Systems.CoordinateSystem.MyCoordinateSystem.MyCreateCoordSysBuffer">
            <summary>
            Used for transporting information about coord system to clients.
            </summary>
        </member>
        <member name="F:VRage.Systems.CoordinateSystem.MyCoordinateSystem.m_worldPosToSnap">
            <summary>
            World position used for selecting coord system.
            </summary>
        </member>
        <member name="P:VRage.Systems.CoordinateSystem.MyCoordinateSystem.SelectedCoordSys">
            <summary>
            Returns id of selected coord system.
            </summary>
        </member>
        <member name="P:VRage.Systems.CoordinateSystem.MyCoordinateSystem.LastSelectedCoordSys">
            <summary>
            Returns id of last selected coord system.
            </summary>
        </member>
        <member name="P:VRage.Systems.CoordinateSystem.MyCoordinateSystem.LocalCoordExist">
            <summary>
            Indicates if there is any selected coord system.
            </summary>
        </member>
        <member name="P:VRage.Systems.CoordinateSystem.MyCoordinateSystem.Visible">
            <summary>
            Indicates if LCS graphic representation is visible.
            </summary>
        </member>
        <member name="M:VRage.Systems.CoordinateSystem.MyCoordinateSystem.GetClosestCoordSys(VRageMath.Vector3D@)">
            <summary>
            Returns closest local coord system.
            </summary>
            <param name="position">World position.</param>
            <returns>Local coord system.</returns>
        </member>
        <member name="M:VRage.Systems.CoordinateSystem.MyCoordinateSystem.GetClosestAlignedCoordSys(VRageMath.MatrixD@,System.Double)">
            <summary>
            Returns closest LCS that transform is aligned to.
            </summary>
            <param name="transform">Transform to test for.</param>
            <param name="gridSize">Grid size to test for.</param>
            <returns>Returns LCS that transform is aligned to. Otherwise null.</returns>
        </member>
        <member name="M:VRage.Systems.CoordinateSystem.MyCoordinateSystem.CoordSysCreated_Client(VRage.Systems.CoordinateSystem.MyCoordinateSystem.MyCreateCoordSysBuffer)">
            <summary>
            Method on client that is called by server. Will Trigger creation of coord system.
            </summary>
            <param name="transform">Origin transform.</param>
            <param name="coordSysId">Coord system id.</param>
        </member>
        <member name="M:VRage.Systems.CoordinateSystem.MyCoordinateSystem.CreateCoordSys_ClientInternal(VRageMath.MyTransformD@,System.Int64)">
            <summary>
            Only creates coord system. Call only on client in reaction on server create.
            </summary>
            <param name="transform">Origin of the coord system.</param>
            <param name="coordSysId">Coord system id that should be used in creation.</param>
        </member>
        <member name="M:VRage.Systems.CoordinateSystem.MyCoordinateSystem.CreateCoordSys(VRage.Game.Entity.MyEntity,System.Boolean)">
            <summary>
            Creates coord system and sends it to clients. Should be called only on server.
            </summary>
            <param name="grid">grid that is an origin.</param>
            <param name="sync"></param>
        </member>
        <member name="M:VRage.Systems.CoordinateSystem.MyCoordinateSystem.CreateCoordSys(VRageMath.MyTransformD,System.Single,System.Int64,System.Boolean)">
            <summary>
            Creates Local Coordinate System.
            </summary>
            <param name="origin">Origin of LCS.</param>
            <param name="gridSize">Block size of the grid.</param>
            <param name="sync">True to sync through multiplayer.</param>
            <param name="coordId">If coord id is set, new LCS will obtain that id.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Systems.CoordinateSystem.MyCoordinateSystem.RemoveCoordSys(System.Int64)">
            <summary>
            Removes coord system.
            </summary>
            <param name="coordSysId">Coord system id.</param>
        </member>
        <member name="M:VRage.Systems.CoordinateSystem.MyCoordinateSystem.RegisterCubeGrid(VRage.Game.Entity.MyEntity,System.Int64)">
            <summary>
            Registers cube grid under provided. If coordinate system does not exist. Registers to closest one.
            </summary>
            <param name="grid"> grid to register.</param>
            <param name="gridData"></param>
            <param name="coordSystemId"></param>
        </member>
        <member name="M:VRage.Systems.CoordinateSystem.MyCoordinateSystem.RegisterCubeGrid(VRage.Game.Entity.MyEntity,VRage.Components.Entity.CubeGrid.MyGridDataComponent,VRage.Systems.CoordinateSystem.MyLocalCoordSys)">
            <summary>
            Registers cube grid under given local coord system.
            </summary>
            <param name="grid"> grid to register.</param>
            <param name="gridData"></param>
            <param name="coordSys">Local coord system.</param>
        </member>
        <member name="M:VRage.Systems.CoordinateSystem.MyCoordinateSystem.UnregisterCubeGrid(VRage.Game.Entity.MyEntity,VRage.Components.Entity.CubeGrid.MyGridDataComponent)">
            <summary>
            Unregisters cube grid from given local coord system.
            </summary>
            <param name="grid">Grid to be unregistered.</param>
            <param name="gridData">Grid data</param>
        </member>
        <member name="M:VRage.Systems.CoordinateSystem.MyCoordinateSystem.SnapWorldPosToClosestGrid(VRageMath.Vector3D@,System.Double,System.Int64)">
            <summary>
            Converts world position to be snapped to closest grid.
            </summary>
            <param name="worldPos">World position.</param>
            <param name="gridSize">Grid size.</param>
            <param name="staticGridAlignToCenter">Is grid align to static.</param>
            <param name="coordSysId">Optional: Coordinate system you want to snap to. If world position is not in bound, it will select closest one.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Systems.CoordinateSystem.MyCoordinateSystem.IsAnyLocalCoordSysExist(VRageMath.Vector3D@)">
            <summary>
            Indicates if position is inside of local coordinates area.
            </summary>
            <param name="worldPos">World position.</param>
            <returns>If true, position is inside of closest local coordinate system.</returns>
        </member>
        <member name="M:VRage.Systems.CoordinateSystem.MyCoordinateSystem.IsTransformAlignedToAnyLCS(VRageMath.MatrixD@,System.Double,System.Int64@)">
            <summary>
            Checks if transform is aligned to any LCS
            </summary>
            <param name="tranform">Transform to check</param>
            <param name="gridSize">Size of the grid to make test for.</param>
            <param name="foundCoordinateSystem">Returns found coordinate system that transform is aligned to.</param>
            <returns>Indicates if transform is aligned correctly to any LCS. If none found, returned coordinate system id will be 0.</returns>
        </member>
        <member name="M:VRage.Systems.CoordinateSystem.MyCoordinateSystem.IsTransformAlignedToLCS(VRageMath.MatrixD@,System.Double,VRage.Systems.CoordinateSystem.MyLocalCoordSys,System.Boolean)">
            <summary>
            Checks if transform is aligned to particular LCS.
            </summary>
            <param name="transform">Tranform to check.</param>
            <param name="gridSize">Size of the grid to make test for.</param>
            <param name="coordSys">LCS for which to check alignment.</param>
            <param name="testContain">If true, will first test if transform pos is inside bounding box of LCS.</param>
            <returns>True if transfrom is aligned to LCS origin.</returns>
        </member>
        <member name="M:VRage.Systems.CoordinateSystem.MyCoordinateSystem.IsTransformsAligned(VRageMath.MatrixD,VRageMath.MatrixD,System.Double)">
            <summary>
            Checks if 2 transforms are aligned to each other with given grid size.
            </summary>
            <param name="transform1">First transform to test for.</param>
            <param name="transform2">Second transform to test for.</param>
            <param name="gridSize">Grid size to test for.</param>
            <returns>True if alligned.</returns>
        </member>
        <member name="M:VRage.Systems.CoordinateSystem.MyCoordinateSystem.ResetSelection">
            <summary>
            Sets last and current selected coordinate system to none.
            </summary>
        </member>
        <member name="M:VRage.Systems.CoordinateSystem.MyCoordinateSystem.GetCoordSysColor(System.Int64)">
            <summary>
            Gets local coordinate system indication color.
            </summary>
            <param name="coordSysId">Local coordinate system ID.</param>
            <returns>Indication color.</returns>
        </member>
        <member name="T:VRage.Systems.CoordinateSystem.MyLocalCoordSys">
            <summary>
            Local coord system.
            </summary>
        </member>
        <member name="F:VRage.Systems.CoordinateSystem.MyLocalCoordSys.m_origin">
            <summary>
            Origin transform.
            </summary>
        </member>
        <member name="F:VRage.Systems.CoordinateSystem.MyLocalCoordSys.m_boundingBox">
            <summary>
            Bouding box of the coord system.
            </summary>
        </member>
        <member name="F:VRage.Systems.CoordinateSystem.MyLocalCoordSys.m_corners">
            <summary>
            Cached corner of the bbox in world coordinates.
            </summary>
        </member>
        <member name="P:VRage.Systems.CoordinateSystem.MyLocalCoordSys.Origin">
            <summary>
            Gets origin transformation of the coord system.
            </summary>
        </member>
        <member name="P:VRage.Systems.CoordinateSystem.MyLocalCoordSys.EntityCounter">
            <summary>
            Indicates how many entities are in this coord system.
            </summary>
        </member>
        <member name="P:VRage.Systems.CoordinateSystem.MyLocalCoordSys.RenderColor">
            <summary>
            Color of the bounding box.
            </summary>
        </member>
        <member name="P:VRage.Systems.CoordinateSystem.MyLocalCoordSys.Id">
            <summary>
            Id if this coord system
            </summary>
        </member>
        <member name="T:VRage.Systems.IErrorReportHandler">
            <summary>
            Defines a handler for error reports.
            </summary>
        </member>
        <member name="M:VRage.Systems.IErrorReportHandler.Handle(System.Collections.Generic.List{System.String})">
            <summary>
            Handle the reporting of the provided log files.
            </summary>
            <param name="logFiles">The log files to upload.</param>
            <returns>Whether the upload process should continue.</returns>
        </member>
        <member name="M:VRage.Systems.IErrorReportHandler.GetAdditionalInfo">
            <summary>
            Get additional information about the logs that will be appended to the uploaded stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Systems.IErrorReportHandler.OnReportSubmitted(System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Called when the reporting is completed.
            </summary>
            <param name="didSucceed">True if it was successfully completed, false otherwise.</param>
            <param name="logFiles">Files sent with the log.</param>
        </member>
        <member name="T:VRage.Systems.ErrorReportAdditionalInfo">
            <summary>
            Additional information returned by error handlers.
            </summary>
        </member>
        <member name="T:VRage.Systems.MyErrorReporterSystem">
            <summary>
            System that handles the uploading of crash and error reports.
            </summary>
        </member>
        <member name="F:VRage.Systems.MyErrorReporterSystem.m_logFiles">
            <summary>
            List of log files that should be uploaded.
            </summary>
        </member>
        <member name="M:VRage.Systems.MyErrorReporterSystem.HandleCommandLine(VRage.Systems.MyErrorReporterSystem.Cli)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Systems.MyErrorReporterSystem.UnhandledExceptionHandler(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>
            Handle any exceptions that were not handled by other systems in the game.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:VRage.Systems.MyErrorReporterSystem.LogCrash(System.Exception)">
            <summary>
            Log an exception that was not, or could not be handled correctly and cause the process to terminate.
            </summary>
            <param name="causeOfFailure"></param>
        </member>
        <member name="T:VRage.Systems.MyErrorReporterSystem.Params">
            <summary>
            Parameters object for the error reporting system.
            </summary>
        </member>
        <member name="P:VRage.Systems.MyErrorReporterSystem.Cli.Prefix">
            <inheritdoc />
        </member>
        <member name="P:VRage.Systems.MyErrorReporterSystem.Cli.Name">
            <inheritdoc />
        </member>
        <member name="F:VRage.Systems.MyErrorReporterSystem.Cli.TestCrash">
            <summary>
            Crash on startup.
            </summary>
        </member>
        <member name="F:VRage.Systems.MyErrorReporterSystem.Cli.NoReport">
            <summary>
            Do not report any error for the current session.
            </summary>
        </member>
        <member name="T:VRage.Systems.MyEngineBootstrapper">
            <summary>
            Initializes and manages the MyFileSystem class.
            </summary>
        </member>
        <member name="F:VRage.Systems.MyEngineBootstrapper.AssertLogSeverity">
            <summary>
            Minimum log severity for an assertion to be triggered.
            </summary>
        </member>
        <member name="M:VRage.Systems.MyEngineBootstrapper.VRage#Engine#IEngineBootstrapper#Bootstrap(VRage.Engine.VRageCore,VRage.Engine.CoreConfiguration,System.String[]@)">
            <inheritdoc cref="M:VRage.Engine.IEngineBootstrapper.Bootstrap(VRage.Engine.VRageCore,VRage.Engine.CoreConfiguration,System.String[]@)"/>
        </member>
        <member name="M:VRage.Systems.MyEngineBootstrapper.Initialize(VRage.Engine.VRageCore,VRage.Systems.MyEngineBootstrapper.Params,VRage.Systems.MyEngineBootstrapper.Args)">
            <summary>
            Initialize file system and log.
            </summary>
            <param name="coreInstance"></param>
            <param name="parameters"></param>
            <param name="commandLine"></param>
        </member>
        <member name="M:VRage.Systems.MyEngineBootstrapper.VRage#Engine#IEngineBootstrapper#EngineShutDown">
            <inheritdoc cref="M:VRage.Engine.IEngineBootstrapper.EngineShutDown"/>
        </member>
        <member name="T:VRage.Systems.MyEngineBootstrapper.Params">
            <summary>
            Xml parameters.
            </summary>
        </member>
        <member name="F:VRage.Systems.MyEngineBootstrapper.Params.CaseSensitive">
            <summary>
            Whether to treat the underlying file system as case sensitive or not.
            </summary>
        </member>
        <member name="F:VRage.Systems.MyEngineBootstrapper.Params.UniqueLogNames">
            <summary>
            the default value of unique log names, this can still be overridden by the command line.
            </summary>
        </member>
        <member name="T:VRage.Systems.MyEngineBootstrapper.Args">
            <summary>
            Command line options
            </summary>
        </member>
        <member name="F:VRage.Systems.MyEngineBootstrapper.Args.ContentPath">
            <summary>
            Content path, where all the application's data should be stored.
            </summary>
            <remarks>
            Default path is "[bin directory]\..\Content".
            </remarks>
        </member>
        <member name="F:VRage.Systems.MyEngineBootstrapper.Args.DataPath">
            <summary>
            User data path, where user settings and saved data are stored.
            </summary>
            <remarks>
            Default path is "%AppData%/AppName".
            </remarks>
        </member>
        <member name="F:VRage.Systems.MyEngineBootstrapper.Args.UniqueLogNames">
            <summary>
            Make log names unique by appending date and time of creation.
            </summary>
        </member>
        <member name="T:VRage.Systems.MyLogUploader">
            <summary>
            Simple file uploader used for error reporting.
            </summary>
        </member>
        <member name="M:VRage.Systems.MyLogUploader.InvokeLogUploader(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Invoke the log uploader process. All log files must be closed before this method is invoked.
            </summary>
            <param name="executablePath"></param>
            <param name="files"></param>
            <param name="destinationUrl"></param>
            <param name="destinationUrlOld"></param>
        </member>
        <member name="M:VRage.Systems.MyLogUploader.UploadLogs(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,VRage.Systems.ErrorReportAdditionalInfo)">
            <summary>
            Upload the provided log files to a remote resource.
            </summary>
            <param name="files"></param>
            <param name="destination"></param>
            <param name="destinationOld"></param>
            <param name="additionalInfo"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Systems.MyLogUploader.TryExtractMetadataFromLog(System.String,VRage.Systems.MyLogUploader.SessionMetadata@)">
            <summary>
            Tries to extract analytics metadata from a given log file.
            </summary>
            <param name="logFilePath">Path to the log file.</param>
            <param name="metadata">Metadata object to fill in.</param>
        </member>
        <member name="M:VRage.Systems.MyLogUploader.TrySendLogsOldFormat(System.String,VRage.Systems.MyLogUploader.SessionMetadata@,System.Tuple{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.Byte[]},System.String,System.String)">
            <summary>
            Submit crash reports using the old reporting format.
            </summary>
            <returns>True if sent successfully, false otherwise.</returns>
        </member>
        <member name="M:VRage.Systems.MyLogUploader.TrySendLogs(System.String,VRage.Systems.MyLogUploader.SessionMetadata@,System.Tuple{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.Byte[]},VRage.Systems.ErrorReportAdditionalInfo@)">
            <summary>
            Submit crash reports using the new reporting format.
            </summary>
            <returns>True if sent successfully, false otherwise.</returns>
        </member>
        <member name="F:VRage.Systems.WorkerSystem.UseSynchronousScheduler">
            <summary>
            Debug flag to force this system to configure workers in single threaded mode.
            </summary>
        </member>
        <member name="T:VRage.Systems.WorkerSystem.Parameters">
            <summary>
            Parameters object for the workers system.
            </summary>
        </member>
        <member name="T:VRage.Systems.WorkerSystem.Parameters.Group">
            <summary>
            Group descriptor.
            </summary>
        </member>
        <member name="F:VRage.Systems.WorkerSystem.Parameters.Group.Id">
            <summary>
            Id of this worker group.
            </summary>
        </member>
        <member name="F:VRage.Systems.WorkerSystem.Parameters.Group.Priority">
            <summary>
            Priority of threads in this worker group.
            </summary>
        </member>
        <member name="F:VRage.Systems.WorkerSystem.Parameters.Group.Min">
            <summary>
            Minimum number of workers in this group.
            </summary>
        </member>
        <member name="F:VRage.Systems.WorkerSystem.Parameters.Group.Ratio">
            <summary>
            Worker ratio with regard to other groups in the same configuration.
            </summary>
        </member>
        <member name="F:VRage.Systems.WorkerSystem.Parameters.Groups">
            <summary>
            List of worker group definitions
            </summary>
        </member>
        <member name="F:VRage.Systems.WorkerSystem.Parameters.DefaultGroup">
            <summary>
            The worker group to use as default.
            </summary>
        </member>
        <member name="F:VRage.Systems.WorkerSystem.Parameters.MaxWorkers">
            <summary>
            Maximum total number of workers.
            </summary>
        </member>
        <member name="F:VRage.Systems.WorkerSystem.Parameters.ForceSynchronous">
            <summary>
            Use the synchronous worker manager instead of the default.
            </summary>
        </member>
        <member name="M:VRage.Systems.WorkerSystem.AfterMetadataInitialized">
            <inheritdoc />
        </member>
        <member name="M:VRage.Systems.MyUpdateComponent.OnUnload">
            <inheritdoc />
        </member>
        <member name="M:VRage.Systems.MyUpdateComponent.RemoveFromUpdate(VRage.Engine.MyTimedUpdate)">
            <summary>
            Returns amount of ticks that passed from adding to the queue.
            </summary>
            <param name="timedUpdate">Callback to remove.</param>
            <returns>Amount of ticks that passed from adding to the queue.</returns>
        </member>
        <member name="M:VRage.Systems.MyUpdateComponent.AddFixedUpdate(VRage.Engine.MyFixedUpdate,System.Int32)">
            <summary>
            Add the fixed update.
            For a method inside entity component, you probably want to use <see cref="!:MyEntityComponent.AddFixedUpdate"/> instead.
            That method calculates priority for you.
            </summary>
            <param name="update">update delegate</param>
            <param name="updateOrder">update priority, lesser number is fired first.</param>
        </member>
        <member name="M:VRage.Systems.MyUpdateComponent.RemoveFixedUpdate(VRage.Engine.MyFixedUpdate)">
            <summary>
            Remove the fixed update.
            </summary>
            <param name="update">update delegate</param>
        </member>
        <member name="M:VRage.Utils.MyDebugWorkTrackerExtensions.Stats(VRage.Utils.MyDebugWorkTracker{System.Int32})">
            Returns last/min/avg/max out of the history
        </member>
        <member name="E:VRage.Input.MyFocusManager.ContextPushed">
            <summary>
            Invoked when a context is pushed onto the stack.
            </summary>
        </member>
        <member name="E:VRage.Input.MyFocusManager.ContextPopped">
            <summary>
            Invoked when a context is popped from the stack.
            </summary>
        </member>
        <member name="M:VRage.Input.MyFocusManager.PushContext(VRage.Game.Input.MyInputContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:VRage.Input.MyFocusManager.Push(VRage.Game.Input.MyInputContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:VRage.Input.MyFocusManager.Peek(VRage.Utils.MyStringHash)">
            <summary>
            Returns input context for given layer. If one does not exist returns null.
            </summary>
            <param name="layer">Layer to check for.</param>
            <returns>Input context on that layer. If null, no input context present.</returns>
        </member>
        <member name="M:VRage.Input.MyFocusManager.Push(VRage.Utils.MyStringHash,VRage.Game.Input.MyInputContext)">
            <summary>
            Push a context to the specified layer.
            
            Any contexts that already occupied that layer or above it will be popped.
            </summary>
            <param name="layer"></param>
            <param name="context"></param>
        </member>
        <member name="M:VRage.Input.MyFocusManager.Pop(VRage.Game.Input.MyInputContext)">
            <summary>
            Pop the specified context, used by the context itself.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:VRage.Inventory.IMyItemActivateHandler">
            <summary>
            Interface for an object that can handle activating inventory items.
            </summary>
        </member>
        <member name="M:VRage.Inventory.IMyItemActivateHandler.CanHandle(VRage.Game.Entity.MyInventoryItem)">
            <summary>
            Used when selecting which handler may handle a given item.
            </summary>
            <param name="item">The item to be handled.</param>
            <returns>True when this handler can activate the provided item.</returns>
        </member>
        <member name="M:VRage.Inventory.IMyItemActivateHandler.Activate(VRage.Game.Entity.MyEntity,VRage.Game.Entity.MyInventoryBase,VRage.Game.Entity.MyInventoryItem,System.Boolean)">
            <summary>
            Handle activation of an item.
            
            This method is only ever invoked after the item has been validated using <see cref="M:VRage.Inventory.IMyItemActivateHandler.CanHandle(VRage.Game.Entity.MyInventoryItem)"/>.
            </summary>
            <param name="target">The target entity that should benefit from activating the item.</param>
            <param name="inventory"></param>
            <param name="item"></param>
            <param name="activate">True if the item is to be activated, false otherwise.</param>
            <returns></returns>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyClipmapFullMeshJob.Clipmap">
            <summary>
            Target clipmap.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyClipmapFullMeshJob.Cell">
            <summary>
            Clipmap cell.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyClipmapFullMeshJob.m_cellData">
            <summary>
            Resulting mesh.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyClipmapFullMeshJob.WorkTracker">
            <summary>
            Work tracker.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyClipmapSewJob.DebugDrawRange">
            <summary>
            Maximum range for debug draw.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyClipmapSewJob.Clipmap">
            <summary>
            Target clipmap.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyClipmapSewJob.Cell">
            <summary>
            Clipmap cell.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyClipmapSewJob.Operation">
            <summary>
            Set of neighboring meshes.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyClipmapSewJob.WorkTracker">
            <summary>
            Work tracker.
            </summary>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyClipmapSewJob.SewChildren(VRage.Voxels.Clipmap.MyVoxelClipmap.CompoundStitchOperation)">
            <summary>
            Sew together child meshes.
            </summary>
            <param name="compound"></param>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyClipmapTiming.Total">
            <summary>
            Total time spent calculating ticks.
            </summary>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyPlanetClipmap.#ctor(VRageMath.Vector3I,VRageMath.MatrixD,System.Single,VRage.Entities.Components.MyVoxelMesherComponent,System.String)">
            <inheritdoc />
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyPlanetClipmap.m_radius">
            <summary>
            The planet's innermost radius
            </summary>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyPlanetClipmap.UpdateHorizonCone(VRageMath.Vector3)">
            <summary>
            Update the cached cone properties.
            </summary>
            <param name="vertex">The cone vertex in local space.</param>
        </member>
        <member name="T:VRage.Voxels.Clipmap.MyUserController">
            <inheritdoc />
            <summary>
            A lod controller that exposes cell creation/manipulation methods to the user.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyUserController.Actor">
             <summary>
             Actor bound to this clipmap.
            
             Users should not touch this from any thread other than the render thread.
             </summary>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyUserController.GetMaxLodInRange(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyUserController.CreateCell(VRageMath.Vector3D,System.Int32)">
            <summary>
            Create a clipmap cell at the specified offset and with provided lod.
            </summary>
            <param name="offset">Local space offset for this mesh.</param>
            <param name="lod">Lod index of this mesh, lod is used to calculate scale and for debug purposes.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyUserController.DeleteCell(System.UInt32)">
            <summary>
            Delete the provided cell.
            </summary>
            <param name="id">Id of the cell to delete.</param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyUserController.UpdateCell(System.UInt32,VRageRender.Voxels.IMyProcessedMesh,System.Int32)">
            <summary>
            Update the mesh contents of a voxel cell.
            </summary>
            <param name="id"></param>
            <param name="data"></param>
            <param name="lod">Optionally change the lod of the mesh.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:VRage.Voxels.Clipmap.MyVoxelClipmap">
            <inheritdoc />
            <summary>
            Lod controller for voxel meshes implemented in the fashion of the classic clipmap paper.
            </summary>
            The original paper:
            https://web.archive.org/web/20160428150805/http://www.cs.virginia.edu/~gfx/Courses/2002/BigData/papers/Texturing/Clipmap.pdf
            
            This implementation extends the ideas presented in the paper to 3 dimensions
            and manages a mesh 'sewing' process that joins the boundaries between meshes.
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.CellBits">
            <summary>
            Log base two of the size of a cell.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.CellSize">
            <summary>
            The size of a cell (always a power of two).
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.m_updateDistance">
            <summary>
            Distance at which we proceed to update a cell.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.m_cache">
            <summary>
            Cell cache for this clipmap instance.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.Ranges">
            <summary>
            Size of each ring cells
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyVoxelClipmap.Cache">
            <summary>
            Cell cached used by this clipmap. Can be null.
            </summary>
            
            The clipmap uses this cache both for storing recently used meshes in case they may be needed again and also when pre-fetching.
            If no cache is provided pre-fetching will be disabled.
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.m_settings">
            <summary>
            Current settings.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.m_settingsChanged">
            <summary>
            Flag that the clipmap settings have changed and need to be reloaded.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyVoxelClipmap.SettingsGroup">
            <summary>
            The settings group this clipmap take it's settings from.
            </summary>
            <seealso cref="T:VRage.Voxels.Clipmap.MyVoxelClipmapSettings"/>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.UpdateSettings(VRage.Voxels.Clipmap.MyVoxelClipmapSettings)">
            <summary>
            Update the clipmap settings.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.ApproximateCellConstitution(VRageMath.Vector3I,System.Int32)">
            <summary>
            Verify if the given cell will contain a surface.
            </summary>
            <param name="cell">The coordinates of the cell.</param>
            <param name="lod">The lod of the cell.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.ProcessCacheHits">
            <summary>
            Process all mesh requests that hit the cache.
            
            This has to be postponed until after the visibility update since feeding the mesh has many side effects.
            </summary>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.HandleCacheEviction(VRage.Voxels.MyCellCoord,VRage.Voxels.Sewing.VrSewGuide)">
            <summary>
            Handle a cell eviction in the clipmap cell cache.
            </summary>
            <param name="coord"></param>
            <param name="guide"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.ProcessUpdates">
            <summary>
            Process all queued cell updates.
            </summary>
            
            Cell render updates are queued because they deal with render data. As a result we must process them on the render thread.
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.UpdateCellData(VRage.Voxels.MyCellCoord,VRage.Voxels.Sewing.VrSewGuide,VRage.Voxels.MyVoxelContentConstitution)">
            <summary>
            Update mesh data for a cell.
            </summary>
            <param name="cell"></param>
            <param name="guide"></param>
            <param name="constitution">The constitution of the range where the mesh was calculated.</param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.FeedMeshResult(VRage.Voxels.MyCellCoord,VRage.Voxels.Sewing.VrSewGuide,VRage.Voxels.MyVoxelContentConstitution)">
            <summary>
            Provide the calculated mesh to it's cell.
            </summary>
            <param name="cell"></param>
            <param name="mesh"></param>
            <param name="constitution"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.UpdateCellRender(VRage.Voxels.MyCellCoord,VRage.Voxels.Clipmap.MyVoxelClipmap.StitchOperation,VRageRender.Voxels.IMyProcessedMesh)">
            <summary>
            Update render data for a cell.
            </summary>
            <param name="coord"></param>
            <param name="stitch"></param>
            <param name="cellData"></param>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.m_stitchWorkTracker">
            <summary>
            Work tracker for sewing.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyVoxelClipmap.StitchOperation.Cell">
            <summary>
            Cell waiting for stitch.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.StitchOperation.Dependencies">
            <summary>
            Neighbors.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.StitchOperation.Guides">
            <summary>
            Meshes to be stitched.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.StitchOperation.Operation">
            <summary>
            Operations to be carried in the mesh.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.StitchOperation.Range">
            <summary>
            Range over which to stitch.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.StitchOperation.Pending">
            <summary>
            Count of pending dependencies.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.StitchOperation.Recalculate">
             <summary>
             Recalculate this operation once done.
            
             Used when the operation is invalidated before completed.
             </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.StitchOperation.BorderOperation">
            <summary>
            Whether this operation contain cells of multiple LODs (in a border).
            </summary>
        </member>
        <member name="T:VRage.Voxels.Clipmap.MyVoxelClipmap.CompoundStitchOperation">
            <summary>
            A stitch operation with child operations, used when a forward neighbor of a cell is inside an inner lod,
            resulting in many meshes to be sewn with.
            </summary>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.CompoundStitchOperation.SetState(VRage.Voxels.Clipmap.MyVoxelClipmap.StitchOperation.OpState)">
            <inheritdoc />
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.m_neighbourOffsets">
            <summary>
            Offsets to the neighbor cells for stitching.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.m_compromizes">
            <summary>
            List of operations to be disabled when a given cell is not available.
            </summary>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.Stitch(VRage.Voxels.MyCellCoord)">
             <summary>
             Schedule stitching for a given cell.
            
             If the cell is a cell in the back of it's lod then additional jobs are scheduled to stitch it to the LODs above.
             Because these jobs all modify the same cell, they are all scheduled as a group in a compound stitch job.
             </summary>
             <param name="cell">The coordinate of the cell to be stitched.</param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.CollectChildStitch(VRage.Voxels.Clipmap.MyVoxelClipmap.CompoundStitchOperation,VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellData,VRage.Voxels.MyCellCoord,VRageMath.Vector3I)">
            <summary>
            Collect meshes of inner lod for child sewing operations.
            </summary>
            <param name="compound">Parent compound stitch operation.</param>
            <param name="parentData">Cell data for the main cell.</param>
            <param name="cell">Cell coordinates.</param>
            <param name="neighbourOffset">Offset of the neighbor to sew with.</param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.PrepareStitch(VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellData,VRage.Voxels.MyCellCoord,VRage.Voxels.Clipmap.MyVoxelClipmap.CompoundStitchOperation,VRage.Voxels.Clipmap.MyVoxelClipmap.StitchOperation)">
            <summary>
            Enqueue a stitch operation based on cell status.
            </summary>
            <param name="parentData"></param>
            <param name="cell"></param>
            <param name="parent">Optional parent compound stitch operation.</param>
            <param name="preallocatedOperation">Optional preallocated operation. Used when setting up compound operations.</param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.TryGetCellAt(VRage.Voxels.MyCellCoord@,VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellData@)">
            <summary>
            Try to find a cell with valid mesh at or above the provided position.
            </summary>
            <param name="cell"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.DispatchStitch(VRage.Voxels.Clipmap.MyVoxelClipmap.StitchOperation)">
            <summary>
            Dispatch the stitch job associated with a given stitch operation.
            </summary>
            <param name="stitch"></param>
            <returns>Whether the stitch was dispatched.</returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.CollectMeshForOperation(VRage.Voxels.Clipmap.MyVoxelClipmap.StitchOperation,VRage.Voxels.MyCellCoord,VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellData)">
             <summary>
             Collect mesh for an operation.
            
             If the operation is a border operation a guide with constant cache is created for a cell that has no mesh.
             </summary>
             <param name="op">Operation</param>
             <param name="cell">Coordinates of the cell.</param>
             <param name="cellData">Cell to fetch the guide from.</param>
             <returns>Whether the cell existed and was ready.</returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.ReadyStitchDependency(VRage.Voxels.Clipmap.MyVoxelClipmap.StitchOperation)">
            <summary>
            State that a dependent cell is ready.
            </summary>
            <param name="stitch"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.CommitStitchOperation(VRage.Voxels.Clipmap.MyVoxelClipmap.StitchOperation)">
            <summary>
            Signal a stitch operation is complete and the job data can return to the pool.
            </summary>
            <param name="stitch"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.ReadyAllStitchDependencies(VRage.Voxels.MyCellCoord)">
            <summary>
            Fire all visibility or normal stitch dependencies for a cell.
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.MakeFulfilled(VRage.Voxels.MyCellCoord)">
            <summary>
            Take a cell coordinate from a stitch operation and toggle it's fulfilled status.
            </summary>
            <param name="fullfiled"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.GetShellCacheForConstitution(VRage.Voxels.MyVoxelContentConstitution)">
            <summary>
            Given a cell, find whether it stands a the forward boundary of it's lod.
            </summary>
            <param name="constitution">The constitution of the cell.</param>
            <returns></returns>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyVoxelClipmap.IsUnloaded">
            <summary>
            Whether we have been unloaded in the renderer.
            </summary>
        </member>
        <member name="E:VRage.Voxels.Clipmap.MyVoxelClipmap.Loaded">
            <summary>
            Event fired when this clipmap is ready.
            </summary>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.MoveUpdate(VRageMath.MatrixD@,VRageMath.BoundingFrustumD,System.Single)">
            <summary>
            Update the clipmap cells after the camera moves relative to the clipmap.
            </summary>
            <param name="view"></param>
            <param name="viewFrustum"></param>
            <param name="farClipping"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.GetMaxLodInRange(System.Single)">
            <inheritdoc />
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.DebugDrawDependencies">
            <summary>
            Whether to draw the mesh dependency graphs when debug drawing clipmaps.
            </summary>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.DebugDraw(VRageMath.MatrixD@)">
            <param name="cameraMatrix"></param>
            <inheritdoc />
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.DebugDrawDependenciesInternal">
            <summary>
            Debug draw mesh dependencies.
            </summary>
        </member>
        <member name="T:VRage.Voxels.Clipmap.MyVoxelClipmap.StitchMode">
            <summary>
            Enum representing the various stitch modes.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.StitchMode.None">
            <summary>
            Leave the gap between meshes
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.StitchMode.BlindMeet">
            <summary>
            Generate meshes exactly up to their neighbors.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.StitchMode.Overlap">
            <summary>
            Overlap meshes by one voxel.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.StitchMode.Stitch">
            <summary>
            Sew meshes to their neighbors.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.UpdateVisibility">
            <summary>
            Whether clipmaps should do visibility updates.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmap.ActiveStitchMode">
            <summary>
            Global stitch mode for all clipmaps.
            </summary>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.GetCachedMesh(VRageMath.Vector3I,System.Int32)">
            <summary>
            Get a cached mesh based on a position contained in it and it's desired lod.
            </summary>
            <param name="coord"></param>
            <param name="lod"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.GetCachedMesh(VRageMath.Vector3I)">
            <summary>
            Look for any loaded mesh containing the provided position.
            </summary>
            <param name="coord"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmap.GetCellBounds(VRage.Voxels.MyCellCoord,System.Boolean)">
             <summary>
             Calculate the boundaries of a render cell based on it's coordinates.
            
             The resulting bounding box is an _inclusive_ range.
             </summary>
             <param name="cell"></param>
             <param name="inLod">When set to true the resulting bounds will be relative to the lod of the cell. Otherwise they will be an absolute range relative to lod0</param>
             <returns></returns>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapCache.DefaultCacheSize">
            <summary>
            Size of the cell cache.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyVoxelClipmapCache.Instance">
            <summary>
            Default cache instance used when none is provided to the clipmap.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapCache.m_cells">
            <summary>
            Actual cache.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapCache.m_evictionHandlers">
            <summary>
            Info about each clipmap in the cache.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapCache.m_lodThreshold">
            <summary>
            Maximum lod for which cells are cached.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyVoxelClipmapCache.LodThreshold">
            <summary>
            Maximum lod for which cells are cached.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyVoxelClipmapCache.CacheUtilization">
            <summary>
            Utilization ratio of the cell cache.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyVoxelClipmapCache.HitRate">
            <summary>
            Rate of cache hits.
            </summary>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapCache.Register(System.UInt32,VRage.Voxels.Clipmap.MyVoxelClipmap)">
            <summary>
            Register a clipmap with this cache.
            </summary>
            <param name="clipmapId">The id of the clipmap.</param>
            <param name="clipmap">The clipmap object.</param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapCache.Unregister(System.UInt32)">
            <summary>
            Unregister a clipmap with this cache.
            
            This automatically evicts all cells cached for that clipmap.
            </summary>
            <param name="clipmapId"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapCache.EvictAll(System.UInt32)">
            <summary>
            Evict all cached cells belonging to the provided clipmap id.
            </summary>
            <param name="clipmapId"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapCache.EvictAll(System.UInt32,VRageMath.BoundingBoxI)">
            <summary>
            Evict all cells from the provided clipmap in the given cell range.
            </summary>
            <param name="clipmapId">The clipmap owning the evicted cells.</param>
            <param name="range">The range of cells to be evicted.</param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapCache.TryRead(System.UInt32,VRage.Voxels.MyCellCoord,VRage.Voxels.Sewing.VrSewGuide@)">
            <summary>
            Try to retrieve cached cell data given it's id.
            </summary>
            <param name="clipmapId">Clipmap owning the cell.</param>
            <param name="cell">The cell coordinate.</param>
            <param name="guide">The cached cell data if any.</param>
            <returns>Whether the cell was found in the cache or not.</returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapCache.IsCached(System.UInt32,VRage.Voxels.MyCellCoord,VRage.Voxels.Sewing.VrSewGuide)">
            <summary>
            Whether a cell is cached.
            </summary>
            <param name="clipmapId"></param>
            <param name="cell"></param>
            <param name="dataGuide"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapCache.Write(System.UInt32,VRage.Voxels.MyCellCoord,VRage.Voxels.Sewing.VrSewGuide)">
            <summary>
            Record mesh data for a cell into the cache, evicting the oldest entry if necessary.
            </summary>
            <param name="clipmapId"></param>
            <param name="cell"></param>
            <param name="guide"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapCache.CycleDebugCounters">
            <summary>
            Cycle the internal hit counter.
            
            This is only for debug purposes and may not be accurate if multiple clipmaps share this cache.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyVoxelClipmapCache.DebugHitCounter">
            <summary>
            Internal cache hit counter.
            
            This is only for debug purposes and may not be accurate if multiple clipmaps share this cache.
            </summary>
        </member>
        <member name="T:VRage.Voxels.Clipmap.MyVoxelClipmapRing">
            <summary>
            Manages a clipmap ring.
            </summary>
            
            The clipmap is comprised of concentric 'rings' (actually they are thick walled boxes, but the original paper calls the rings in the 2D case).
            
            Each ring contains meshes of a specific level of detail.
            
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.m_cells">
            <summary>
            Set of visible cells belonging to this ring.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.m_cellsRemove">
            <summary>
            Set of cells that will be removed upon the current update.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.m_cellsAdd">
            <summary>
            Set of cells that will be added during the current update.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.m_cellsReStitch">
            <summary>
            Set of cells that will be re-stitched as a result of their forward cells having changed.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.Bounds">
            <summary>
            Last bounds of this ring.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.InnerBounds">
            <summary>
            Cached bounds of the ring immediately inside this.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.BoundsChanged">
            <summary>
            Whether the bounds of this ring have changes in the last update.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyVoxelClipmapRing.Lod">
            <summary>
            Level of detail index for this ring.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyVoxelClipmapRing.Cells">
            <summary>
            Dictionary containing all cells that are part of this ring.
            </summary>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.#ctor(VRage.Voxels.Clipmap.MyVoxelClipmap,System.Int32)">
            <summary>
            Create a new ring.
            </summary>
            <param name="clipmap"></param>
            <param name="lod"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.UpdateSize(VRageMath.Vector3I)">
            <summary>
            Change the size of this ring, this will cause it to recalculate from scratch next update.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.Update(VRageMath.Vector3I)">
            <summary>
            Update this ring with respect to the world space position of the camera.
            </summary>
            <param name="relativePosition"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.ProcessChanges">
            <summary>
            Process all queued changes during update, dispatching cell requests and queuing dependencies.
            </summary>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.DispatchStitchingRefreshes">
            <summary>
            Dispatch all changes related to re-stitching.
            
            This have to happen after all changes have been processed for all lods, otherwise you may break stitch dependencies.
            </summary>
        </member>
        <member name="T:VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellStatus">
            <summary>
            Describes the status of a clipmap cell.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellStatus.Pending">
            <summary>
            Waiting for calculation
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellStatus.Calculated">
            <summary>
            Mesh has been calculated, but is not in the scene yet.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellStatus.Empty">
            <summary>
            Known to be empty.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellStatus.Ready">
            <summary>
            Mesh is ready to draw. Render cell exists.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellStatus.MarkedForRemoval">
            <summary>
            Cell is waiting for it's children to be removed.
            </summary>
        </member>
        <member name="T:VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellData">
            <summary>
            Data about a given clipmap cell.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellData.Cell">
            <summary>
            Render counterpart.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellData.Status">
            <summary>
            Status of this cell.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellData.Constitution">
            <summary>
            Constitution of the content of this cell.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellData.Guide">
            <summary>
            Sewing aware container for the mesh.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellData.Visible">
            <summary>
            Whether this cell has been made visible.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellData.Vicinity">
            <summary>
            Cell Vicinity signature.
            </summary>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.DisposeCell(VRageMath.Vector3I,VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellData)">
            <summary>
            Dispose a cell and it's contents.
            </summary>
            <param name="coord"></param>
            <param name="data"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.AddCell(VRageMath.Vector3I)">
             <summary>
             Introduce a new cell.
            
             Newly added cells are calculated, stitched and then post-processed so they can be rendered.
            
             New cells need time to be constructed, as a result they are placed as dependencies for the
             parent cell which invariably needs to be removed, but will do so only when all children are ready.
             </summary>
             <param name="cell"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.RemoveCell(VRageMath.Vector3I)">
            <summary>
            Remove a cell during update.
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.RemoveImmediately(VRageMath.Vector3I,VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellData)">
             <summary>
             Remove the cell right away.
            
             This method is separated from finish remove so we can have more
             control over what code paths can modify cells at which times.
             </summary>
             <param name="cell"></param>
             <param name="cellData"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.FinishAdd(VRageMath.Vector3I)">
            <summary>
            Set the cell to visible when it is finally ready.
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.FinishRemove(VRageMath.Vector3I)">
            <summary>
            Hide and delete a cell whose dependencies are finally ready.
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.UpdateCellData(VRageMath.Vector3I,VRage.Voxels.Sewing.VrSewGuide,VRage.Voxels.MyVoxelContentConstitution)">
             <summary>
             Update cell data about a mesh.
            
            
             When the cell is a back edge cell the mesh will be generated regardless.
             </summary>
             <param name="cell"></param>
             <param name="guide"></param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.UpdateCellRender(VRageMath.Vector3I,VRageRender.Voxels.IMyProcessedMesh)">
            <summary>
            Update a cell's render data.
            </summary>
            <param name="cell"></param>
            <param name="updateData"></param>
            <returns>Whether the update caused a new cell to be created and made visible.</returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.TryGetCell(VRageMath.Vector3I,VRage.Voxels.Clipmap.MyVoxelClipmapRing.CellData@)">
            <summary>
            Get cell data for position.
            </summary>
            <param name="cell"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.IsInnerLodEdge(VRageMath.Vector3I)">
            <summary>
            Check if a cell stands at the back edge of the inner lod.
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.IsInnerLodEdge(VRageMath.Vector3I,System.Int32@)">
            <summary>
            Check if a cell stands at the back edge of the inner lod.
            </summary>
            <param name="cell"></param>
            <param name="innerCornerIndex">The index of the inner lod cell that needs to be stitched to this.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.IsInsideInnerLod(VRageMath.Vector3I)">
            <summary>
            Check if a cell is contained in the inner lod.
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.IsInBounds(VRageMath.Vector3I)">
            <summary>
            Whether the given cell is inside the bounds of this ring.
            </summary>
            <param name="cell">The cell coordinates.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.IsForwardEdge(VRageMath.Vector3I)">
            <summary>
            Whether the given edge stands at the forward boundary of this lod.
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapRing.InvalidateAll">
            <summary>
            Invalidate all cells in this ring.
            </summary>
            This simply discards all cells and re-sets the ring.
        </member>
        <member name="T:VRage.Voxels.Clipmap.MyVoxelClipmapRing.Vicinity">
            <summary>
            Signature of a cell's vicinity.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapRing.Vicinity.Invalid">
            <summary>
            Invalid vicinity mark.
            </summary>
        </member>
        <member name="T:VRage.Voxels.Clipmap.MyVoxelClipmapSettings">
            <summary>
            Descriptor for the configurable parameters of a clipmap.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapSettings.CellSizeLg2">
            <summary>
            Log base 2 of the cell size, this is expressed as such since cells are required to be a power of two in size.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapSettings.LodRanges">
            <summary>
            Ranges for each lod.
            
            There must be exactly MyClipmap.LodCount entries in the array and they must be such that LodRanges[i] &lt;= LodRanges[i + 1].
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyVoxelClipmapSettings.IsValid">
            <summary>
            Whether the contents of the settinmmgs are valid.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapSettings.Default">
            <summary>
            Default settings for the clipmap.
            </summary>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapSettings.Create(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a settings instance from simpler parameters.
            </summary>
            <param name="cellBits"></param>
            <param name="lod0Size"></param>
            <param name="lodSize"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapSettings.SetSettingsForGroup(System.String,VRage.Voxels.Clipmap.MyVoxelClipmapSettings)">
            <summary>
            Update or add clipmap settings for a group.
            </summary>
            
            Settings gropups are named sets of settings used when there are different settings required for different clipmaps.
            Generally we use that to distinguish between 'small' and planet sized voxel maps.
            
            <param name="group">Name of the group.</param>
            <param name="settings">the settings for the group.</param>
        </member>
        <member name="M:VRage.Voxels.Clipmap.MyVoxelClipmapSettings.GetSettings(System.String)">
            <summary>
            Get settings for a named group.
            </summary>
            <param name="settingsGroup">The name of the group.</param>
            <returns>The group settings or default.</returns>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapSettingsPresets.NormalSettings">
            <summary>
            Settings for normal stones.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyVoxelClipmapSettingsPresets.PlanetSettings">
            <summary>
            Settings for planets
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyClipmapMeshJob.Clipmap">
            <summary>
            Target clipmap.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyClipmapMeshJob.Cell">
            <summary>
            Clipmap cell.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Clipmap.MyClipmapMeshJob.m_meshAndGuide">
            <summary>
            Resulting mesh.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Clipmap.MyClipmapMeshJob.WorkTracker">
            <summary>
            Work tracker.
            </summary>
        </member>
        <member name="T:VRage.Voxels.Mesh.MyIsoMeshTaylor">
            <summary>
            Class responsible for stitching Iso-meshes together. This class will essentially contour the gap in between provided meshes.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Mesh.MyIsoMeshTaylor.Instance">
            <summary>
            Current thread's global taylor instance.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Mesh.MyIsoMeshTaylor.NativeInstance">
            <summary>
            Current thread's global taylor instance.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Mesh.MyIsoMeshTaylor.FaceOffsets">
            <summary>
            Offsets to the next cube in the mesh grid for each axis.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Mesh.MyIsoMeshTaylor.m_minRelativeLod">
            <summary>
            Lod difference between the smallest lod (m_lod) and the mesh at m_meshes[0].
            </summary>
        </member>
        <member name="M:VRage.Voxels.Mesh.MyIsoMeshTaylor.GenerateQuads">
            <summary>
            Generate all quads for the buffer, this is actually similar to how our dual contouring works.
            </summary>
        </member>
        <member name="M:VRage.Voxels.Mesh.MyIsoMeshTaylor.TranslateVertex(VRage.Voxels.Mesh.MyIsoMeshTaylor.Vx@)">
            <summary>
            Ensures the primary mesh conmtains the provided vertex and translates the reference to the matching vertex in that mesh.
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="F:VRage.Voxels.Mesh.MyIsoMeshTaylor.VertexGenerator.m_createdVertices">
            <summary>
            Maps buffer positions to generated vertices.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Mesh.MyIsoMeshTaylor.VertexGenerator.m_generatedPairs">
            <summary>
            Maps generated vertices to their correspondants on the  neighbouring mesh if any.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Mesh.MyIsoMeshTaylor.VertexGenerator.m_adjacentVertices">
            <summary>
            Maps generated vertices to adjacent vertices.
            </summary>
        </member>
        <member name="M:VRage.Voxels.Mesh.MyIsoMeshTaylor.VertexGenerator.FindGoodNeighbour(System.Int32,VRage.Game.Voxels.MyVoxelQuad@)">
            <summary>
            Look for a close enough neighbour, we only use neighbours that are directly adjacent.
            </summary>
            <param name="index">Vertex index in the quad.</param>
            <param name="quad"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Mesh.MyIsoMeshTaylor.VertexGenerator.CountTriangles(System.Int32,System.Int32,VRage.Game.Voxels.MyVoxelQuad@)">
            <summary>
            Count how many triangles are left if the provided index of the quad is replaced with the given ccorner.
            </summary>
            <param name="corner"></param>
            <param name="index"></param>
            <param name="quad"></param>
        </member>
        <member name="F:VRage.Voxels.Mesh.MyIsoMeshTaylor.Vx.Mesh">
            <summary>
            Index of the mesh that contains this vertex, if the mesh or the vertex is not available this will be set to -1.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Mesh.MyIsoMeshTaylor.Vx.OverIso">
            <summary>
            Signed distance in the voxel field for this position.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Mesh.MyIsoMeshTaylor.Vx.Index">
            <summary>
            Index of the vertex in the mesh.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Mesh.MyIsoMeshTaylor.Vx.Valid">
            <summary>
            Wether this represents a valid index.
            </summary>
        </member>
        <member name="F:VRage.Voxels.Mesh.MyIsoMeshTaylor.Vx.Invalid">
            <summary>
            Description of an invalid vertex reference.
            </summary>
        </member>
        <member name="T:VRage.Voxels.Mesh.MyIsoMeshStitch">
            <summary>
            Describes an isomesh and all the data required to stitch it to other iso-meshes.
            </summary>
        </member>
        <member name="M:VRage.Voxels.Mesh.MyIsoMeshStitch.#ctor(VRage.Voxels.MyIsoMesh,VRage.Voxels.MyStorageData)">
            <summary>
            Create a new mesh stitch helper, meshes to be stitched need to record
            the sign field at the edges to properly combine them with other meshes.
            </summary>
            <param name="mesh"></param>
            <param name="meshContent"></param>
        </member>
        <member name="M:VRage.Voxels.Mesh.MyIsoMeshStitch.TryGetVertex(VRageMath.Vector3I,System.UInt16@)">
            <summary>
            Try to retrieve the vertex at the given edge position.
            </summary>
            <param name="coord"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.Mesh.MyIsoMeshStitch.Reset">
            <summary>
            Reset the mesh to it's original configuration.
            </summary>
        </member>
        <member name="P:VRage.Voxels.Mesh.MyIsoMeshStitch.IsStitched">
            <summary>
            Whether this mesh has additional vertices/triangles added for stitching.
            </summary>
        </member>
        <member name="T:VRage.Voxels.DualContouring.MyMesherResult">
            <summary>
            Struct describing the result of contouring a range of voxels.
            
            The range can either be totally empty (all signed distances &lt; 0), totally full (all signed distances &gt; 0), or mixed.
            Only the later will
            </summary>
        </member>
        <member name="F:VRage.Voxels.DualContouring.MyMesherResult.Constitution">
            <summary>
            The constitution of the content for the range of voxels that was contoured.
            
            If this is not mixed then the mesh should be null.
            </summary>
        </member>
        <member name="F:VRage.Voxels.DualContouring.MyMesherResult.Mesh">
            <summary>
            The generated mesh if any.
            </summary>
        </member>
        <member name="P:VRage.Voxels.DualContouring.MyMesherResult.MeshProduced">
            <summary>
            Whether this result contains a mesh.
            </summary>
        </member>
        <member name="M:VRage.Voxels.DualContouring.MyMesherResult.#ctor(VRage.Voxels.VrVoxelMesh)">
            <summary>
            Create a new result from a mesh.
            </summary>
            <remarks>The constitution is automatically set to mixed.</remarks>
            <param name="mesh"></param>
        </member>
        <member name="M:VRage.Voxels.DualContouring.MyMesherResult.Dispose">
            <inheritdoc />
        </member>
        <member name="F:VRage.Voxels.DualContouring.MyDualContouringMesher.Postprocess">
             <summary>
             Whether to post process generated meshes.
            
             Can be set to false for debugging and testing purposes.
             </summary>
        </member>
        <member name="M:VRage.Voxels.DualContouring.MyDualContouringMesher.Calculate(VRage.Entities.Components.MyVoxelMesherComponent,System.Int32,VRageMath.Vector3I,VRageMath.Vector3I,VRage.Voxels.MyStorageDataTypeFlags,VRage.Game.Voxels.MyVoxelRequestFlags,VRage.Voxels.VrVoxelMesh)">
            <summary>
            Calculate a voxel mesh.
            
            Given the size sz of the range requested the resulting mesh will have sz -1 vertices (given it's dual nature),
            and sz -2 quads 9given that quads are dual to vertices.
            </summary>
            <param name="mesherComponent">The Voxel mesher entity component responsible for this request.</param>
            <param name="lod">The level of detail requested.</param>
            <param name="voxelStart">The starting range in voxels for the request.</param>
            <param name="voxelEnd">End range in voxels to use.</param>
            <param name="properties">Which properties are to be computed.</param>
            <param name="flags">Request flags to pass onto the data request performed by the contour.</param>
            <param name="target">Mesh to store results into, this mesh will be cleared regardless of the result being empty.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Voxels.DualContouring.MyDualContouringMesher.GenerateQuads(System.Byte,System.UInt16[],System.Collections.Generic.List{VRage.Game.Voxels.MyVoxelQuad})">
             <summary>
             Given a vertex configuration determine the quads required to correctly connect those vertices.
            
             To build a cube mask:
              - assign every vertex in a cube an index equal to its (x,y,z) (dot) (1, 2, 4).
              - for every corner that has a positive sign, assign the mask bit given by it's index to one.
              - leave remaining bits in the mask assigned to 0.
             </summary>
             <param name="cubeMask"></param>
        </member>
        <member name="F:VRage.Voxels.DualContouring.MyDualContouringMesher.EdgeTable">
             <summary>
             Tells based on a cube iso-configuration which edges are crossed by the isosurface
            
             The standard MC table and diagrams from the original implementations and papers index the cube indices as a rotation in the xy plane:
             Namely the indices for (0,0), (1,0), (0,1) and (1,1) being 0, 1, 3 and 2 repectivelly.
            
             This can be confusing in many cases where one would expect a mo0re traditional Z curve order.
             So the table here was re ordered in Z order.
            
            
             Here is a good page about marching cubes.
             http://paulbourke.net/geometry/polygonise/
             </summary>
        </member>
        <member name="F:VRage.Voxels.MyPrecalcComponent.MaxPrecalcTime">
            <summary>
            Maximum calculation time in milliseconds
            </summary>
        </member>
        <member name="F:VRage.Voxels.MyPrecalcComponent.DebugDrawSorted">
            <summary>
            Enable debug draw.
            </summary>
        </member>
        <member name="P:VRage.Voxels.MyPrecalcComponent.IsoMesherType">
            <summary>
            The IsoMesher type used by precalc jobs.
            </summary>
        </member>
        <member name="P:VRage.Voxels.MyPrecalcComponent.PendingWorkCount">
            <summary>
            Number of pending work items in the pre-calc component queue.
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextAreYouSureYouWantToExit">
            <summary>
            Are you sure you want to exit?
            </summary>
        </member>
        <member name="F:MyCommonTexts.AssignControlKeyboard">
            <summary>
            Please press a key
            </summary>
        </member>
        <member name="F:MyCommonTexts.AssignControlMouse">
            <summary>
            Please click a mouse button
            </summary>
        </member>
        <member name="F:MyCommonTexts.AssignControlToActionCaption">
            <summary>
            Assign a shortcut to {0} action
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsButtonAudio">
            <summary>
            Audio
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionAudioOptions">
            <summary>
            Audio Options
            </summary>
        </member>
        <member name="F:MyCommonTexts.Cancel">
            <summary>
            Cancel
            </summary>
        </member>
        <member name="F:MyCommonTexts.CanNotAssignControl">
            <summary>
            CANNOT ASSIGN CONTROL
            </summary>
        </member>
        <member name="F:MyCommonTexts.LoadScreenButtonContinueLastGame">
            <summary>
            Continue last
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlAlreadyAssigned">
            <summary>
            {0} is already assigned to {1}. Remove the original control?
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlIsNotValid">
            <summary>
            The pressed key may not be assigned to controls.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionControls">
            <summary>
            Control Options
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionBindings">
            <summary>
            Binding Options
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonCredits">
            <summary>
            Credits
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysDelete">
            <summary>
            Delete
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysDown">
            <summary>
            Down
            </summary>
        </member>
        <member name="F:MyCommonTexts.DoYouWantToKeepTheseSettingsXSecondsRemaining">
            <summary>
            Do you want to keep these settings? {0} seconds remaining.
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysEnd">
            <summary>
            End
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonExitToMainMenu">
            <summary>
            Exit to main menu
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonExitToWindows">
            <summary>
            Exit to Windows
            </summary>
        </member>
        <member name="F:MyCommonTexts.FieldOfView">
            <summary>
            Field of view
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsButtonGame">
            <summary>
            Game
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionDisplayOptions">
            <summary>
            Display Options
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionGameOptions">
            <summary>
            Game Options
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsControls_Gamepad">
            <summary>
            Gamepad
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsControls_AnalogAxes">
            <summary>
            Analog
            </summary>
        </member>
        <member name="F:MyCommonTexts.GameVolume">
            <summary>
            Sound volume
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeGeneral">
            <summary>
            General
            </summary>
        </member>
        <member name="F:MyCommonTexts.HardwareCursor">
            <summary>
            Hardware cursor
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Help">
            <summary>
            Help
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysHome">
            <summary>
            Home
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysInsert">
            <summary>
            Insert
            </summary>
        </member>
        <member name="F:MyCommonTexts.InvertMouseX">
            <summary>
            Invert mouse X axis
            </summary>
        </member>
        <member name="F:MyCommonTexts.InvertMouseX_Tooltip">
            <summary>
            Inverting the mouse X axis will make the cursor horizontally move in the opposite direction of the mouse.
            </summary>
        </member>
        <member name="F:MyCommonTexts.InvertMouseY">
            <summary>
            Invert mouse Y axis
            </summary>
        </member>
        <member name="F:MyCommonTexts.InvertMouseY_Tooltip">
            <summary>
            Inverting the mouse Y axis will make the cursor vertically move in the opposite direction of the mouse.
            </summary>
        </member>
        <member name="F:MyCommonTexts.Joystick">
            <summary>
            Joystick or gamepad
            </summary>
        </member>
        <member name="F:MyCommonTexts.Joystick_Tooltip">
            <summary>
            Select which additional control input you wish to use.
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickButtonLeft">
            <summary>
            JDLeft
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickButtonRight">
            <summary>
            JDRight
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickButtonUp">
            <summary>
            JDUp
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickButtonDown">
            <summary>
            JDDown
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickSensitivity">
            <summary>
            Joystick sensitivity
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickSensitivity_Tooltip">
            <summary>
            Joystick sensitivity determines how much the joystick axis will move the character, etc.
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickExponent">
            <summary>
            Joystick gradual precision
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickExponent_Tooltip">
            <summary>
            Joystick precision affects how fast the value of the joystick's axis will increase.
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickDeadzone">
            <summary>
            Joystick deadzone width
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickDeadzone_Tooltip">
            <summary>
            Joystick deadzone is the area where the joystick produces no effect. This is particularly useful for joysticks that are old, damaged, or very inaccurate at low values.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsControls_Keyboard">
            <summary>
            Keyboard
            </summary>
        </member>
        <member name="F:MyCommonTexts.Language">
            <summary>
            Language
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysLeft">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysLeftAlt">
            <summary>
            LAlt
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysLeftControl">
            <summary>
            LCtrl
            </summary>
        </member>
        <member name="F:MyCommonTexts.LeftMouseButton">
            <summary>
            Left Click
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysLeftShift">
            <summary>
            LShift
            </summary>
        </member>
        <member name="F:MyCommonTexts.LoadScreenButtonLoad">
            <summary>
            Load
            </summary>
        </member>
        <member name="F:MyCommonTexts.LoadingPleaseWaitUppercase">
            <summary>
            LOADING, PLEASE WAIT
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionError">
            <summary>
            ERROR
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionPleaseConfirm">
            <summary>
            PLEASE CONFIRM
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionExit">
            <summary>
            EXIT
            </summary>
        </member>
        <member name="F:MyCommonTexts.MiddleMouseButton">
            <summary>
            Middle Click
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsControls_Mouse">
            <summary>
            Mouse
            </summary>
        </member>
        <member name="F:MyCommonTexts.MouseSensitivity">
            <summary>
            Mouse sensitivity
            </summary>
        </member>
        <member name="F:MyCommonTexts.MouseSensitivity_Tooltip">
            <summary>
            A low sensitivity value will make the mouse cursor move less compared to a high value.
            </summary>
        </member>
        <member name="F:MyCommonTexts.MouseButton4">
            <summary>
            Mouse 4
            </summary>
        </member>
        <member name="F:MyCommonTexts.MouseButton5">
            <summary>
            Mouse 5
            </summary>
        </member>
        <member name="F:MyCommonTexts.MouseButton6">
            <summary>
            Mouse 6
            </summary>
        </member>
        <member name="F:MyCommonTexts.MouseButton7">
            <summary>
            Mouse 7
            </summary>
        </member>
        <member name="F:MyCommonTexts.MouseButton8">
            <summary>
            Mouse 8
            </summary>
        </member>
        <member name="F:MyCommonTexts.Mouse_XAxis">
            <summary>
            X Axis
            </summary>
        </member>
        <member name="F:MyCommonTexts.Mouse_YAxis">
            <summary>
            Y Axis
            </summary>
        </member>
        <member name="F:MyCommonTexts.Mouse_WheelUp">
            <summary>
            Wheel Up
            </summary>
        </member>
        <member name="F:MyCommonTexts.Mouse_WheelDown">
            <summary>
            Wheel Down
            </summary>
        </member>
        <member name="F:MyCommonTexts.Mouse_Wheel">
            <summary>
            Mouse Wheel
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeNavigation">
            <summary>
            Navigation
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionNewWorld">
            <summary>
            New World
            </summary>
        </member>
        <member name="F:MyCommonTexts.No">
            <summary>
            No
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysNumPad0">
            <summary>
            Num 0
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysNumPad1">
            <summary>
            Num 1
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysNumPad2">
            <summary>
            Num 2
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysNumPad3">
            <summary>
            Num 3
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysNumPad4">
            <summary>
            Num 4
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysNumPad5">
            <summary>
            Num 5
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysNumPad6">
            <summary>
            Num 6
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysNumPad7">
            <summary>
            Num 7
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysNumPad8">
            <summary>
            Num 8
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysNumPad9">
            <summary>
            Num 9
            </summary>
        </member>
        <member name="F:MyCommonTexts.Ok">
            <summary>
            OK
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionOptions">
            <summary>
            Options
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysPageDown">
            <summary>
            PgDown
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysPageUp">
            <summary>
            PgUp
            </summary>
        </member>
        <member name="F:MyCommonTexts.RecommendedAspectRatio">
            <summary>
            Recommended aspect ratio: {0}
            </summary>
        </member>
        <member name="F:MyCommonTexts.Revert">
            <summary>
            Defaults
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysRight">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysRightAlt">
            <summary>
            RAlt
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysRightControl">
            <summary>
            RCtrl
            </summary>
        </member>
        <member name="F:MyCommonTexts.RightMouseButton">
            <summary>
            Right Click
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysRightShift">
            <summary>
            RShift
            </summary>
        </member>
        <member name="F:MyCommonTexts.SelectControl">
            <summary>
            SELECT CONTROL
            </summary>
        </member>
        <member name="F:MyCommonTexts.ServerShutdownNotificationCaption">
            <summary>
            SCHEDULED SERVER SHUTDOWN
            </summary>
        </member>
        <member name="F:MyCommonTexts.SorryButSelectedSettingsAreNotSupportedByYourHardware">
            <summary>
            Sorry, but the settings you have chosen are not supported by your hardware.
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysSpace">
            <summary>
            Space
            </summary>
        </member>
        <member name="F:MyCommonTexts.StartGameInProgressPleaseWait">
            <summary>
            Starting game … please wait.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_StrafeLeft">
            <summary>
            Strafe left
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_StrafeRight">
            <summary>
            Strafe right
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeSystems1">
            <summary>
            Systems 1
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeSystems2">
            <summary>
            Systems 2
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysTab">
            <summary>
            Tab
            </summary>
        </member>
        <member name="F:MyCommonTexts.TitleFailedToStartInternetBrowser">
            <summary>
            Failed to start the browser.
            </summary>
        </member>
        <member name="F:MyCommonTexts.UnknownControl_None">
            <summary>
            none
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysUp">
            <summary>
            Up
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_UseOrInteract">
            <summary>
            Use / Interact
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_PickUp">
            <summary>
            Pick Up
            </summary>
        </member>
        <member name="F:MyCommonTexts.VerticalSync">
            <summary>
            Vertical sync
            </summary>
        </member>
        <member name="F:MyCommonTexts.CaptureMouse">
            <summary>
            Capture Mouse
            </summary>
        </member>
        <member name="F:MyCommonTexts.VideoMode">
            <summary>
            Video mode
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeToolsOrWeapons">
            <summary>
            Tools / Weapons
            </summary>
        </member>
        <member name="F:MyCommonTexts.Yes">
            <summary>
            Yes
            </summary>
        </member>
        <member name="F:MyCommonTexts.Disabled">
            <summary>
            Disabled
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickRotationXpos">
            <summary>
            JRX+
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickRotationYpos">
            <summary>
            JRY+
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickRotationZpos">
            <summary>
            JRZ+
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickSlider1pos">
            <summary>
            JS1+
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickSlider2pos">
            <summary>
            JS2+
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickRotationXneg">
            <summary>
            JRX-
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickRotationYneg">
            <summary>
            JRY-
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickRotationZneg">
            <summary>
            JRZ-
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickSlider1neg">
            <summary>
            JS1-
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoystickSlider2neg">
            <summary>
            JS2-
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysDecimal">
            <summary>
            Num .
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysBackslash">
            <summary>
            Bkslash
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysComma">
            <summary>
            Comma
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysMinus">
            <summary>
            Minus
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysOpenBracket">
            <summary>
            [
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysCloseBracket">
            <summary>
            ]
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysPeriod">
            <summary>
            Period
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysPipe">
            <summary>
            Pipe
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysPlus">
            <summary>
            Plus
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysQuestion">
            <summary>
            Slash
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysQuotes">
            <summary>
            Quote
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysSemicolon">
            <summary>
            Colon
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysTilde">
            <summary>
            ~
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysMultiply">
            <summary>
            Num *
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysDivide">
            <summary>
            Num /
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysAdd">
            <summary>
            Num +
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysSubtract">
            <summary>
            Num −
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysCapsLock">
            <summary>
            Caps Lock
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysEnter">
            <summary>
            Enter
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysEscape">
            <summary>
            Escape
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysBackspace">
            <summary>
            Backsp.
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysControl">
            <summary>
            Ctrl
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysShift">
            <summary>
            Shift
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysAlt">
            <summary>
            Alt
            </summary>
        </member>
        <member name="F:MyCommonTexts.ApplyingPleaseWait">
            <summary>
            Applying changes … please wait
            </summary>
        </member>
        <member name="F:MyCommonTexts.MP_YouHaveBeenKilled">
            <summary>
            You have been killed
            </summary>
        </member>
        <member name="F:MyCommonTexts.MusicVolume">
            <summary>
            Music volume
            </summary>
        </member>
        <member name="F:MyCommonTexts.VideoAdapter">
            <summary>
            Video adapter
            </summary>
        </member>
        <member name="F:MyCommonTexts.DefaultFOV">
            <summary>
            Default: {0:0}°
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldLoaded">
            <summary>
            World {0} loaded
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Screenshot">
            <summary>
            Screenshot
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_PreviousColor">
            <summary>
            Prev. Color or Camera
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_NextColor">
            <summary>
            Next Color or Camera
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSaved">
            <summary>
            World '{0}' saved
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprints">
            <summary>
            Blueprints
            </summary>
        </member>
        <member name="F:MyCommonTexts.Factions">
            <summary>
            Factions
            </summary>
        </member>
        <member name="F:MyCommonTexts.BlueprintMaterials">
            <summary>
            Blueprint Materials
            </summary>
        </member>
        <member name="F:MyCommonTexts.ProductionQueue">
            <summary>
            Production Queue
            </summary>
        </member>
        <member name="F:MyCommonTexts.LoadScreenButtonEditSettings">
            <summary>
            Edit Settings
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionCustomWorld">
            <summary>
            New World
            </summary>
        </member>
        <member name="F:MyCommonTexts.ErrorNameTooLong">
            <summary>
            Name is too long (max 128 characters allowed)
            </summary>
        </member>
        <member name="F:MyCommonTexts.ErrorNameTooShort">
            <summary>
            Name is too short (min 5 characters required)
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_GameModeSurvival">
            <summary>
            Survival
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_Description_GameModeSurvival">
            <summary>
            Play the game in survival mode. Prove to the world how great an engineer you are!
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonJoinWorld">
            <summary>
            Join World
            </summary>
        </member>
        <member name="F:MyCommonTexts.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_OnlineMode">
            <summary>
            Online Mode
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_OnlineModeToolTip">
            <summary>
            Selects the online mode for the world. Offline: Disables any network access, including Steam workshop. This setting cannot be changed while in-game. Private: Enables multiplayer but friends can only join if invited through the Steam Friends list. Friends: Enables multiplayer and allows only friends to join. Public: Enables multiplayer and allows all players to join.
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_OnlineModeOffline">
            <summary>
            Offline
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_OnlineModePrivate">
            <summary>
            Private
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_OnlineModePublic">
            <summary>
            Public
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenNewWorldButtonQuickstart">
            <summary>
            Quickstart
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextAreYouSureYouWantToDeleteSave">
            <summary>
            Are you sure you want to delete '{0}'?
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionLoadWorld">
            <summary>
            Load World
            </summary>
        </member>
        <member name="F:MyCommonTexts.LoadScreenButtonSaveAs">
            <summary>
            Save As
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_GameModeCreative">
            <summary>
            Creative
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_Description_GameModeCreative">
            <summary>
            Play the game in creative mode. No restrictions, no progression, just you and the blocks.
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_Description_GameModeCustom">
            <summary>
            Customize the game however you want it. This is where you go to play with mods.
            </summary>
        </member>
        <member name="F:MyCommonTexts.PlayerCharacter">
            <summary>
            Player Character
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_AutoSave">
            <summary>
            Auto-save
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextDoYouWantToSaveYourProgress">
            <summary>
            Do you want to save your progress?
            </summary>
        </member>
        <member name="F:MyCommonTexts.SaveWorld">
            <summary>
            Save World
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonSave">
            <summary>
            Save
            </summary>
        </member>
        <member name="F:MyCommonTexts.SavingPleaseWait">
            <summary>
            Saving ... please wait
            </summary>
        </member>
        <member name="F:MyCommonTexts.Advanced">
            <summary>
            Advanced
            </summary>
        </member>
        <member name="F:MyCommonTexts.AdvancedControls">
            <summary>
            Advanced Controls
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Backward">
            <summary>
            Backward
            </summary>
        </member>
        <member name="F:MyCommonTexts.BasicControls">
            <summary>
            Basic Controls
            </summary>
        </member>
        <member name="F:MyCommonTexts.Close">
            <summary>
            Close
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_DownOrCrouch">
            <summary>
            Down or Crouch
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_FirstOrThirdPerson">
            <summary>
            First-person / Third-person
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Forward">
            <summary>
            Forward
            </summary>
        </member>
        <member name="F:MyCommonTexts.NextPage">
            <summary>
            Next page
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationNeedShowHelpScreen">
            <summary>
            Press {0} for help and tutorials
            </summary>
        </member>
        <member name="F:MyCommonTexts.PreviousPage">
            <summary>
            Previous page
            </summary>
        </member>
        <member name="F:MyCommonTexts.ShowControlsHints">
            <summary>
            Show controls hints
            </summary>
        </member>
        <member name="F:MyCommonTexts.SteamGuide">
            <summary>
            Tutorials
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_UpOrJump">
            <summary>
            Up or Jump
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_CubeRotateVerticalNeg">
            <summary>
            Rotate block vertical -
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_CubeRotateVerticalPos">
            <summary>
            Rotate block vertical +
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_CubeRotateHorizontalNeg">
            <summary>
            Rotate block horizontal -
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_CubeRotateHorizontalPos">
            <summary>
            Rotate block horizontal +
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_CubeRotateRollNeg">
            <summary>
            Rotate block roll -
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_CubeRotateRollPos">
            <summary>
            Rotate block roll +
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Slot0">
            <summary>
            Unequip
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Slot1">
            <summary>
            Equip item from slot 1
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Slot2">
            <summary>
            Equip item from slot 2
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Slot3">
            <summary>
            Equip item from slot 3
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Slot4">
            <summary>
            Equip item from slot 4
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Slot5">
            <summary>
            Equip item from slot 5
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Slot6">
            <summary>
            Equip item from slot 6
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Slot7">
            <summary>
            Equip item from slot 7
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Slot8">
            <summary>
            Equip item from slot 8
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Slot9">
            <summary>
            Equip item from slot 9
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextAreYouSureYouWantToQuickLoad">
            <summary>
            Are you sure you want to quick-load?
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextAreYouSureYouWantToQuickSave">
            <summary>
            Are you sure you want to quick-save?
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_ToolbarConfig">
            <summary>
            Toolbar config
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolbarItem_Tooltip_RemoveFromToolbar">
            <summary>
            [KEY:SecondaryClick] to remove from the toolbar.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_HoldToLookAround">
            <summary>
            Hold to look around
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_HoldToSprint">
            <summary>
            Hold to sprint
            </summary>
        </member>
        <member name="F:MyCommonTexts.LoadingPleaseWait">
            <summary>
            Loading, please wait
            </summary>
        </member>
        <member name="F:MyCommonTexts.NoPlaceToCreateGrid">
            <summary>
            There's no place to create a new block. Point your view to an empty space.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_HudOnOff">
            <summary>
            HUD on / off
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCubeBuilderHint">
            <summary>
            Hint: Drag an icon to a toolbar slot and activate by a numeric key
            </summary>
        </member>
        <member name="F:MyCommonTexts.Saved">
            <summary>
            Saved
            </summary>
        </member>
        <member name="F:MyCommonTexts.HideWeapon">
            <summary>
            Hide weapon
            </summary>
        </member>
        <member name="F:MyCommonTexts.Thrust">
            <summary>
            Thrust
            </summary>
        </member>
        <member name="F:MyCommonTexts.SomeWorldFilesCouldNotBeLoaded">
            <summary>
            One of the world/save files is corrupted and can't be loaded. See log for details.
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldFileIsCorruptedAndCouldNotBeLoaded">
            <summary>
            There was an error loading your world. For more information, look at the log file.
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldLoad_Error_IncompatibleMods">
            <summary>
            Some mods are not compatible with each other or the base game. Try removing any any recently added/updated mods.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipVideoOptionsVideoAdapter">
            <summary>
            Select a graphic adapter and/or a monitor. Changing the adapter requires restart of the game.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipVideoOptionsVideoMode">
            <summary>
            Select a screen resolution. We recommend using an aspect ratio compatible with your monitor. If the game doesn't run smoothly, decrease your screen resolution.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipVideoOptionsCaptureMouse">
            <summary>
            Whether the cursor should be captured by the game window (for Windowed and Fullscreen Window modes).
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipVideoOptionsVerticalSync">
            <summary>
            The game will synchronize with the refresh rate of the monitor. We recommend to turn it off.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipVideoOptionsFieldOfView">
            <summary>
            Horizontal field of view angle
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldNotSaved">
            <summary>
            World '{0}' failed to save. This can be caused by running out of memory or problems when writing files. Working on this world any longer may result in loss of progress. You can check log file to find out more about what caused this error.
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationMemoryOverload">
            <summary>
            Not enough memory to add new objects
            </summary>
        </member>
        <member name="F:MyCommonTexts.BetterGCIsAvailable">
            <summary>
            We have detected a better graphics card in your computer than the one the game currently runs on. Please check your settings in display options. Restart the game after changing adapters.
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionWarning">
            <summary>
            WARNING
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxModsMismatch">
            <summary>
            The following list of mods are not compatible with your game version. Would you like to load them anyway?
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxModsLoadAnyway">
            <summary>
            Loading the world with these mods may result in unpredictable behavior and the world may not load at all. Do you want to try loading the world anyway?
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextOpenBrowser">
            <summary>
            This will open {0} in your internet browser. The game will keep running. Do you want to continue?
            </summary>
        </member>
        <member name="F:MyCommonTexts.Loaded">
            <summary>
            Loaded
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextNoSavedWorlds">
            <summary>
            There are no saved worlds yet. Please start by creating a new world.
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionVideoTutorial">
            <summary>
            Video Tutorial
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextSaveChangesBeforeExit">
            <summary>
            Save changes before quitting?
            </summary>
        </member>
        <member name="F:MyCommonTexts.ErrorNameAlreadyExists">
            <summary>
            Name is already used. Please choose a different name.
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationBuildingFormat">
            <summary>
            Press {0} to place cube
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationColorFormat">
            <summary>
            Press {0} or {1} to change color. Hold {2} to apply color. Hold {3} or {4} to increase brush size.
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationHideHintsInGameOptions">
            <summary>
            You can hide these hints in Game Options
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationHudHideFormat">
            <summary>
            Press {0} to hide/unhide the HUD
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationRotationFormat">
            <summary>
            Press {0}, {1}, {2}, {3}, {4}, {5} to rotate
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationScreenFormat">
            <summary>
            Press {0} to configure toolbar or create new objects
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationSlotEquipFormat">
            <summary>
            Press {0}, {1}, {2}, ... to equip from slot
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationToolDisabled">
            <summary>
            This tool/weapon is disabled
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationUnlimitedBuildingFormat">
            <summary>
            Press {0} to add block, press {1} to remove block. Hold {2} to build fast
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlDescQuickLoad">
            <summary>
            Quick Load
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlDescQuickSave">
            <summary>
            Quick Save
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCubeBuilderBuildingBlocks">
            <summary>
            Tab content:
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCubeBuilderCreativeMode">
            <summary>
            Creative mode
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCubeBuilderSubtitle">
            <summary>
            Configure your toolbar (assign building blocks, tools and weapons)
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCubeBuilderToolbar">
            <summary>
            Toolbar
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCubeBuilderToolbarConfig">
            <summary>
            Toolbar Config
            </summary>
        </member>
        <member name="F:MyCommonTexts.SteamOverlayDisabledCaption">
            <summary>
            Steam Overlay is disabled
            </summary>
        </member>
        <member name="F:MyCommonTexts.LoadScreenButtonPublish">
            <summary>
            Publish
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextWorldPublished">
            <summary>
            Publish has been completed successfully. If you have Steam Overlay enabled, a page will open and you can edit attributes such as title, description or visibility (it is public by default).
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextWorldPublishFailed">
            <summary>
            Failed to publish on Steam Workshop
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextModPublished">
            <summary>
            Publish has been completed successfully. If you have Steam Overlay enabled, a page will open and you can edit attributes such as title, description or visibility (it is public by default).
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextModPublishFailed">
            <summary>
            Failed to publish on Steam Workshop
            </summary>
        </member>
        <member name="F:MyCommonTexts.ProgressTextPublishingWorld">
            <summary>
            Publishing ... please wait.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ProgressTextUploadingWorld">
            <summary>
            Uploading ... please wait.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonSubscribedWorlds">
            <summary>
            Workshop
            </summary>
        </member>
        <member name="F:MyCommonTexts.ProgressTextCreatingWorld">
            <summary>
            Creating world ... please wait.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionWorkshopMods">
            <summary>
            Workshop Mods
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionWorkshopWorlds">
            <summary>
            Workshop Worlds
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonRecommend">
            <summary>
            Recommend
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionWorldPublished">
            <summary>
            WORLD PUBLISHED
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionWorldPublishFailed">
            <summary>
            WORLD PUBLISH FAILED
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionModPublished">
            <summary>
            MOD PUBLISHED
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionModPublishFailed">
            <summary>
            MOD PUBLISH FAILED
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:MyCommonTexts.ScreenLoadSubscribedWorldCopyAndLoad" -->
        <member name="F:MyCommonTexts.LoadScreenButtonTooltipPublish">
            <summary>
            Publish selected world on Steam Workshop
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipMenuSubscribedWorlds">
            <summary>
            View a list of worlds subscribed on Steam Workshop
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionDoYouWishToPublishWorld">
            <summary>
            PUBLISH WORLD
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionDoYouWishToUpdateWorld">
            <summary>
            UPDATE WORLD
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextDoYouWishToPublishWorld">
            <summary>
            Are you sure you want to upload and publish selected world on Steam Workshop? Note that by submitting this item, you agree to the workshop terms of service (see http://steamcommunity.com/sharedfiles/workshoplegalagreement).
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextDoYouWishToUpdateWorld">
            <summary>
            Are you sure you want to upload and overwrite selected world on Steam Workshop?
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionDoYouWishToPublishMod">
            <summary>
            PUBLISH MOD
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionDoYouWishToUpdateMod">
            <summary>
            UPDATE MOD
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextDoYouWishToPublishMod">
            <summary>
            Are you sure you want to upload and publish selected mod on Steam Workshop? Note that by submitting this item, you agree to the workshop terms of service (see http://steamcommunity.com/sharedfiles/workshoplegalagreement).
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextDoYouWishToUpdateMod">
            <summary>
            Are you sure you want to upload and overwrite selected mod on Steam Workshop?
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadSubscribedWorldBrowseWorkshop">
            <summary>
            Browse Workshop
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadSubscribedWorldRefresh">
            <summary>
            Refresh
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationNoWeaponSelected">
            <summary>
            No weapon selected
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationSwitchedToWeaponType">
            <summary>
            Switched to weapon type '{0}'
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationInertiaDampenersOff">
            <summary>
            Inertia dampeners Off
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationInertiaDampenersOn">
            <summary>
            Inertia dampeners On
            </summary>
        </member>
        <member name="F:MyCommonTexts.LoadScreenButtonDelete">
            <summary>
            Delete
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionEditSettings">
            <summary>
            Edit Settings
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionSaveAs">
            <summary>
            Save As
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonHelp">
            <summary>
            Help
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonLoadWorld">
            <summary>
            Load World
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonNewWorld">
            <summary>
            New World
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonOptions">
            <summary>
            Options
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenNewWorldButtonCustomWorld">
            <summary>
            Custom World
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsButtonControls">
            <summary>
            Controls
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionResetControlsToDefault">
            <summary>
            RESET CONTROLS TO DEFAULT
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextResetControlsToDefault">
            <summary>
            Are you sure you want to reset control bindings to default?
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenshotFailed">
            <summary>
            Screenshot failed
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenshotSaved">
            <summary>
            Screenshot {0} saved
            </summary>
        </member>
        <member name="F:MyCommonTexts.ExportToObjComplete">
            <summary>
            Exported to: {0}
            </summary>
        </member>
        <member name="F:MyCommonTexts.ExportToObjFailed">
            <summary>
            Export to obj file failed
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadSubscribedWorldOpenInWorkshop">
            <summary>
            Open in Workshop
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipWorkshopBrowseWorkshop">
            <summary>
            Open Steam Overlay with Workshop screen
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipWorkshopCopyAndLoad">
            <summary>
            Download selected world to your computer and load
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipWorkshopOpenInWorkshop">
            <summary>
            Open selected world in Workshop Steam Overlay
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipWorkshopRefresh">
            <summary>
            Refresh the list of subscribed worlds
            </summary>
        </member>
        <member name="F:MyCommonTexts.SettingSymmetryX">
            <summary>
            Symmetry X plane: {0} to set, {1} to reset
            </summary>
        </member>
        <member name="F:MyCommonTexts.SettingSymmetryXOffset">
            <summary>
            Symmetry X plane (offset): {0} to set, {1} to reset
            </summary>
        </member>
        <member name="F:MyCommonTexts.SettingSymmetryY">
            <summary>
            Symmetry Y plane: {0} to set, {1} to reset
            </summary>
        </member>
        <member name="F:MyCommonTexts.SettingSymmetryYOffset">
            <summary>
            Symmetry Y plane (offset): {0} to set, {1} to reset
            </summary>
        </member>
        <member name="F:MyCommonTexts.SettingSymmetryZ">
            <summary>
            Symmetry Z plane: {0} to set, {1} to reset
            </summary>
        </member>
        <member name="F:MyCommonTexts.SettingSymmetryZOffset">
            <summary>
            Symmetry Z plane (offset): {0} to set, {1} to reset
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationPickupObject_Hold">
            <summary>
            Hold {0} to pick up {1}
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationPickupObject_Press">
            <summary>
            Press {0} to pick up {1}
            </summary>
        </member>
        <member name="F:MyCommonTexts.CubeBuilderPasteNotification">
            <summary>
            Press LMB or Ctrl+V to paste object
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextErrorLoadingEntities">
            <summary>
            An error occurred while adding one or more objects. See log file for more details.
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextAreYouSureToMoveGridToClipboard">
            <summary>
            Are you sure you want to delete selected object? (copy will be stored in clipboard)
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextMemoryLimitReachedDuringLoad">
            <summary>
            Memory limit has been reached while loading the world and some objects were not added. If you were using Large World fix and the game was recently updated, it may have been disabled.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsControls_Keyboard2">
            <summary>
            Keyboard 2
            </summary>
        </member>
        <member name="F:MyCommonTexts.DialogTextDownloadingWorld">
            <summary>
            Downloading world: {0}% World size: {1}
            </summary>
        </member>
        <member name="F:MyCommonTexts.DialogTextDownloadWorldFailed">
            <summary>
            Downloading the world has failed!
            </summary>
        </member>
        <member name="F:MyCommonTexts.DialogTextJoiningWorld">
            <summary>
            Joining world
            </summary>
        </member>
        <member name="F:MyCommonTexts.DialogTextJoinWorldFailed">
            <summary>
            Joining world failed, reason: {0}
            </summary>
        </member>
        <member name="F:MyCommonTexts.GpuUnderMinimumNotification">
            <summary>
            We have detected that your graphics card is under the minimum requirements and this can cause performance issues or crashes. Thank you for your understanding.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ShowRotationHints">
            <summary>
            Show rotation hints
            </summary>
        </member>
        <member name="F:MyCommonTexts.UnknownControl_Unassigned">
            <summary>
            [unassigned]
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsGame_BuildingMode">
            <summary>
            Building mode
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsGame_Line">
            <summary>
            Line
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsGame_Plane">
            <summary>
            Plane
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsGame_SingleBlock">
            <summary>
            Single block
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_Suicide">
            <summary>
            Respawn
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorStartingServer">
            <summary>
            Multiplayer server cannot be started, error: {0}
            </summary>
        </member>
        <member name="F:MyCommonTexts.AlreadyUsedBySomebodyElse">
            <summary>
            Object is being used by somebody else
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerJoinFriendsGames">
            <summary>
            Friend games
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionPlayers">
            <summary>
            Players
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayersLobby_Friends">
            <summary>
            Friends
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayersLobby_Private">
            <summary>
            Private
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayersLobby_Public">
            <summary>
            Public
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayers_FactionName">
            <summary>
            Faction
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayers_FactionTag">
            <summary>
            Tag
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayers_Factions">
            <summary>
            Factions
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayers_GameOwner">
            <summary>
            Game owner
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayers_Invite">
            <summary>
            Invite
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayers_Kick">
            <summary>
            Kick
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayers_PlayerName">
            <summary>
            Player name
            </summary>
        </member>
        <member name="F:MyCommonTexts.DialogDownloadWorld_WorldDoesNotExists">
            <summary>
            Game does not exist anymore.
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionKicked">
            <summary>
            KICKED
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextYouHaveBeenKicked">
            <summary>
            You have been kicked from the game by its owner.
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationPasteFailed">
            <summary>
            Paste operation failed, selected area is occupied.
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_OnlineModeFriends">
            <summary>
            Friends
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextAreYouSureYouWantToReconnect">
            <summary>
            Are you sure you want to reconnect to the current multiplayer game?
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationMultiplayerDisabled">
            <summary>
            You are in offline mode and multiplayer is disabled. You have to change the settings from the main menu.
            </summary>
        </member>
        <member name="F:MyCommonTexts.SteamIsOfflinePleaseRestart">
            <summary>
            Steam is offline. Please run Steam in normal mode or restart Steam if the problem persists
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerCompatibleVersions">
            <summary>
            Compatible versions
            </summary>
        </member>
        <member name="F:MyCommonTexts.MaxPlayers">
            <summary>
            Max players
            </summary>
        </member>
        <member name="F:MyCommonTexts.DialogWaitingForWorldData">
            <summary>
            Waiting for world data
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorConnectionFailed">
            <summary>
            Connection to server failed: {0}
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerStateConnectingToServer">
            <summary>
            Connecting to server
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerStateWaitingForServer">
            <summary>
            Waiting for server to respond
            </summary>
        </member>
        <member name="F:MyCommonTexts.HarvestingWarningInventoryMightBeTruncatedAreYouSure">
            <summary>
            The selected game type is more limited than the original one. This means that your inventory might be truncated and you might lose some items! Are you sure you want to change the game type?
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionFriendWorlds">
            <summary>
            Friend worlds
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionPublicWorlds">
            <summary>
            Public worlds
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_CubeColorChange">
            <summary>
            Change color / weapon mode
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationWeaponDisabledInSettings">
            <summary>
            This weapon is disabled in world settings
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlDescPlayersList">
            <summary>
            Show players (multiplayer only)
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMenuButtonPlayers">
            <summary>
            Players
            </summary>
        </member>
        <member name="F:MyCommonTexts.ItemDamagedDescription">
            <summary>
             (Damaged)
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplaterJoin_ServerIsNotResponding">
            <summary>
            Server is not responding
            </summary>
        </member>
        <member name="F:MyCommonTexts.UnsupportedAspectRatio">
            <summary>
            Unsupported aspect ratio
            </summary>
        </member>
        <member name="F:MyCommonTexts.Error_JoinLobby_Private">
            <summary>
            This game cannot be joined, it is set to private.
            </summary>
        </member>
        <member name="F:MyCommonTexts.Error_JoinLobby_NotFriends">
            <summary>
            You cannot join this game, only friends of {0} are allowed.
            </summary>
        </member>
        <member name="F:MyCommonTexts.Error_JoinLobby_NotFriends_OwnerUnknown">
            <summary>
            This game cannot be joined, only friends are allowed.
            </summary>
        </member>
        <member name="F:MyCommonTexts.CompressSaveGames">
            <summary>
            Compress saved games
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipGameOptionsCompressSaveGames">
            <summary>
            Whether the saved games should be compressed on the disk to save space
            </summary>
        </member>
        <member name="F:MyCommonTexts.Headbob">
            <summary>
            Disable headbob
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsGame_WorkerThreads">
            <summary>
            Worker Threads
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsGame_WorkerThreads_Tooltip">
            <summary>
            Number of enabled worker threads. More - faster game, slower system Less - slower game, faster system  CAUTION: Higher numbers might cause system instability.  GAME NEEDS TO BE RESTARTED TO TAKE EFFECT.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsGame_ShowPlayerNames">
            <summary>
            Show player names
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipGameOptionsShowPlayerNames">
            <summary>
            Show player names above their characters. This feature must also be enabled in world settings.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsGame_UIOpacity">
            <summary>
            UI opacity
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsGame_UIBkOpacity">
            <summary>
            UI background opacity
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationInventoryFull">
            <summary>
            Inventory is full
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationInventoryNotEmpty">
            <summary>
            This inventory still contains items
            </summary>
        </member>
        <member name="F:MyCommonTexts.OutOfAmmo">
            <summary>
            {0} is out of ammunition
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationMissingComponentToPlaceBlockFormat">
            <summary>
            You need {0} to build {1}
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_ColumnTitle_GameMode">
            <summary>
            Game Mode
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_ColumnTitle_Players">
            <summary>
            Players
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_ColumnTitle_Username">
            <summary>
            Username
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_ColumnTitle_World">
            <summary>
            World
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_ColumnTitle_WorldSize">
            <summary>
            World size
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextSuicide">
            <summary>
            Are you sure you want to respawn?
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorServerTimeout">
            <summary>
            The connection to the server timed out.
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorServerHasLeft">
            <summary>
            The server host has left the game
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationRespawn">
            <summary>
            You died. Respawn in {0} seconds
            </summary>
        </member>
        <member name="F:MyCommonTexts.HudBlockInfo_Required">
            <summary>
            Required
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationClientConnected">
            <summary>
            Player connected: {0}
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationClientDisconnected">
            <summary>
            Player disconnected: {0}
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerError_IncorrectVersion">
            <summary>
            Server has different version of the game. Your version: {0}; Server version: {1}; You can change the branch, before launching the game, in game properties.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ShowCrosshair">
            <summary>
            Show crosshair
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipGameOptionsShowCrosshair">
            <summary>
            Whether the weapon crosshair should be visible
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextSavingInProgress">
            <summary>
            Game is already saving.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsGame_LocalizationWarning">
            <summary>
            * Localized by the community.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsGame_MoreInfo">
            <summary>
            Click for more info
            </summary>
        </member>
        <member name="F:MyCommonTexts.Multiplayer_IndirectConnection">
            <summary>
            No direct connection available.
            </summary>
        </member>
        <member name="F:MyCommonTexts.Multiplayer_NoConnection">
            <summary>
            No connection with server.
            </summary>
        </member>
        <member name="F:MyCommonTexts.GamePaused">
            <summary>
            Game paused
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlDescPauseGame">
            <summary>
            Pause the game (offline only)
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_PauseGame">
            <summary>
            Pause game
            </summary>
        </member>
        <member name="F:MyCommonTexts.KeysPause">
            <summary>
            Pause
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationWeaponNotWorking">
            <summary>
            {0} is not working
            </summary>
        </member>
        <member name="F:MyCommonTexts.DialogAmount_AddAmountCaption">
            <summary>
            Amount to add
            </summary>
        </member>
        <member name="F:MyCommonTexts.DialogAmount_SetValueCaption">
            <summary>
            Value to set
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationHealthCritical">
            <summary>
            Health is critical. Seek medical attention immediately.
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationHealthLow">
            <summary>
            Health is low.
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerError_DifferentData">
            <summary>
            This server has different game data than your client
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerJoin_IncompatibleGameDataLabel">
            <summary>
            Games marked with * have incompatible game data
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayers_GameAdmin">
            <summary>
            Game admin
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerJoinServers">
            <summary>
            Dedicated only
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorAlreadyJoined">
            <summary>
            User is already joined
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorNotInGroup">
            <summary>
            You are not in group {0}. Do you want to visit group web page?
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorServerFull">
            <summary>
            Server is full
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorSteamServersOffline">
            <summary>
            Steam servers offline or server group does not exist
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorTicketInvalid">
            <summary>
            Ticket invalid
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerJoinLANServers">
            <summary>
            LAN only
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_TabTitle_Friends">
            <summary>
            Friends
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_TabTitle_LAN">
            <summary>
            LAN
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_TabTitle_Lobbies">
            <summary>
            Games
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_TabTitle_Servers">
            <summary>
            Servers
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_Title">
            <summary>
            Join world
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_ColumnTitle_Ping">
            <summary>
            Ping
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_ColumnTitle_Server">
            <summary>
            Server
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorLoggedInElseWhere">
            <summary>
            The server is unable to handle your connection request right now. Try again in a moment.
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorNoLicenseOrExpired">
            <summary>
            No license or license expired
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorTicketAlreadyUsed">
            <summary>
            Ticket already used
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorTicketCanceled">
            <summary>
            Ticket cancelled
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorUserNotConnected">
            <summary>
            User not connected
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorVACBanned">
            <summary>
            VAC banned
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorVACCheckTimedOut">
            <summary>
            VAC check timed out
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerJoinAllowedGroups">
            <summary>
            Allowed groups
            </summary>
        </member>
        <member name="F:MyCommonTexts.NewsDownloadingFailed">
            <summary>
            News downloading failed
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionInfo">
            <summary>
            INFO
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorGroupIdInvalid">
            <summary>
            Server Group ID is invalid, server administrator should set proper group ID in server config (or zero to disable group checking)
            </summary>
        </member>
        <member name="F:MyCommonTexts.PlayerCharacterColor">
            <summary>
            Player color
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationHintPressToUseWardrobe">
            <summary>
            Press {0} to change your appearance
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsVideo_WindowMode">
            <summary>
            Window mode
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsVideo_WindowMode_Fullscreen">
            <summary>
            Fullscreen
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsVideo_WindowMode_FullscreenWindow">
            <summary>
            Fullscreen window
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsVideo_WindowMode_Window">
            <summary>
            Window
            </summary>
        </member>
        <member name="F:MyCommonTexts.SpectatorControls">
            <summary>
            Spectator Controls
            </summary>
        </member>
        <member name="F:MyCommonTexts.SpectatorControls_Delta_Desc">
            <summary>
            Spectator with fixed view vector to controlled object
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorBannedByAdmins">
            <summary>
            You are banned on this server
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorBannedByAdminsWithDialog">
            <summary>
            You are banned on this server. Do you wish to contact the admin?
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextYouHaveBeenBanned">
            <summary>
            You have been banned on this server by its admin.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayers_Ban">
            <summary>
            Ban
            </summary>
        </member>
        <member name="F:MyCommonTexts.HudMarker_ReturnToWorld">
            <summary>
            Return to the game area!
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationLeavingWorld">
            <summary>
            Warning: You will die in {0:F1} meters!
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionAdvancedSettings">
            <summary>
            Advanced World Settings
            </summary>
        </member>
        <member name="F:MyCommonTexts.Spectator">
            <summary>
            Spectator
            </summary>
        </member>
        <member name="F:MyCommonTexts.SpectatorControls_Delta">
            <summary>
            Delta spectator
            </summary>
        </member>
        <member name="F:MyCommonTexts.SpectatorControls_Free">
            <summary>
            Free spectator
            </summary>
        </member>
        <member name="F:MyCommonTexts.SpectatorControls_None">
            <summary>
            Player control
            </summary>
        </member>
        <member name="F:MyCommonTexts.SpectatorControls_Static">
            <summary>
            Static spectator
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxErrorFactionsNameAlreadyExists">
            <summary>
            Given House name already exists.
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxErrorFactionsTagAlreadyExists">
            <summary>
            Given House tag already exists.
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxErrorFactionsNameTooShort">
            <summary>
            House name must be at least 5 characters long.
            </summary>
        </member>
        <member name="F:MyCommonTexts.Edit">
            <summary>
            Edit
            </summary>
        </member>
        <member name="F:MyCommonTexts.Kick">
            <summary>
            Kick
            </summary>
        </member>
        <member name="F:MyCommonTexts.Leader">
            <summary>
            Leader
            </summary>
        </member>
        <member name="F:MyCommonTexts.Member">
            <summary>
            Member
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxConfirmFactionsKickPlayer">
            <summary>
            Are you sure that you want to kick player '{0}' from your faction?
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxConfirmFactionsLeave">
            <summary>
            Are you sure that you want to leave faction '{0}'?
            </summary>
        </member>
        <member name="F:MyCommonTexts.Promote">
            <summary>
            Promote
            </summary>
        </member>
        <member name="F:MyCommonTexts.Demote">
            <summary>
            Demote
            </summary>
        </member>
        <member name="F:MyCommonTexts.AccessDenied">
            <summary>
            Access denied
            </summary>
        </member>
        <member name="F:MyCommonTexts.Founder">
            <summary>
            Founder
            </summary>
        </member>
        <member name="F:MyCommonTexts.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="F:MyCommonTexts.Accept">
            <summary>
            Accept
            </summary>
        </member>
        <member name="F:MyCommonTexts.Deny">
            <summary>
            Deny
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxConfirmFactionsAcceptJoin">
            <summary>
            Are you sure that you want to accept player '{0}' to your faction?
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxConfirmFactionsDenyJoin">
            <summary>
            Are you sure that you don't want to accept player '{0}' to your faction?
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxConfirmFactionsDemote">
            <summary>
            Are you sure that you want demote '{0}' to member?
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxConfirmFactionsPromote">
            <summary>
            Are you sure that you want promote '{0}' to leader?
            </summary>
        </member>
        <member name="F:MyCommonTexts.Applicant">
            <summary>
            Applicant
            </summary>
        </member>
        <member name="F:MyCommonTexts.Tag">
            <summary>
            Tag
            </summary>
        </member>
        <member name="F:MyCommonTexts.SessionDeleteFailed">
            <summary>
            Session delete failed
            </summary>
        </member>
        <member name="F:MyCommonTexts.Medicals_Title">
            <summary>
            Medical Rooms
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextChangeOwner">
            <summary>
            Are you sure you want to change owner to {0}?
            </summary>
        </member>
        <member name="F:MyCommonTexts.Respawn">
            <summary>
            Respawn
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerJoinSameGameData">
            <summary>
            Same game data
            </summary>
        </member>
        <member name="F:MyCommonTexts.Refresh">
            <summary>
            Refresh
            </summary>
        </member>
        <member name="F:MyCommonTexts.PlayerInfo_Dead">
            <summary>
            dead
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMods_ActiveMods">
            <summary>
            Active mods
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMods_AvailableMods">
            <summary>
            Available mods
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMods_IncompatibleMod_Tooltip">
            <summary>
            Mod is not compatible with this version of the game.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMods_IncompatibleMod_SupportedVersion_Tooltip">
            <summary>
            Mod supports up to, but not including, version {0}.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipScreenMods_MoveLeft">
            <summary>
            Deactivate mod
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipScreenMods_MoveLeftAll">
            <summary>
            Deactivate all mods
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipScreenMods_MoveRight">
            <summary>
            Activate mod
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipScreenMods_MoveRightAll">
            <summary>
            Activate all mods
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_Mods">
            <summary>
            Mods
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_Advanced">
            <summary>
            Advanced
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipWorkshopRefreshMod">
            <summary>
            Refresh the list of subscribed mods
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_SearchLabel">
            <summary>
            Search game
            </summary>
        </member>
        <member name="F:MyCommonTexts.ProgressTextDownloadingMods">
            <summary>
            Downloading mod 
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationClientCannotSave">
            <summary>
            Client saving is disabled on this server
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipScreenMods_MoveDown">
            <summary>
            Move mod down
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipScreenMods_MoveUp">
            <summary>
            Move mod up
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipScreenMods_MoveBottom">
            <summary>
            Move mod to bottom
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipScreenMods_MoveTop">
            <summary>
            Move mod to top
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextCannotCreateGroup">
            <summary>
            You cannot create group with blocks you don't have access rights to.
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextCannotDeleteGroup">
            <summary>
            You cannot delete group with blocks you don't have access rights to.
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextYouHaveBeenKickedFromFaction">
            <summary>
            You have been kicked from the faction.
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextYouHaveBeenAcceptedToFaction">
            <summary>
            You have been accepted to faction.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_ToolbarDown">
            <summary>
            Previous toolbar
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_ToolbarUp">
            <summary>
            Next toolbar
            </summary>
        </member>
        <member name="F:MyCommonTexts.DialogTextDownloadModsFailed">
            <summary>
            Downloading mods has failed! Please check mods in world settings.
            </summary>
        </member>
        <member name="F:MyCommonTexts.DialogTextDownloadModsFailedSteamOffline">
            <summary>
            Steam is offline. Please try to change world settings to offline and load the world again.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ProgressTextCheckingMods">
            <summary>
            Checking for mod updates ... please wait.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugOfficial_Caption">
            <summary>
            Debug draw
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugOfficial_EnableDebugDraw">
            <summary>
            Enable debug draw
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugOfficial_ErrorLogCaption">
            <summary>
            Loading error log:
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugOfficial_ModelDummies">
            <summary>
            Model dummies
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugOfficial_MountPoints">
            <summary>
            Mount points
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugOfficial_NoErrorText">
            <summary>
            There were no loading errors
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugOfficial_PhysicsPrimitives">
            <summary>
            Physics primitives
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugOfficial_OpenErrorLog">
            <summary>
            Open in new window
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugOfficial_ReloadTextures">
            <summary>
            Reload textures
            </summary>
        </member>
        <member name="F:MyCommonTexts.DialogTextLocalModsDisabledInMultiplayer">
            <summary>
            Local mods are not allowed in multiplayer. Use workshop mods instead.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMods_LocalMod">
            <summary>
            Local mod
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMods_MissingDetails">
            <summary>
            Could not retrieve mod details from Steam
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMods_MissingLocalMod">
            <summary>
            Missing local mod
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMods_WorkshopMod">
            <summary>
            Workshop mod
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMods_HasDependencies">
            <summary>
            This mod has the following dependencies:
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMods_DependenciesNote">
            <summary>
            Dependencies are loaded automatically, and do not need to be added to the world.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugOfficial_ReloadModels">
            <summary>
            Reload models
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugOfficial_CopyErrorLogToClipboard">
            <summary>
            Copy log to system clipboard
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationLeavingWorld_Creative">
            <summary>
            Warning: All ships will be removed in {0:F1} meters!
            </summary>
        </member>
        <member name="F:MyCommonTexts.PlayerCharacterModel">
            <summary>
            Player model
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_ColumnTitle_Mods">
            <summary>
            Mods
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationHintPressToUse">
            <summary>
            Press {0} to use {1}
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_SelectServerToShowModList">
            <summary>
            Select server to show mod list
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenMods_SearchLabel">
            <summary>
            Search
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_BadModsListResponse">
            <summary>
            Could not get mod list from the server
            </summary>
        </member>
        <member name="F:MyCommonTexts.HudWarnings">
            <summary>
            Hud Warnings
            </summary>
        </member>
        <member name="F:MyCommonTexts.DialogTextIncompatibleWorldVersion">
            <summary>
            This world cannot be loaded. It has been created in a newer version of the game or in a different branch of the game. You can change the branch, before launching the game, in game properties.
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextPublishFailed_AccessDenied">
            <summary>
            This workshop item does not seem to belong to you. Make sure you are logged in with the right account.
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextPublishFailed_LimitExceeded">
            <summary>
            The preview image is too large, it must be less than 1 Megabyte; or there is not enough space available on your Steam Cloud.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugOfficial_SavePrefab">
            <summary>
            Export clipboard to file
            </summary>
        </member>
        <member name="F:MyCommonTexts.AddNewNPC">
            <summary>
            Add New Enemy Identity
            </summary>
        </member>
        <member name="F:MyCommonTexts.DisplayName_BlueprintClass_Tools">
            <summary>
            Tools
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionWorkshopTags">
            <summary>
            Select tags
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorkshopTag_Animation">
            <summary>
            Animation
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorkshopTag_Block">
            <summary>
            Block
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorkshopTag_Character">
            <summary>
            Character
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorkshopTag_Other">
            <summary>
            Other
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorkshopTag_Skybox">
            <summary>
            Skybox
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextPublishFailed_OwnerMismatchMod">
            <summary>
            Could not update because you are not the owner of this mod.
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxErrorModLoadingFailure">
            <summary>
            Some mods were not loaded because of errors. See log file for details or run the game in single player to access the mod debug screen.
            </summary>
        </member>
        <member name="F:MyCommonTexts.RenderIterpolation">
            <summary>
            Render interpolation
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorkshopTag_ModPack">
            <summary>
            Modpack
            </summary>
        </member>
        <member name="F:MyCommonTexts.CustomText">
            <summary>
            {0}
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCubeBuilderBlockCategories">
            <summary>
            Categories:
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCubeBuilderBlockSearch">
            <summary>
            Search:
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlDescCopyPasteMove">
            <summary>
            Move pasted object
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorkshopTag_Script">
            <summary>
            Script
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationCopyPasteBlockNotAvailable">
            <summary>
            Some blocks in the pasted grid are not available in this world
            </summary>
        </member>
        <member name="F:MyCommonTexts.ConvertingObjs">
            <summary>
            Converting models. Please wait.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ConvertToObjDone">
            <summary>
            All models converted.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ExportingToObj">
            <summary>
            Exporting model. Please wait.
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextDoYouWantToPasteGridWithMissingBlocks">
            <summary>
            Pasted blueprint contains some blocks that are not available in this world. These blocks will not be pasted, which could possibly cause the blueprint to split. Do you really want to paste this blueprint?
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationCopyPasteFloatingObjectNotAvailable">
            <summary>
            Item is not available in this world
            </summary>
        </member>
        <member name="F:MyCommonTexts.ShipWelder_HelpOthers">
            <summary>
            Help Others
            </summary>
        </member>
        <member name="F:MyCommonTexts.PlacingObjectsToScene">
            <summary>
            Placing objects to world. Please wait.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeSystems3">
            <summary>
            Systems 3
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationSwitchedToWeapon">
            <summary>
            Switched to weapon: {0}
            </summary>
        </member>
        <member name="F:MyCommonTexts.Thrust_Back">
            <summary>
            Backward
            </summary>
        </member>
        <member name="F:MyCommonTexts.Thrust_Down">
            <summary>
            Down
            </summary>
        </member>
        <member name="F:MyCommonTexts.Thrust_Forward">
            <summary>
            Forward
            </summary>
        </member>
        <member name="F:MyCommonTexts.Thrust_Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:MyCommonTexts.Thrust_Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:MyCommonTexts.Thrust_Up">
            <summary>
            Up
            </summary>
        </member>
        <member name="F:MyCommonTexts.SelectBlueprint">
            <summary>
            Select
            </summary>
        </member>
        <member name="F:MyCommonTexts.DisplayName_Animation_Facepalm">
            <summary>
            Facepalm
            </summary>
        </member>
        <member name="F:MyCommonTexts.AvailableBlueprints">
            <summary>
            Available Blueprints
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandProperty_Sphere_Radius">
            <summary>
            Radius
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandProperty_Box_Width">
            <summary>
            Width
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandProperty_Box_Depth">
            <summary>
            Depth
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandProperty_Box_Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandSettingScreen_HandDistance">
            <summary>
            Distance
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandSettingScreen_HandSettings">
            <summary>
            Brush Settings
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandSettingScreen_HandTransparency">
            <summary>
            Transparency
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandSettingScreen_ShapeSettings">
            <summary>
            Shape Settings
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandProperty_Capsule_Length">
            <summary>
            Length
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandProperty_Capsule_Radius">
            <summary>
            Radius
            </summary>
        </member>
        <member name="F:MyCommonTexts.ExportToObjModded">
            <summary>
            Model contains modded blocks. Only models with default blocks can be exported.
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandSettingScreen_HandSnapToVoxel">
            <summary>
            Snap to voxel grid
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandSettingScreen_FreezePhysics">
            <summary>
            Freeze Physics
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandSettingScreen_ResetMode">
            <summary>
            Reset Mode
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandSettingScreen_ResetModeTooltip">
            <summary>
            Operations reset the original shape content and material.
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandProperty_AutoLevel_Area">
            <summary>
            Area
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandProperty_AutoLevel_Axis">
            <summary>
            Choose axis
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandProperty_AutoLevel_AxisX">
            <summary>
            X axis
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandProperty_AutoLevel_AxisY">
            <summary>
            Y axis
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandProperty_AutoLevel_AxisZ">
            <summary>
            Z axis
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandSettingScreen_HandMaterial">
            <summary>
            Material
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationNewFactionChatMessage">
            <summary>
            New message in {0} faction chat
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationNewGlobalChatMessage">
            <summary>
            New global chat message
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationNewPlayerChatMessage">
            <summary>
            New message from {0}
            </summary>
        </member>
        <member name="F:MyCommonTexts.ErrorDescriptionTooLong">
            <summary>
            Description is too long (max 8000 characters allowed)
            </summary>
        </member>
        <member name="F:MyCommonTexts.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandSettingScreen_HandProjectToVoxel">
            <summary>
            Project to voxel
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlDescNextVoxelMaterial">
            <summary>
            Next voxel material
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlDescOpenVoxelHandSettings">
            <summary>
            Open voxel hand settings
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlDescPreviousVoxelMaterial">
            <summary>
            Previous voxel material
            </summary>
        </member>
        <member name="F:MyCommonTexts.BlueprintsMessageBoxDesc_Replace">
            <summary>
            Are you sure you want to replace this blueprint with clipboard?
            </summary>
        </member>
        <member name="F:MyCommonTexts.BlueprintsMessageBoxTitle_Replace">
            <summary>
            Replace
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationTextPanelReadOnly">
            <summary>
            Text panel is read-only
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextTooLongText">
            <summary>
            Text is too long. Do you want to truncate it?
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlDescExportModel">
            <summary>
            Export model
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoxelHandSettingScreen_HandShowGizmos">
            <summary>
            Show bounding box
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextOpenUrlOverlayNotEnabled">
            <summary>
            This will open {0} in your internet browser, because Steam Overlay is either disabled or failed to open. The game will keep running. Do you want to continue?
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationRotationFormatCombined">
            <summary>
            Press {0} to rotate the block
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationCompoundBuildingFormat">
            <summary>
            Press {0} or {1} to toggle compound building
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationSwitchBuildingModeFormat">
            <summary>
            Press {0} to toggle dynamic building
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_SwitchWalk">
            <summary>
            Toggle walking
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_TabTitle_Favorites">
            <summary>
            Favorites
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_TabTitle_History">
            <summary>
            History
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_Favorites_Add">
            <summary>
            Add server to favorites
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_Favorites_Remove">
            <summary>
            Remove server from favorites
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_VoxelHandSettings">
            <summary>
            Open voxel hand settings
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationVoxelHandHintFormat">
            <summary>
            Press {0} to open voxel hand settings
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationVoxelMaterialFormat">
            <summary>
            Press {0} or {1} to change voxel material
            </summary>
        </member>
        <member name="F:MyCommonTexts.BotSettingsScreen_EnableBotsDebugging">
            <summary>
            Enable bots debugging
            </summary>
        </member>
        <member name="F:MyCommonTexts.BotSettingsScreen_NextBot">
            <summary>
            Next bot
            </summary>
        </member>
        <member name="F:MyCommonTexts.BotSettingsScreen_PreviousBot">
            <summary>
            Previous bot
            </summary>
        </member>
        <member name="F:MyCommonTexts.BotSettingsScreen_Title">
            <summary>
            Bots settings
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugOfficial_BotSettings">
            <summary>
            Bots settings
            </summary>
        </member>
        <member name="F:MyCommonTexts.ReportBug">
            <summary>
            Report a Bug
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_ToolbarNextItem">
            <summary>
            Next toolbar item
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_ToolbarPreviousItem">
            <summary>
            Previous toolbar item
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeToolsOrWeapons2">
            <summary>
            Tools / Weapons 2
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_BuildMode">
            <summary>
            Build mode
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenControlMenu_Title">
            <summary>
            Control menu
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_ControlMenu">
            <summary>
            Open control menu
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlMenuItemValue_Off">
            <summary>
            Off
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlMenuItemValue_On">
            <summary>
            On
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlMenuItemLabel_CameraMode">
            <summary>
            Camera mode
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlMenuItemValue_FPP">
            <summary>
            FPP
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlMenuItemValue_TPP">
            <summary>
            TPP
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlMenuItemLabel_CommitSuicide">
            <summary>
            Respawn
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlMenuItemLabel_QuickLoad">
            <summary>
            Quick load / reconnect
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlMenuItemLabel_ShowColorPicker">
            <summary>
            Show color picker
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlMenuItemLabel_ShowToolbarScreen">
            <summary>
            Show toolbar screen
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlMenuItemLabel_ToggleHud">
            <summary>
            Toggle HUD
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlMenuItemLabel_PauseGame">
            <summary>
            Pause game
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextErrorFeatureNotAvailableYet">
            <summary>
            Feature is not available yet
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationMaximumNumberBots">
            <summary>
            Maximum number of bots has been reached
            </summary>
        </member>
        <member name="F:MyCommonTexts.Hud_BuildMode">
            <summary>
            Build mode
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationJoystickCompoundBuildingFormat">
            <summary>
            Press {0} to toggle compound building
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationJoystickControlMenuFormat">
            <summary>
            Press {0} to access control menu
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationJoystickMenus">
            <summary>
            In order to show help or modify toolbar, open control menu
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationJoystickSlotEquipFormat">
            <summary>
            Press {0} or {1} to select toolbar slots
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationJoystickUnlimitedBuildingFormat">
            <summary>
            Press {0} to add block, press {1} to remove block
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationJoystickVoxelMaterialFormat">
            <summary>
            Press {0} to change voxel material
            </summary>
        </member>
        <member name="F:MyCommonTexts.Notification_GameplayOptions">
            <summary>
            Press {0} to change Gameplay Options
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlMenuItemLabel_Wardrobe">
            <summary>
            Change appearance
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationHintJoystickPressToOpenInventory">
            <summary>
            Access control menu to open inventory of {0}
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationHintPressToOpenBuildMode">
            <summary>
            Press {0} to enter build mode
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_Physics">
            <summary>
            Physics
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_Physics_Fast">
            <summary>
            Fast
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_Physics_Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_Physics_Precise">
            <summary>
            Precise
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenCaptionGraphicsOptions">
            <summary>
            Graphics Options
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_AnisotropicFiltering">
            <summary>
            Anisotropic filtering
            </summary>
        </member>
        <member name="F:MyCommonTexts.TooltipScreenGraphicsOptions_AnisotropicFiltering">
            <summary>
            A higher level of filtering increases the quality of texture rendering.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_AnisotropicFiltering_Off">
            <summary>
            Off
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_AntiAliasing">
            <summary>
            Anti-aliasing
            </summary>
        </member>
        <member name="F:MyCommonTexts.TooltipScreenGraphicsOptions_AntiAliasing">
            <summary>
            Choose an anti-aliasing method to smooth jagged edges and textures.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_AntiAliasing_None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_FoliageDetails">
            <summary>
            Foliage details
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_FoliageDetails_Disabled">
            <summary>
            Disabled
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_FoliageDetails_High">
            <summary>
            High
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_FoliageDetails_Low">
            <summary>
            Low
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_FoliageDetails_Medium">
            <summary>
            Medium
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_MultiThreadedRendering">
            <summary>
            Multi-threaded rendering
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_QualityPreset">
            <summary>
            Quality preset
            </summary>
        </member>
        <member name="F:MyCommonTexts.TooltipScreenGraphicsOptions_QualityPreset">
            <summary>
            Choose a preset for faster configuration of settings or to use as a starting point.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_QualityPreset_Custom">
            <summary>
            Custom
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_QualityPreset_High">
            <summary>
            High
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_QualityPreset_Low">
            <summary>
            Low
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_QualityPreset_Medium">
            <summary>
            Medium
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_ShadowMapResolution_High">
            <summary>
            High
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_ShadowMapResolution_Disabled">
            <summary>
            Disabled
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_ShadowMapResolution_Low">
            <summary>
            Low
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_TextureQuality">
            <summary>
            Texture quality
            </summary>
        </member>
        <member name="F:MyCommonTexts.TooltipScreenGraphicsOptions_TextureQuality">
            <summary>
            Choose the general quality of textures in the game.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_TextureQuality_High">
            <summary>
            High
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_TextureQuality_Low">
            <summary>
            Low
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_TextureQuality_Medium">
            <summary>
            Medium
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_ModelQuality">
            <summary>
            Model quality
            </summary>
        </member>
        <member name="F:MyCommonTexts.TooltipScreenGraphicsOptions_ModelQuality">
            <summary>
            Choose the general quality of models in the game.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_TerrainLodQuality">
            <summary>
            Terrain detail
            </summary>
        </member>
        <member name="F:MyCommonTexts.TooltipScreenGraphicsOptions_TerrainLodQuality">
            <summary>
            Choose the general level of detail for terrain. Lower settings improve performance.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_ShadingQuality">
            <summary>
            Shader quality
            </summary>
        </member>
        <member name="F:MyCommonTexts.TooltipScreenGraphicsOptions_ShadingQuality">
            <summary>
            Choose the general shading quality of objects in the game.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_QualityEnum_Low">
            <summary>
            Low
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_QualityEnum_Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_QualityEnum_High">
            <summary>
            High
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_QualityEnum_Extreme">
            <summary>
            Extreme
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_VoiceChat">
            <summary>
            Push-to-talk voice chat
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_CubeSizeMode">
            <summary>
            Cube size toggle button
            </summary>
        </member>
        <member name="F:MyCommonTexts.EnableVoiceChat">
            <summary>
            Enable voice chat
            </summary>
        </member>
        <member name="F:MyCommonTexts.TooltipEnableVoiceChat">
            <summary>
            Enables in-game voice chat. Chat is proximity based, meaning the closer you are to another player the louder your voice will sound. Press F3 in multiplayer games to control player muting.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenGraphicsOptions_Tonemapping">
            <summary>
            Tonemapping
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_VegetationDistance">
            <summary>
            Vegetation view distance
            </summary>
        </member>
        <member name="F:MyCommonTexts.TooltipWorldSettings_VegetationDistance">
            <summary>
            Set the maximum distance to render grass, trees, bushes and other vegetation.
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_GrassDensity">
            <summary>
            Grass density
            </summary>
        </member>
        <member name="F:MyCommonTexts.TooltipWorldSettings_GrassDensity">
            <summary>
            Choose a value for the density of grass. Grass density and foliage detail must both be enabled for grass.
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextGuideQuestion">
            <summary>
            Do you want to start by watching the video tutorial? Remember: you can always come back by clicking "Tutorials" in the "Help" screen (press F1).
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationIncompleteGrid">
            <summary>
            You can place only completely constructed and undamaged blocks in the inventory
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayers_Muted">
            <summary>
            Muted
            </summary>
        </member>
        <member name="F:MyCommonTexts.VoiceChatVolume">
            <summary>
            Voice chat volume
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_ColumnTitle_RemainingTime">
            <summary>
            Time remaining
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_Lobby">
            <summary>
            Lobby
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinGame_Waiting">
            <summary>
            Waiting
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerErrorSessionEnded">
            <summary>
            The game session has ended. Feel free to join another one.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_EnableAdminMode">
            <summary>
            Enable creative mode tools
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayers_Demote">
            <summary>
            Demote
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenPlayers_Promote">
            <summary>
            Promote
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_RemoveTrash">
            <summary>
            Remove trash
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_StopTrash">
            <summary>
            Stop trash
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_NumberOfLocalTrash">
            <summary>
            Local trash count: {0}
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_TrashRemoval">
            <summary>
            Trash Removal Settings
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_TrashRemoval_Enabled">
            <summary>
            Enable Trash Removal
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_TrashRemoval_MotionType_Any">
            <summary>
            Any motion type
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_TrashRemoval_MotionType_Static">
            <summary>
            Static only
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_TrashRemoval_MotionType_Dynamic">
            <summary>
            Any dynamic state
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_TrashRemoval_MotionType_DynamicStationary">
            <summary>
            Dynamic, and stationary
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_TrashRemoval_MotionType_DynamicMoving">
            <summary>
            Dynamic, and moving
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_TrashRemoval_GridSize_Any">
            <summary>
            Any grid size
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_TrashRemoval_GridSize_Large">
            <summary>
            Large grids only
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_TrashRemoval_GridSize_LargeWithSmall">
            <summary>
            Large grids, with small attached
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_TrashRemoval_GridSize_Small">
            <summary>
            Small grids only
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_TrashRemoval_ClaimState_Any">
            <summary>
            Claimed or unclaimed
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_TrashRemoval_ClaimState_Claimed">
            <summary>
            Claimed only (Includes claimblocks!)
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_TrashRemoval_ClaimState_Unclaimed">
            <summary>
            Unclaimed only
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_TrashRemoval_WithBlockCount">
            <summary>
            Include block count
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_TrashRemoval_WithBlockCount_Value">
            <summary>
            With less blocks than {0}
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_TrashRemoval_DistanceMode">
            <summary>
            Invert Distance Check
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_TrashRemoval_DistanceMode_FurtherFrom">
            <summary>
            Further from player than {0} (m)
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_TrashRemoval_DistanceMode_CloserTo">
            <summary>
            Closer to player than {0} (m)
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_ShowTrashAdminView">
            <summary>
            Show trash information
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_ReplicateEverything">
            <summary>
            Simulate all Locally
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_CurrentValue">
            <summary>
            Current value: {0}
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_CycleObjects">
            <summary>
            Cycle objects
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_Next">
            <summary>
            Next
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_Previous">
            <summary>
            Previous
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_First">
            <summary>
            First
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_Remove">
            <summary>
            Remove
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_Stop">
            <summary>
            Stop
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_RemoveFloating">
            <summary>
            Remove floating objects
            </summary>
        </member>
        <member name="F:MyCommonTexts.DisplayName_Flammables">
            <summary>
            Flammables
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxErrorFactionsTag">
            <summary>
            House tag must be exactly 3 characters long.
            </summary>
        </member>
        <member name="F:MyCommonTexts.Multiplayer_LastMsg">
            <summary>
            No message received from server for {0} seconds.
            </summary>
        </member>
        <member name="F:MyCommonTexts.NPCIdentityAdded">
            <summary>
            Identity {0} was added
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_GameMode">
            <summary>
            Game Mode
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_LargeGrids">
            <summary>
            Find only large grids
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenDebugAdminMenu_SmallGrids">
            <summary>
            Find only small grids
            </summary>
        </member>
        <member name="F:MyCommonTexts.BlockPropertiesText_Type">
            <summary>
            Type: 
            </summary>
        </member>
        <member name="F:MyCommonTexts.DetailLargeGrid">
            <summary>
            Large Grid
            </summary>
        </member>
        <member name="F:MyCommonTexts.DetailSmallGrid">
            <summary>
            Small Grid
            </summary>
        </member>
        <member name="F:MyCommonTexts.DetailStaticGrid">
            <summary>
            Static Grid
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsGame_ReleasingAltResetsCamera">
            <summary>
            Releasing alt resets camera
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipGameOptionsReleasingAltResetsCamera">
            <summary>
            When the button for looking around is released, the camera resets to its default position.
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxCaptionNotReady">
            <summary>
            Selected medical room is not ready.
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextNotReady">
            <summary>
            Selected medical room is not ready. Please wait until it is streamed from server.
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxF12Question">
            <summary>
            WARNING
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextF12Question">
            <summary>
            You are entering the developer debug screen. Some of the features may crash the game or cause other errors. Continue?
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationStatNotEnough">
            <summary>
            Not enough {0}
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationStatZero">
            <summary>
            You are out of {0}
            </summary>
        </member>
        <member name="F:MyCommonTexts.MuteWhenNotInFocus">
            <summary>
            Mute when inactive
            </summary>
        </member>
        <member name="F:MyCommonTexts.TooltipMuteWhenNotInFocus">
            <summary>
            Mute the game sound when another window has focus.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlTypeNavigation2">
            <summary>
            Navigation 2
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenLoadSubscribedWorldCopyWorld">
            <summary>
            Copy World
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationResearchUnlocked">
            <summary>
            You have unlocked new knowledge about {0}.
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationResearchKnown">
            <summary>
            You already have knowledge about {0}!
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:MyCommonTexts.MessageBoxTextWorldExistsDownloadOverwrite" -->
        <member name="F:MyCommonTexts.MessageBoxTextWorldExistsOverwrite">
            <summary>
            World already exists! Overwrite?
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipWorkshopCopyWorld">
            <summary>
            Download selected world to save games without loading it (Use to Edit Settings before playing world)
            </summary>
        </member>
        <member name="F:MyCommonTexts.SignalMode_Switch_DefaultMode">
            <summary>
            Signals switched to normal display.
            </summary>
        </member>
        <member name="F:MyCommonTexts.SignalMode_Switch_FullDisplay">
            <summary>
            Signals switched to fully visible.
            </summary>
        </member>
        <member name="F:MyCommonTexts.SignalMode_Switch_NoNames">
            <summary>
            Signals switched to no names.
            </summary>
        </member>
        <member name="F:MyCommonTexts.SignalMode_Switch_Off">
            <summary>
            Signals switched off.
            </summary>
        </member>
        <member name="F:MyCommonTexts.Notification_CannotManipulateDoor">
            <summary>
            Cannot open or close the door. Check for blocking objects!
            </summary>
        </member>
        <member name="F:MyCommonTexts.AudioSettings_UseMusicController">
            <summary>
            Use contextual music
            </summary>
        </member>
        <member name="F:MyCommonTexts.ControlName_ChangeBlockVariants">
            <summary>
            Change block variants
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsGame_Skin">
            <summary>
            Skin
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsGame_SkinWarning">
            <summary>
            Note: Not all screens support skin at the moment
            </summary>
        </member>
        <member name="F:MyCommonTexts.AnimatedRotation">
            <summary>
            Animated block rotation
            </summary>
        </member>
        <member name="F:MyCommonTexts.TooltipAnimatedRotation">
            <summary>
            Whether 90 degree block rotation will be animated.
            </summary>
        </member>
        <member name="F:MyCommonTexts.BuildingSizeHint">
            <summary>
            Show building size hint
            </summary>
        </member>
        <member name="F:MyCommonTexts.AudioSettings_ShipSoundsBasedOnSpeed">
            <summary>
            Speed based ship sounds
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_MaxBackupSaves">
            <summary>
            Maximum backup saves
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_MaxBackupSavesDisabled">
            <summary>
            Off
            </summary>
        </member>
        <member name="F:MyCommonTexts.ToolTipWorldSettings_MaxBackupSaves">
            <summary>
            Configure the maximum number of saves that should be backed up. The backup folder is located in the respective save folder. When this is set to 0 the backup feature is disabled and all existing backups are deleted!
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationPerformanceLow">
            <summary>
            Game performance is low. Cause: {0}
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaAI">
            <summary>
            AI
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaBlocks">
            <summary>
            Blocks update
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaConveyor">
            <summary>
            Conveyor system
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaGrid">
            <summary>
            Grids update
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaGyro">
            <summary>
            Gyroscope system
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaOxygen">
            <summary>
            Oxygen system
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaPhysics">
            <summary>
            Physics
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaRender">
            <summary>
            Render (CPU)
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaScripts">
            <summary>
            Scripts
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaTextures">
            <summary>
            Loading mesh/texture
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsGame_EnablePerformanceWarnings">
            <summary>
            Show warnings in game
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaClearAndGeometryRender">
            <summary>
            GPU (geometry)
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaLights">
            <summary>
            GPU (lights)
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaPostProcess">
            <summary>
            GPU (postprocessing)
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaRenderFoliage">
            <summary>
            GPU (foliage)
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaShadows">
            <summary>
            GPU (shadows)
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaSSAO">
            <summary>
            GPU (SSAO)
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaTransparentPass">
            <summary>
            GPU (transparency)
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningHeading">
            <summary>
            PERFORMANCE WARNINGS Press Ctrl + {0} for more info
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaAIDescription">
            <summary>
            Updating AI and pathfinding. Turn off cyberhounds and spiders.
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaBlocksDescription">
            <summary>
            Update of individual blocks. Too many blocks in the world.
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaClearAndGeometryRenderDescription">
            <summary>
            Rendering world geometry. Lower your voxel quality.
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaConveyorDescription">
            <summary>
            Update of conveyors. Too many conveyors or blocks using conveyors in the world.
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaGridDescription">
            <summary>
            Updating of ship systems other than oxygen, gyroscopes and conveyors.
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaGyroDescription">
            <summary>
            Update of gyroscope systems. Too many gyroscopes in the world.
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaLightsDescription">
            <summary>
            Rendering lights. Too many artificial lights in the world.
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaOxygenDescription">
            <summary>
            Update of oxygen systems. Too many or too large pressurized areas.
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaPhysicsDescription">
            <summary>
            Update of physics. Too many individual objects interacting with each other.
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaPostProcessDescription">
            <summary>
            GPU postprocessing. Includes antialiasing.
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaRenderDescription">
            <summary>
            CPU preparing world for rendering.
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaRenderFoliageDescription">
            <summary>
            Rendering foliage (grass). Lower your foliage settings.
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaScriptsDescription">
            <summary>
            Executing programmable blocks' scripts. Too many or too complicated scripts.
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaShadowsDescription">
            <summary>
            Rendering shadows. Lower your shadow quality.
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaSSAODescription">
            <summary>
            Ambient occlusion.
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaTexturesDescription">
            <summary>
            Loading of meshes or textures.
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningAreaTransparentPassDescription">
            <summary>
            Rendering transparent objects and particles.
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningHelpHeader">
            <summary>
            Performance Warnings
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationBlocksLeft">
            <summary>
            You can still place {0} blocks
            </summary>
        </member>
        <member name="F:MyCommonTexts.PlayerMaxBlocks">
            <summary>
            Player's block limit
            </summary>
        </member>
        <member name="F:MyCommonTexts.BuiltBy">
            <summary>
            Built by
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenTerminalInfo_Assign">
            <summary>
            Assign
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenTerminalInfo_Blocks">
            <summary>
            blocks
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextConfirmAcceptTransferGrid">
            <summary>
            Player {0} is transfering ownership of {1} blocks in ship {2} to you. Do you accept?
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextConfirmDeleteGrid">
            <summary>
            Are you sure you want to delete all your blocks from {0}? The ship may fall apart.
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextConfirmTransferGrid">
            <summary>
            Are you sure you want to transfer ownership of your blocks from {0} to player {1}?
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextNotEnoughFreeBlocksForTransfer">
            <summary>
            Player {0} does not have enough free blocks to accept your part of the ship
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenTerminalInfo_Overview">
            <summary>
            Owned blocks overview
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenTerminalInfo_YouBuilt">
            <summary>
            You built
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextPlayerNotOnline">
            <summary>
            Player {0} is no longer online.
            </summary>
        </member>
        <member name="F:MyCommonTexts.WorldSettings_BlockLimits">
            <summary>
            Block limits
            </summary>
        </member>
        <member name="F:MyCommonTexts.MessageBoxTextBlockLimitDisableWarning">
            <summary>
            Block limits are set to ensure good performance. Please disable this option only for experimental purposes.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsButtonGraphics">
            <summary>
            Graphics
            </summary>
        </member>
        <member name="F:MyCommonTexts.ScreenOptionsButtonBindings">
            <summary>
            Bindings
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningShowAll">
            <summary>
            Show all warnings
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningLastOccurrence">
            <summary>
            Last occurrence
            </summary>
        </member>
        <member name="F:MyCommonTexts.PerformanceWarningTooManyBlocks">
            <summary>
            Too many blocks of this type.
            </summary>
        </member>
        <member name="F:MyCommonTexts.AudioSettings_EnableReverb">
            <summary>
            Enable echo
            </summary>
        </member>
        <member name="F:MyCommonTexts.LowMemSwitchToLowQuestion">
            <summary>
            Your game ran out of memory. Do you want to switch to low presets and restart the game to apply changes?
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprint_Details">
            <summary>
            Details
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprint_TakeScreenshot">
            <summary>
            Take Screenshot
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprint_Delete">
            <summary>
            Delete
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprint_CreateFromClipboard">
            <summary>
            Create from clipboard
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprint_ReplaceWithClipboard">
            <summary>
            Replace with clipboard
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprint_RefreshBlueprints">
            <summary>
            Refresh Blueprints
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprint_Rename">
            <summary>
            Rename
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprint_Publish">
            <summary>
            Publish
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprint_OpenWorkShop">
            <summary>
            Open WorkShop
            </summary>
        </member>
        <member name="F:MyCommonTexts.Blueprint_ScreenName">
            <summary>
            Blueprints
            </summary>
        </member>
        <member name="F:MyCommonTexts.Inventory_NoSpaceForDrop">
            <summary>
            There is no room to drop that item.
            </summary>
        </member>
        <member name="F:MyCommonTexts.StartupWarning_OldDrivers">
            <summary>
            {0} - Warning!  Your '{1}' graphics card driver is older then required.  We strongly recommend updating the driver. Old drivers might crash the game. Would you like to update the driver?  Yes - Opens a browser to {2} No - Do not display this message again. Cancel - Close this message for now.  Thank You! Keen Software House
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationInventoryConstraint">
            <summary>
            The item cannot be put into this inventory.
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationInventoryConstraintParam">
            <summary>
            {0} cannot be put into {1}.
            </summary>
        </member>
        <member name="F:MyCommonTexts.NotificationInventoryFullParam">
            <summary>
            {0} cannot be put into {1}, the inventory is full.
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerLobbyError">
            <summary>
            Cannot join game. {0}
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerLobbyError_ServerFull">
            <summary>
            The server is full.
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerLobbyError_Banned">
            <summary>
            You have been banned or blocked from the lobby.
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerLobbyError_Unavailable">
            <summary>
            The Steam lobby is unavailable.
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerLobbyError_BlockedMember">
            <summary>
            A member you blocked is already in the lobby.
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerLobbyError_Self">
            <summary>
            Connecting to yourself is illogical.
            </summary>
        </member>
        <member name="F:MyCommonTexts.MultiplayerLobbyError_Unknown">
            <summary>
            Reason unknown.
            </summary>
        </member>
        <member name="F:MyCommonTexts.GDPR_Title">
            <summary>
            Privacy Policy
            </summary>
        </member>
        <member name="F:MyCommonTexts.GDPR_Message">
            <summary>
            Data protection laws have changed in the European Union and we want to make sure you review how your personal data is processed in Medieval Engineers. [{0} You can read our privacy policy here].  By clicking Yes you agree to the collection of anonymized data for the purpose of improving the game experience. You can change your mind at any time by going to Options -> Game, and changing "Anonymous Activity Tracking".
            </summary>
        </member>
        <member name="F:MyCommonTexts.GDPR_Options_Tracking">
            <summary>
            Anonymous Activity Tracking
            </summary>
        </member>
        <member name="F:MyCommonTexts.GDPR_Options_Tracking_Tooltip">
            <summary>
            By checking this box you agree to the collection of anonymized data for the purpose of improving the game experience.
            </summary>
        </member>
        <member name="F:MyCommonTexts.InputDialogError_Parsing">
            <summary>
            Given amount is not a valid number.
            </summary>
        </member>
        <member name="F:MyCommonTexts.InputDialogError_Range">
            <summary>
            Amount should be between {0} and {1}.
            </summary>
        </member>
        <member name="F:MyCommonTexts.Abort">
            <summary>
            Abort
            </summary>
        </member>
        <member name="F:MyCommonTexts.Retry">
            <summary>
            Retry
            </summary>
        </member>
        <member name="F:MyCommonTexts.JoinWorldScreen_LobbyFailMessage">
            <summary>
            Cannot list worlds.
            </summary>
        </member>
        <member name="F:MyCommonTexts.ConsumableItem_NotHungryEnough">
            <summary>
            You are not hungry enough to eat {0}.
            </summary>
        </member>
        <member name="F:MyCommonTexts.Character_FlightOn">
            <summary>
            Flying On
            </summary>
        </member>
        <member name="F:MyCommonTexts.Character_FlightOff">
            <summary>
            Flying Off
            </summary>
        </member>
        <member name="F:MyCommonTexts.LoadingError_WorldVersionTooOld">
            <summary>
            The world was saved in version {0} which is older than {1} and is no longer supported. For backwards compatibility reasons we provide the old version in Steam, please switch to the {2} branch, then load and re-save your world there.
            </summary>
        </member>
    </members>
</doc>

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VRage.Render</name>
    </assembly>
    <members>
        <member name="T:VRageRender.ActorMergeMode">
            <summary>
            Defines how to merge actor children.
            </summary>
        </member>
        <member name="F:VRageRender.ActorMergeMode.None">
            <summary>
            Do not merge.
            </summary>
        </member>
        <member name="F:VRageRender.ActorMergeMode.MergeMaterials">
            <summary>
            Merge similar materials.
            </summary>
        </member>
        <member name="F:VRageRender.ActorMergeMode.Instancing">
            <summary>
            Merge instances of the same mesh.
            </summary>
        </member>
        <member name="F:VRageRender.ActorMergeMode.Hybrid">
            <summary>
            Switch between merging materials and instancing dynamically.
            </summary>
        </member>
        <member name="T:VRageRender.Animations.MyAnimationTreeNode">
            <summary>
            Interface representing one node in animation tree.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationTreeNode.Advance(VRageRender.Animations.MyAnimationAdvanceData@)">
            <summary>
            Advance local time, dt is delta time in seconds.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationTreeNode.Update(VRageRender.Animations.MyAnimationUpdateData@)">
            <summary>
            Update the animation tree node (bone transforms).
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationTreeNode.GetLocalTimeNormalized">
            <summary>
            Get local time in normalized format (from 0 to 1).
            May fail for more complicated structure - there can be more independent local times (each track has its own).
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationTreeNode.SetLocalTimeNormalized(System.Single)">
            <summary>
            Set local time in normalized format (from 0 to 1). 
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationTreeNode.CanBeSkipped">
            <summary>
            Optimization. Indicates that the node does not change anything.
            </summary>
        </member>
        <member name="T:VRageRender.Animations.MyAnimationTreeNodeDummy">
            <summary>
            Node of animation tree: single track. Contains reference to animation clip.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationTreeNodeDummy.Advance(VRageRender.Animations.MyAnimationAdvanceData@)">
            <inheritdoc />
        </member>
        <member name="M:VRageRender.Animations.MyAnimationTreeNodeDummy.CanBeSkipped">
            <inheritdoc />
        </member>
        <member name="T:VRageRender.Animations.MyAnimationTreeNodeIkTarget">
            <summary>
            Node implementing inverse kinematics with single target transform.
            </summary>
        </member>
        <member name="P:VRageRender.Animations.MyAnimationTreeNodeIkTarget.TargetBoneName">
            <summary>
            Name of the target bone.
            </summary>
        </member>
        <member name="P:VRageRender.Animations.MyAnimationTreeNodeIkTarget.TargetPoint">
            <summary>
            The length of the ik chain
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationTreeNodeIkTarget.IkCcdSettings">
            <summary>
            Setup of the IK solver.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationTreeNodeIkTarget.Advance(VRageRender.Animations.MyAnimationAdvanceData@)">
            <inheritdoc />
        </member>
        <member name="M:VRageRender.Animations.MyAnimationTreeNodeIkTarget.Initialize(VRageRender.Animations.MyAnimationUpdateData@)">
            <summary>
            Initialize this IK node.
            </summary>
        </member>
        <member name="T:VRageRender.Animations.MyAnimationTreeNodeSpeedModifier">
            <summary>
            Changing the speed of child nodes.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationTreeNodeSpeedModifier.Advance(VRageRender.Animations.MyAnimationAdvanceData@)">
            <inheritdoc />
        </member>
        <member name="T:VRageRender.Animations.MyAnimationTreeNodeSetter">
            <summary>
            The setter node sets the animation variable once the specified time in node is reached.
            The node can be inserted in between other animation nodes (it works as a decorator).
            </summary>
        </member>
        <member name="T:VRageRender.Animations.MyAnimationTreeNodeSetter.ValueAssignment">
            <summary>
            Pair of variable name and its new value.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationTreeNodeSetter.ValueAssignment.Name">
            <summary>
            Variable name.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationTreeNodeSetter.ValueAssignment.Value">
            <summary>
            Value to be set.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationTreeNodeSetter.m_stateMachine">
            <summary>
            Link to the state machine that contains animation tree with this node. 
            If it is null, this node needs initial setup.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationTreeNodeSetter.m_variables">
            <summary>
            Link to the animation variable storage.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationTreeNodeSetter.m_valueWasSet">
            <summary>
            Flag indicating that the value was already set.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationTreeNodeSetter.Child">
            <summary>
            Link to the child node.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationTreeNodeSetter.Time">
            <summary>
            Local animation time when the value should be set.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationTreeNodeSetter.Value">
            <summary>
            Value that is set to animation storage once time spent in the node exceeds specified time (MyAnimationTreeNodeSetter.Time).
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationTreeNodeSetter.ResetValue">
            <summary>
            Value that is set to animation storage once we leave current animation state.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationTreeNodeSetter.Advance(VRageRender.Animations.MyAnimationAdvanceData@)">
            <inheritdoc />
        </member>
        <member name="M:VRageRender.Animations.MyAnimationTreeNodeSetter.Update(VRageRender.Animations.MyAnimationUpdateData@)">
            <inheritdoc />
            <summary>
            Update implementation.
            </summary>
            <param name="data">animation controller data, references</param>
        </member>
        <member name="T:VRageRender.Animations.MyAnimationTreeNodeMix1D">
            <summary>
            Mixing between animation nodes on 1D axis.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationTreeNodeMix1D.Advance(VRageRender.Animations.MyAnimationAdvanceData@)">
            <inheritdoc />
        </member>
        <member name="T:VRageRender.Animations.MyAnimationTreeNodeTrack">
            <inheritdoc />
            <summary>
            Node of animation tree: single track. Contains reference to animation clip.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationTreeNodeTrack.Advance(VRageRender.Animations.MyAnimationAdvanceData@)">
            <inheritdoc />
        </member>
        <member name="M:VRageRender.Animations.MyAnimationTreeNodeTrack.ProcessLayerTimeSync(VRageRender.Animations.MyAnimationAdvanceData@)">
            <summary>
            Synchronize time with defined layer. Returns false if the time is not synchronized.
            </summary>
        </member>
        <member name="T:VRageRender.Animations.MyAnimationVariableStorage">
            <summary>
            Key-value storage of float values, other types are implicitly converted.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationVariableStorage.SetValue(VRage.Utils.MyStringId,System.Single)">
            <summary>
            Set the float value for specified key. This resets matrix stored under the same key.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationVariableStorage.GetValue(VRage.Utils.MyStringId,System.Single@)">
            <summary>
            Get the float value set under specified key.
            </summary>
            <param name="key">key</param>
            <param name="value">out: stored value</param>
            <returns>true on success, false if key is undefined</returns>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationVariableStorage.SetTransformValue(VRage.Utils.MyStringId,VRageMath.MyTransformD@)">
            <summary>
            Set the transform value for specified key. This resets float stored under the same key.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationVariableStorage.SetTransformValue(VRage.Utils.MyStringId,VRageMath.MyTransformD)">
            <summary>
            Set the transform value for specified key. This resets float stored under the same key.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationVariableStorage.GetTransformValue(VRage.Utils.MyStringId,VRageMath.MyTransformD@)">
            <summary>
            Get the transform value set under specified key.
            </summary>
            <param name="key">key</param>
            <param name="value">out: stored value</param>
            <returns>true on success, false if key is undefined</returns>
        </member>
        <member name="T:VRageRender.Animations.MyAnimationVariableStorageHints">
            <summary>
            Variable storage - Hints for the user, common variable names, descriptions, string ids.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationVariableStorageHints.MyVariableNameHint.Name">
            <summary>
            Variable name.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationVariableStorageHints.MyVariableNameHint.Hint">
            <summary>
            Description of the variable.
            </summary>
        </member>
        <member name="P:VRageRender.Animations.IMyAnimationLayer.Name">
            <summary>
            Layer name, must be unique per animation controller
            </summary>
        </member>
        <member name="M:VRageRender.Animations.IMyAnimationLayer.Advance(VRageRender.Animations.MyAnimationAdvanceData@)">
            <summary>
            Advance in the state machine and set animation variables
            </summary>
            <param name="advanceData"></param>
        </member>
        <member name="M:VRageRender.Animations.IMyAnimationLayer.CanBeSkipped">
            <summary>
            Optimization: skip the animation tree if possible
            </summary>
            <remarks></remarks>
            <returns>true if the animation tree can be skipped</returns>
        </member>
        <member name="M:VRageRender.Animations.IMyAnimationLayer.Update(VRageRender.Animations.MyAnimationUpdateData@)">
            <summary>
            Update the computed skeleton.
            </summary>
            <remarks>
            If this update will not produce any results <see cref="M:VRageRender.Animations.IMyAnimationLayer.CanBeSkipped" /> should have returned true.
            </remarks>
            <param name="animationUpdateData"></param>
        </member>
        <member name="P:VRageRender.Animations.IMyAnimationLayer.Mode">
            <summary>
            Layer blending mode. Each layer can replace masked bones or can add transformations from this layer to them.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.IMyAnimationLayer.TriggerAction(VRage.Utils.MyStringId)">
            <summary>
            Trigger an action in this layer. 
            If there is a transition having given (non-null) name, it is followed immediately.
            Conditions of transition are ignored.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.IMyAnimationLayer.GetCurrentTimeNormalized">
            <summary>
            Returns the normalized time of the current animation node.
            </summary>
            <remarks>
            This is used by <see cref="P:VRageRender.Animations.MyAnimationTreeNodeTrack.SynchronizeWithLayer"/> and can be used to give custom timing to other animation layers.
            </remarks>
            <returns>The local normalized time of the active animation node, or null if it cannot be determined.</returns>
        </member>
        <member name="T:VRageRender.Animations.MyLayerBlendingMode">
            <summary>
            Blending mode of an animation layer
            </summary>
        </member>
        <member name="T:VRageRender.Animations.ModelAnimations">
            <summary>
            Class that contains additional information attached to the model and
            shared with the runtime.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.ModelAnimations.skeleton">
            <summary>
            The bone indices for the skeleton associated with any
            skinned model.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.ModelAnimations.clips">
            <summary>
            Any associated animation clips
            </summary>
        </member>
        <member name="P:VRageRender.Animations.ModelAnimations.Skeleton">
            <summary>
            The bone indices for the skeleton associated with any
            skinned model.
            </summary>
        </member>
        <member name="P:VRageRender.Animations.ModelAnimations.Clips">
            <summary>
            Animation clips associated with this model
            </summary>
        </member>
        <member name="T:VRageRender.Animations.MyAnimationClip">
            <summary>
            An animation clip is a set of keyframes with associated bones.
            VRAGE TODO: Any link to actual animation collection? Or at least to rest pose? Please?
            </summary>
        </member>
        <member name="T:VRageRender.Animations.MyAnimationClip.BoneState">
            <summary>
            BoneState is a rotation and translation of the bone.
            It would be easy to extend this to include scaling as well.
            </summary>
        </member>
        <member name="T:VRageRender.Animations.MyAnimationClip.Keyframe">
            <summary>
            An Keyframe extends rotation and translation of the bone by specifying time of the event.
            </summary>
            Beware, this class is used also in MWM builder and changing it to struct may cause problems during MWM generation.
        </member>
        <member name="T:VRageRender.Animations.MyAnimationClip.Bone">
            <summary>
            Keyframes are grouped per bone for an animation clip
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationClip.Bone.m_name">
            <summary>
            Each bone has a name so we can associate it with a runtime model
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationClip.Bone.m_keyframes">
            <summary>
            The keyframes for this bone
            </summary>
        </member>
        <member name="P:VRageRender.Animations.MyAnimationClip.Bone.Name">
            <summary>
            The bone name for these keyframes
            </summary>
        </member>
        <member name="P:VRageRender.Animations.MyAnimationClip.Bone.Keyframes">
            <summary>
            The keyframes for this bone
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationClip.bones">
            <summary>
            The bones for this animation
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationClip.Name">
            <summary>
            Name of the animation clip
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationClip.Duration">
            <summary>
            Duration of the animation clip
            </summary>
        </member>
        <member name="P:VRageRender.Animations.MyAnimationClip.Bones">
            <summary>
            The bones for this animation clip with their keyframes
            </summary>
        </member>
        <member name="T:VRageRender.Animations.MyAnimationController">
            <summary>
            Animation controller contains and drives skeletal animations.
            It also serves as an abstraction layer, hiding low/level classes.
            </summary>
        </member>
        <member name="T:VRageRender.Animations.MyAnimationController.MyBonesPool">
            <summary>
            Simple pool allocator for bone results.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationController.MyBonesPool.Reset(VRageRender.Animations.MyCharacterBone[])">
            <summary>
            Set the new bone count and default (rest) pose.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationController.MyBonesPool.SetDefaultPose(System.Collections.Generic.List{VRageRender.Animations.MyAnimationClip.BoneState})">
            <summary>
            Set the link to default pose = default bone positions and rotations given when using this allocator.
            If null is given, rest pose is used.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationController.MyBonesPool.Alloc">
            <summary>
            Allocate array of bones from pool. Bones are in the rest (bind) position by default.
            </summary>
            <returns></returns>
        </member>
        <member name="E:VRageRender.Animations.MyAnimationController.LayersChanged">
            <summary>
            Raised when a layer is removed or added to this animation controller.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationController.CreateLayer(System.String,System.Int32)">
            <summary>
            Create animation layer with unique name. Parameter insertionIndex can be left -1 to add the layer at the end.
            If layer with same name is already present, method fails and returns null.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationController.TryInsertLayer(VRageRender.Animations.IMyAnimationLayer,System.Int32)">
            <summary>
            Tries to insert the given layer into the animation layer
            </summary>
            <param name="layer">Layer to insert</param>
            <param name="insertionIndex">Index to insert at, or -1 to insert at the end</param>
            <returns>true if the layer was successfully added</returns>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationController.Update(VRageRender.Animations.MyAnimationUpdateData@,System.Double)">
            <summary>
            Update this animation controller.
            </summary>
            <param name="animationUpdateData">See commentary in MyAnimationUpdateData</param>
            <param name="deltaTimeSec"></param>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationController.BlendLayers(VRageRender.Animations.MyAnimationUpdateData@,VRageRender.Animations.MyAnimationUpdateData@,VRageRender.Animations.MyLayerBlendingMode)">
            <summary>
            Blend two layer results, keep the result in animationUpdateData.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationController.TriggerAction(VRage.Utils.MyStringId)">
            <summary>
            Trigger an action in all layers. 
            If there is a transition having given (non-null) name, it is followed immediatelly.
            Conditions of transition are ignored.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationController.UpdateInverseKinematics(VRageRender.Animations.MyCharacterBone[])">
            <summary>
            Perform inverse kinematics.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationControllerDebugDraw.Enable">
            <summary>
            Enable debug draw.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationControllerDebugDraw.DebugDraw(VRageRender.Animations.MyAnimationUpdateData@,VRageMath.Vector3D,VRageMath.Color)">
            <summary>
            Draw debugging bones info.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationIkSolvers.SolveIkTwoBones(VRageRender.Animations.MyCharacterBone[],VRageRender.Animations.MyAnimationIkChainExt,VRageMath.Vector3@,VRageMath.Vector3@,System.Boolean)">
            <summary>
            Solve IK for chain of two bones + change rotation of end bone.
            </summary>
            <param name="characterBones">bone storage</param>
            <param name="ikChain">description of bone chain</param>
            <param name="finalPosition">desired position of end bone</param>
            <param name="finalNormal">desired normal of end bone - would be projected on plane first bone-second bone-third bone</param>
            <param name="fromBindPose">solve this starting from the bind pose</param>
            <returns>true on success</returns>
        </member>
        <member name="T:VRageRender.Animations.MyAnimationIkSolvers.CcdSettings">
            <summary>
            Setup of the IK CCD solver.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationIkSolvers.CcdSettings.#ctor(System.Boolean,System.Int32)">
            <summary>
            Construct the settings of IK CCD solver.
            </summary>
            <param name="allowStretching">allow streching of bones to reach the target</param>
            <param name="maxIterationCount">maximum iteration count, default value is 15</param>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationIkSolvers.SolveIkCcd(VRageRender.Animations.MyAnimationIkSolvers.CcdSettings,VRageMath.MyTransform[],VRageMath.MyTransform@,VRageMath.MyTransformD@,System.Boolean[],VRageMath.MyTransform[])">
            <summary>
            Solve inverse kinematics for given bone chain using cyclic coordinate descent.
            </summary>
            <param name="settings"></param>
            <param name="boneChainWorld"></param>
            <param name="targetTransform"></param>
            <param name="worldMatrixDebug"></param>
            <param name="boneMask">mask defining which bones are allowed to rotate</param>
            <param name="tempStorage">temporary storage of the same length as boneChainWorld</param>
            <returns>true on success</returns>
        </member>
        <member name="T:VRageRender.Animations.IMyTerrainHeightProvider">
            <summary>
            Interface providing terrain height in model space.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.IMyTerrainHeightProvider.GetTerrainHeight(System.Int32,VRageMath.Vector3,System.Single@,VRageMath.Vector3@)">
            <summary>
            Get terrain height in model space.
            </summary>
            <param name="boneIndex"></param>
            <param name="bonePosition">bone position in model space</param>
            <param name="terrainHeight">terrain height in model space</param>
            <param name="terrainNormal">terrain normal in (character) model space</param>
            <returns>true if the intersection was found</returns>
        </member>
        <member name="M:VRageRender.Animations.IMyTerrainHeightProvider.GetReferenceTerrainHeight">
            <summary>
            Get reference terrain height - (flat terrain height) in model space.
            </summary>
        </member>
        <member name="T:VRageRender.Animations.MyAnimationIkChain">
            <summary>
            Tiny structure describing IK chain.
            </summary>
        </member>
        <member name="T:VRageRender.Animations.MyAnimationIkChainExt">
            <summary>
            Tiny structure describing IK chain + remembering last state.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationIkChainExt.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationIkChainExt.#ctor(VRageRender.Animations.MyAnimationIkChain)">
            <summary>
            Copy constructor.
            </summary>
        </member>
        <member name="T:VRageRender.Animations.MyAnimationFeetIk">
            <summary>
            Class providing Feet IK solutions.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationFeetIk.m_feet">
            <summary>
            List of all feet bones.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationFeetIk.m_ignoredBonesTable">
            <summary>
            List of all ignored bones (that should not move during IK!).
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationFeetIk.m_ignoredBoneNames">
            <summary>
            All ignored bones (that should not move during IK!). Names of ignored bones.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationFeetIk.m_characterDirDownOffset">
            <summary>
            Character offset - used when the character is slightly above the terrain due to the capsule
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationFeetIk.m_characterDirDownOffsetMin">
            <summary>
            Maximum character offsets.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationFeetIk.m_characterDirDownOffsetSmoothness">
            <summary>
            Character offset smoothing.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationFeetIk.m_currentFeetIkInfluence">
            <summary>
            Current influence of the feet IK.
            </summary>
        </member>
        <member name="P:VRageRender.Animations.MyAnimationFeetIk.Feet">
            <summary>
            List of all feet bones.
            </summary>
        </member>
        <member name="P:VRageRender.Animations.MyAnimationFeetIk.TerrainHeightProvider">
            <summary>
            Interface providing results from raycasts.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationFeetIk.SolveFeet(System.Boolean,VRageRender.Animations.MyCharacterBone[],System.Boolean)">
            <summary>
            Solve feet positions. 
            </summary>
            <param name="enabled">Feet resolving is enabled - this is a parameter because of blending over time.</param>
            <param name="characterBones">Character bones storage.</param>
            <param name="allowMovingWithBody">If feet cannot reach, move the body</param>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationFeetIk.RegisterFootBone(System.String,System.Int32,System.Boolean)">
            <summary>
            Register foot IK bone chain.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationFeetIk.RegisterIgnoredBone(System.String)">
            <summary>
            Register bone ignored by IK. IK will not move it.
            </summary>
        </member>
        <member name="T:VRageRender.Animations.MyAnimationStateMachine">
            <summary>
            Animation state machine selects the animation to match current state.
            When it finds valid transition to some next state, transition is performed automatically.
            </summary>
        </member>
        <member name="P:VRageRender.Animations.MyAnimationStateMachine.VRageRender#Animations#IMyAnimationLayer#Mode">
            <inheritdoc cref="P:VRageRender.Animations.IMyAnimationLayer.Mode"/>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationStateMachine.Advance(VRageRender.Animations.MyAnimationAdvanceData@)">
            <inheritdoc cref="M:VRageRender.Animations.IMyAnimationLayer.Advance(VRageRender.Animations.MyAnimationAdvanceData@)"/>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationStateMachine.Update(VRageRender.Animations.MyAnimationUpdateData@)">
            <inheritdoc cref="M:VRageRender.Animations.IMyAnimationLayer.Update(VRageRender.Animations.MyAnimationUpdateData@)"/>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationStateMachine.ComputeEaseInEaseOut(System.Single,VRageRender.Animations.MyAnimationTransitionCurve)">
            <summary>
            Computing transition weight from the normalized time.
            </summary>
            <param name="t">normalized remaining time of the animation that is being phased out, going from 1 to 0</param>
            <param name="curve">used transition curve</param>
            <returns>weight of the animation that is being phased out, 1 to 0</returns>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationStateMachine.CanBeSkipped">
            <inheritdoc cref="M:VRageRender.Animations.IMyAnimationLayer.CanBeSkipped"/>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationStateMachine.GetCurrentTimeNormalized">
            <inheritdoc />
        </member>
        <member name="T:VRageRender.Animations.MyAnimationStateMachineNode">
            <summary>
            Animation state machine node is a representation of one state inside MyAnimationStateMachine.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationStateMachineNode.Advance(VRageRender.Animations.MyAnimationAdvanceData@)">
            <summary>
            Advance local time.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationStateMachineNode.Update(VRageRender.Animations.MyAnimationStateMachine)">
            <summary>
            Update animation state (compute bone transforms).
            </summary>
            <param name="animStateMachine">link to animation state machine</param>
        </member>
        <member name="T:VRageRender.Animations.MyAnimationTransitionCurve">
            <summary>
            Transition mixing curve type.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationTransitionCurve.Smooth">
            <summary>
            Smooth transition (smooth step).
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationTransitionCurve.EaseIn">
            <summary>
            Ease in (cubic function).
            </summary>
        </member>
        <member name="T:VRageRender.Animations.MyAnimationStateMachineTransition">
            <summary>
            Description of transition to another state (MyAnimationStateMachineNode) in the state machine (MyAnimationStateMachine).
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationStateMachineTransition.Evaluate">
            <summary>
            Animation transition evaluation - different behavior from default transition. 
            If no conditions are given and it has a name, it must be triggered manually.
            
            </summary>
        </member>
        <member name="T:VRageRender.Animations.MyAnimationLodDescriptor">
            <summary>
            The descriptor of animation lodding.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationLodDescriptor.MAX_UPDATE_OFFSET">
            <summary>
            Maximum update offset.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationLodDescriptor.UpdatePattern">
            <summary>
            Update pattern. Bit=1 indicates "update", bit=0 indicates "pass".
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationLodDescriptor.UpdateOffset">
            <summary>
            Update offset provides stratification of calculations. Spread them across more frames.
            Correct value range: 0-7.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationLodDescriptor.FrameInterpolation">
            <summary>
            Specifies whether frame interpolation is enabled.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationLodDescriptor.TransitionBlending">
            <summary>
            Specifies whether fluent animation transitions (from state to state) are enabled.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyAnimationLodDescriptor.UpdateAdditiveLayers">
            <summary>
            Specifies whether additive layers are enabled.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyAnimationLodDescriptor.#ctor(System.Byte,System.Byte,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Full constructor.
            </summary>
        </member>
        <member name="T:VRageRender.Animations.MyAnimationAdvanceData">
            <summary>
            Helper structure passed as an parameter during computation of current pose.
            </summary>
        </member>
        <member name="T:VRageRender.Animations.MyAnimationUpdateData">
            <summary>
            Helper structure passed as an parameter during computation of current pose.
            </summary>
        </member>
        <member name="T:VRageRender.Animations.MyCharacterBone">
            <summary>
            Bones in this model are represented by this class, which
            allows a bone to have more detail associatd with it.
            
            This class allows you to manipulate the local coordinate system
            for objects by changing the scaling, translation, and rotation.
            These are indepenent of the bind transformation originally supplied
            for the model. So, the actual transformation for a bone is
            the product of the:
            
            Bind transform^-1
            Animation transform
            Parent Absolute Transform
            
            </summary>
        </member>
        <member name="P:VRageRender.Animations.MyCharacterBone.Index">
            <summary>
            Bone index in the default unsorted storage.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyCharacterBone.Parent">
            <summary>
            Link to the parent bone, can be null.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyCharacterBone.Name">
            <summary>
            The bone name.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyCharacterBone.InheritRotation">
            <summary>
            Sets this bone to inherit rotation in the hierarchy.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyCharacterBone.m_children">
            <summary>
            List of child bones.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyCharacterBone.Transform">
            <summary>
            The bind transform is the transform for this bone
            as loaded from the original model. It's the base pose.
            I do remove any scaling, though.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyCharacterBone.m_invalidAbsoluteTransform">
            <summary>
            Indicates whether bone needs recalculation of absolute transform.
            </summary>
        </member>
        <member name="P:VRageRender.Animations.MyCharacterBone.HasThisOrAnyParentChanged">
            <summary>
            Has this bone or any parent bone changed?
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyCharacterBone.#ctor(System.Int32,System.String,VRageRender.Animations.MyCharacterBone,VRageMath.Matrix,VRageMath.Matrix[])">
            <summary>
            Constructor for a bone object
            </summary>
            <param name="index">Index of this bone in storage arrays.</param>
            <param name="name">The name of the bone</param>
            <param name="linkToParent">A parent for this bone</param>
            <param name="bindTransformMatrix">The initial bind transform for the bone</param>
            <param name="absoluteStorage">reference to matrix array storing all absolute transforms of the skeleton</param>
        </member>
        <member name="M:VRageRender.Animations.MyCharacterBone.ComputeAbsoluteTransforms(VRageRender.Animations.MyCharacterBone[])">
            <summary>
            Compute absolute bone transforms for whole hierarchy.
            Expects the array to be sorted by depth in hiearachy.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyCharacterBone.ComputeAbsoluteTransform(System.Boolean[],System.Boolean)">
            <summary>
            Compute the absolute transformation for this bone.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyCharacterBone.TranslateAllBones(VRageRender.Animations.MyCharacterBone[],VRageMath.Vector3)">
            <summary>
            Translate all bones. Translation vector is given in model space. 
            We expect that absolute transforms are already computed.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyCharacterBone.SetTransformToBindPose">
            <summary>
            This sets the rotation and translation of the rest pose.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyCharacterBone.SetTransform(VRageMath.Vector3@,VRageMath.Quaternion@)">
            <summary>
            Set current local translation and rotation of this bone. Stores translation and rotation to Transform.AnimTransform.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyCharacterBone.SetTransformFromAbsoluteMatrix(VRageMath.Matrix@,System.Boolean)">
            <summary>
            Set the rotation and translation of the bone from absolute transform. Does not recompute hierarchy. 
            Call ComputeAbsoluteTransform.
            </summary>
            <param name="absoluteMatrix">absolute transform</param>
            <param name="onlyRotation">apply only rotation</param>
        </member>
        <member name="M:VRageRender.Animations.MyCharacterBone.SetTransformFromAbsoluteTransform(VRageMath.MyTransform@,System.Boolean)">
            <summary>
            Set the rotation and translation of the bone from absolute transform. Does not recompute hierarchy. 
            Call ComputeAbsoluteTransform.
            </summary>
            <param name="absoluteTransform">absolute transform</param>
            <param name="onlyRotation">apply only rotation</param>
        </member>
        <member name="M:VRageRender.Animations.MyCharacterBone.GetDiffFromBindTransform(VRageMath.Vector3@,VRageMath.Quaternion@,VRageMath.Vector3@,VRageMath.Quaternion@)">
            <summary>
            Returns delta transform from bind transform to transform defined by given translation and rotation.
            </summary>
        </member>
        <member name="T:VRageRender.Animations.MyCharacterBoneTransform">
            <summary>
            Storage of the character bone transforms.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyCharacterBoneTransform.AnimTransform">
            <summary>
            Current animation transform. Relative transform.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyCharacterBoneTransform.AbsoluteTransform">
            <summary>
            Current absolute transform matrix. Be sure to update it before reading.  MyCharacterBone.ComputeAbsoluteTransform.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyCharacterBoneTransform.BindTransform">
            <summary>
            Local bind matrix.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyCharacterBoneTransform.InvBindTransform">
            <summary>
            Inverse of local bind matrix.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyCharacterBoneTransform.BindTransformMatrix">
            <summary>
            Local bind transform matrix.
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyCharacterBoneTransform.AbsoluteBindTransformInv">
            <summary>
            Inverse of absolute bind transform for skinning
            </summary>
        </member>
        <member name="F:VRageRender.Animations.MyCharacterBoneTransform.AbsoluteStorage">
            <summary>
            Reference to array storing all the absolute transforms.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyCharacterBoneTransform.GetAbsoluteRigMatrix">
            <summary>
            Returns bone's rig absolute transform - including transforms of all parent bones
            </summary>
            <returns></returns>
        </member>
        <member name="P:VRageRender.Animations.MyCharacterBoneTransform.AbsoluteMatrix">
            <summary>
            Get the absolute transform matrix.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyCharacterBoneTransform.CopyAnimationStateFrom(VRageRender.Animations.MyCharacterBoneTransform@)">
            <summary>
            Copy internal state representing current bone transform from another instance.
            </summary>
            <param name="source">source instance where to copy from</param>
        </member>
        <member name="T:VRageRender.Animations.MyWorldSpaceBones">
            <summary>
            Helper class computing world space coordinates of bones on demand.
            World space means "object" space, bones are relatively positioned to each other but the object world matrix is not applied yet.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyWorldSpaceBones.#ctor(VRageRender.Animations.MyCharacterBone[])">
            <summary>
            Constructor. Create internal structures to match passed array of character bones.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyWorldSpaceBones.ResetAllToLocalSpace(System.Collections.Generic.List{VRageRender.Animations.MyAnimationClip.BoneState})">
            <summary>
            Reset all bone transforms to local space. You need to call this when internally held world transforms are not valid anymore.
            This method just marks the bones for resetting.
            </summary>
            <param name="bonesLocalSpace">bones in the local space</param>
        </member>
        <member name="M:VRageRender.Animations.MyWorldSpaceBones.ResetAllToLocalSpaceNow">
            <summary>
            Reset all bone transforms to local space. You need to call this when internally held world transforms are not valid anymore.
            </summary>
        </member>
        <member name="M:VRageRender.Animations.MyWorldSpaceBones.ComputeWorld(System.Int32[])">
            <summary>
            Compute world transforms of character bones. Only the bones with indices matching maskBoneIndices are guaranteed to be computed.
            </summary>
            <param name="maskBoneIndices">Only the bones with indices matching maskBoneIndices are guaranteed to be computed. If null, all bones are computed.</param>
            <returns>list of bone transforms in world space</returns>
        </member>
        <member name="F:VRageRender.DShow.Clsid.FilterGraph">
            <summary> CLSID_FilterGraph, filter Graph </summary>
        </member>
        <member name="F:VRageRender.DShow.Clsid.WMVideoDecoderDMO">
            <summary> WMV Decoder DMO, WMV Decoder </summary>
        </member>
        <member name="F:VRageRender.DShow.Clsid.WMVideoDecoderDMO_cat">
            <summary> WMV Decoder DMO, WMV Decoder category </summary>
        </member>
        <member name="F:VRageRender.DShow.Clsid.SampleGrabber">
            <summary> CLSID_SampleGrabber, Sample Grabber filter </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:VRageRender.DShow.Clsid.NullRenderer" -->
        <member name="T:VRageRender.DShow.VideoState">
            <summary>
            Describes the state of a video player
            </summary>
        </member>
        <member name="T:VRageRender.DShow.VideoPlayer">
            <summary>
            Enables Video Playback in Microsoft XNA
            </summary>
        </member>
        <member name="F:VRageRender.DShow.VideoPlayer.m_graphBuilder">
            <summary>
            The GraphBuilder interface ref
            </summary>
        </member>
        <member name="F:VRageRender.DShow.VideoPlayer.m_mediaControl">
            <summary>
            The MediaControl interface ref
            </summary>
        </member>
        <member name="F:VRageRender.DShow.VideoPlayer.m_mediaEvent">
            <summary>
            The MediaEvent interface ref
            </summary>
        </member>
        <member name="F:VRageRender.DShow.VideoPlayer.m_mediaPosition">
            <summary>
            The MediaPosition interface ref
            </summary>
        </member>
        <member name="F:VRageRender.DShow.VideoPlayer.m_mediaSeeking">
            <summary>
            The MediaSeeking interface ref
            </summary>
        </member>
        <member name="F:VRageRender.DShow.VideoPlayer.m_videoDataRgba">
            <summary>
            The RGBA frame bytes used to set the data in the Texture2D Output Frame
            </summary>
        </member>
        <member name="F:VRageRender.DShow.VideoPlayer.videoWidth">
            <summary>
            Private Video Width
            </summary>
        </member>
        <member name="F:VRageRender.DShow.VideoPlayer.videoHeight">
            <summary>
            Private Video Height
            </summary>
        </member>
        <member name="F:VRageRender.DShow.VideoPlayer.avgTimePerFrame">
            <summary>
            Average Time per Frame in milliseconds
            </summary>
        </member>
        <member name="F:VRageRender.DShow.VideoPlayer.bitRate">
            <summary>
            BitRate of the currently loaded video
            </summary>
        </member>
        <member name="F:VRageRender.DShow.VideoPlayer.currentState">
            <summary>
            Current state of the video player
            </summary>
        </member>
        <member name="F:VRageRender.DShow.VideoPlayer.isDisposed">
            <summary>
            Is Disposed?
            </summary>
        </member>
        <member name="F:VRageRender.DShow.VideoPlayer.currentPosition">
            <summary>
            Current time position
            </summary>
        </member>
        <member name="F:VRageRender.DShow.VideoPlayer.videoDuration">
            <summary>
            Video duration
            </summary>
        </member>
        <member name="F:VRageRender.DShow.VideoPlayer.alphaTransparency">
            <summary>
            How transparent the video frame is.
            Takes effect on the next frame after this is updated
            Max Value: 255 - Opaque
            Min Value: 0   - Transparent
            </summary>
        </member>
        <member name="P:VRageRender.DShow.VideoPlayer.VideoWidth">
            <summary>
            Width of the loaded video
            </summary>
        </member>
        <member name="P:VRageRender.DShow.VideoPlayer.VideoHeight">
            <summary>
            Height of the loaded video
            </summary>
        </member>
        <member name="P:VRageRender.DShow.VideoPlayer.CurrentPosition">
            <summary>
            Gets or Sets the current position of playback in seconds
            </summary>
        </member>
        <member name="P:VRageRender.DShow.VideoPlayer.CurrentPositionAsTimeString">
            <summary>
            Returns the current position of playback, formatted as a time string (HH:MM:SS)
            </summary>
        </member>
        <member name="P:VRageRender.DShow.VideoPlayer.Duration">
            <summary>
            Total duration in seconds
            </summary>
        </member>
        <member name="P:VRageRender.DShow.VideoPlayer.DurationAsTimeString">
            <summary>
            Returns the duration of the video, formatted as a time string (HH:MM:SS)
            </summary>
        </member>
        <member name="P:VRageRender.DShow.VideoPlayer.CurrentState">
            <summary>
            Gets or Sets the current state of the video player
            </summary>
        </member>
        <member name="P:VRageRender.DShow.VideoPlayer.IsDisposed">
            <summary>
            Is Disposed?
            </summary>
        </member>
        <member name="P:VRageRender.DShow.VideoPlayer.FramesPerSecond">
            <summary>
            Number of Frames Per Second in the video file.
            Returns -1 if this cannot be calculated.
            </summary>
        </member>
        <member name="P:VRageRender.DShow.VideoPlayer.MillisecondsPerFrame">
            <summary>
            The number of milliseconds between each frame
            Returns -1 if this cannot be calculated
            </summary>
        </member>
        <member name="P:VRageRender.DShow.VideoPlayer.AlphaTransparency">
            <summary>
            Gets or sets how transparent the video frame is.
            Takes effect on the next frame after this is updated
            Max Value: 255 - Opaque
            Min Value: 0   - Transparent
            </summary>
        </member>
        <member name="M:VRageRender.DShow.VideoPlayer.#ctor(System.String)">
            <summary>
            Creates a new Video Player. Automatically creates the required Texture2D on the specificied GraphicsDevice.
            </summary>
            <param name="FileName">The video file to open</param>
        </member>
        <member name="M:VRageRender.DShow.VideoPlayer.CloseInterfaces">
            <summary>
            Closes DirectShow interfaces
            </summary>
        </member>
        <member name="M:VRageRender.DShow.VideoPlayer.Update">
            <summary>
            Updates the Output Frame data using data from the video stream. Call this in Game.Update().
            </summary>
        </member>
        <member name="M:VRageRender.DShow.VideoPlayer.Play">
            <summary>
            Starts playing the video
            </summary>
        </member>
        <member name="M:VRageRender.DShow.VideoPlayer.Pause">
            <summary>
            Pauses the video
            </summary>
        </member>
        <member name="M:VRageRender.DShow.VideoPlayer.Stop">
            <summary>
            Stops playing the video
            </summary>
        </member>
        <member name="M:VRageRender.DShow.VideoPlayer.Rewind">
            <summary>
            Rewinds the video to the start and plays it again
            </summary>
        </member>
        <member name="M:VRageRender.DShow.VideoPlayer.BufferCB(System.Double,System.IntPtr,System.Int32)">
            <summary>
            Required public callback from DirectShow SampleGrabber. Do not call this method.
            </summary>
        </member>
        <member name="M:VRageRender.DShow.VideoPlayer.SampleCB(System.Double,VRageRender.DShow.IMediaSample)">
            <summary>
            Required public callback from DirectShow SampleGrabber. Do not call this method.
            </summary>
        </member>
        <member name="M:VRageRender.DShow.VideoPlayer.Dispose">
            <summary>
            Cleans up the Video Player. Must be called when finished with the player.
            </summary>
        </member>
        <member name="M:VRageRender.ExternalApp.IMyBufferedInputSource.SwapBufferedTextInput(System.Collections.Generic.List{System.Char}@)">
            <summary>
            Swaps internal buffer with the one passed as argument. This swapping operation
            must be implemented in a thread safe manner. Buffer passed into the function will
            replaced by the internal buffer and returned in the same variable.
            </summary>
        </member>
        <member name="P:VRageRender.ExternalApp.IMyRenderWindow.DrawEnabled">
            <summary>
            True when Present on device should be called (e.g. window not minimized)
            </summary>
        </member>
        <member name="P:VRageRender.ExternalApp.IMyRenderWindow.Handle">
            <summary>
            Target window handle
            </summary>
        </member>
        <member name="M:VRageRender.ExternalApp.IMyRenderWindow.OnModeChanged(VRageRender.MyWindowModeEnum,System.Int32,System.Int32,VRageMath.Rectangle)">
            <summary>
            Called by render when display mode has changed
            </summary>
        </member>
        <member name="M:VRageRender.ExternalApp.MyGameRenderComponent.Start(VRage.Library.Utils.MyGameTimer,VRageRender.ExternalApp.InitHandler,System.Nullable{VRageRender.MyRenderDeviceSettings},VRageRender.MyRenderQualityEnum,System.Single)">
            <summary>
            Creates and starts render thread
            </summary>
        </member>
        <member name="M:VRageRender.ExternalApp.MyGameRenderComponent.Stop">
            <summary>
            Stops and clears render thread
            </summary>
        </member>
        <member name="T:VRageRender.ExternalApp.InitHandler">
            <summary>
            Initializes window on render thread and returns it's handle of window/control where to draw
            </summary>
        </member>
        <member name="M:VRageRender.ExternalApp.MyRenderThread.Exit">
            <summary>
            Signals the thread to exit and waits until it does so
            </summary>
        </member>
        <member name="T:VRageRender.Fractures.WoodFractureSettings.Rotation">
            How to rotate the splitting geometry
        </member>
        <member name="M:VRageRender.Import.ModelAutoRebuild.IsModelActual(System.String,System.String,System.String,System.String)">
            <summary>
            Checks whether that model file was build with current sources files. If current sources of this model - FBX, XML, HKT etc. were changed, this returns false.
            </summary>
            <param name="modelFile"></param>
            <returns>true - if data hashes of source files are valid </returns>
            <returns>false - if data has been changed</returns>
        </member>
        <member name="P:VRageRender.Import.MyMeshSectionMeshInfo.StartIndex">
            <summary>Offset in index list</summary>
        </member>
        <member name="P:VRageRender.Import.MyMeshSectionMeshInfo.IndexCount">
            <summary>Offset in index list</summary>
        </member>
        <member name="M:VRageRender.Import.MyLODDescriptor.GetModelAbsoluteFilePath(System.String)">
            <summary>
            Absolute file path to the LOD model related to the parent assetFilePath.
            </summary>
            <param name="parentAssetFilePath">File path of parent asset.</param>
            <returns>Absolute file path.</returns>
        </member>
        <member name="F:VRageRender.Import.MyMaterialFlags.HUE_KEYCOLOR">
            <summary>
            Recoloring for this material will be applied as a HSV shift from hsv(0, 0, initial_pixel_value)
            </summary>
        </member>
        <member name="F:VRageRender.Import.MyMaterialFlags.NO_KEYCOLOR">
            <summary>
            This material will not be recolored
            </summary>
        </member>
        <member name="T:VRageRender.Import.MyMaterialDescriptor">
            <summary>
            material params for export
            </summary>
        </member>
        <member name="M:VRageRender.Import.MyMaterialDescriptor.#ctor(System.String)">
            <summary>
            c-tor
            </summary>
            <param name="materialName"></param>
        </member>
        <member name="M:VRageRender.Import.MyMaterialDescriptor.Write(System.IO.BinaryWriter)">
            <summary>
            Write to binary file
            </summary>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="F:VRageRender.Import.Mesh.VertexOffset">
            <summary>
            Offset on the vertex buffer
            </summary>
        </member>
        <member name="F:VRageRender.Import.Mesh.StartIndex">
            <summary>
            Offset on the indices buffer
            </summary>
        </member>
        <member name="M:VRageRender.Import.MyModelExporter.#ctor(System.String)">
            <summary>
            c-tor
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:VRageRender.Import.MyModelExporter.#ctor">
            <summary>
            c-tor
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:VRageRender.Import.MyModelExporter.Dispose">
            <summary>
            Close
            </summary>
        </member>
        <member name="M:VRageRender.Import.MyModelExporter.WriteTag(System.String)">
            <summary>
            WriteTag
            </summary>
            <param name="tagName"></param>
        </member>
        <member name="M:VRageRender.Import.MyModelExporter.WriteVector(VRageMath.Vector2)">
            <summary>
            WriteVector2
            </summary>
            <param name="vct"></param>
        </member>
        <member name="M:VRageRender.Import.MyModelExporter.WriteVector(VRageMath.Vector3)">
            <summary>
            WriteVector3
            </summary>
            <param name="vct"></param>
        </member>
        <member name="M:VRageRender.Import.MyModelExporter.WriteVector(VRageMath.Vector4)">
            <summary>
            WriteVector4
            </summary>
            <param name="vct"></param>
        </member>
        <member name="M:VRageRender.Import.MyModelExporter.WriteMatrix(VRageMath.Matrix)">
            <summary>
            WriteMatrix
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:VRageRender.Import.MyModelExporter.WriteVector(VRageMath.Vector2I)">
            <summary>
            WriteVector2
            </summary>
            <param name="vct"></param>
        </member>
        <member name="M:VRageRender.Import.MyModelExporter.WriteVector(VRageMath.Vector3I)">
            <summary>
            WriteVector3
            </summary>
            <param name="vct"></param>
        </member>
        <member name="M:VRageRender.Import.MyModelExporter.WriteVector(VRageMath.Vector4I)">
            <summary>
            WriteVector4
            </summary>
            <param name="vct"></param>
        </member>
        <member name="M:VRageRender.Import.MyModelExporter.WriteByte4(VRageMath.PackedVector.Byte4)">
            <summary>
            Write Byte4
            </summary>
        </member>
        <member name="M:VRageRender.Import.MyModelExporter.ExportData(System.String,VRageMath.Vector3[])">
            <summary>
            ExportData
            </summary>
            <param name="tagName"></param>
            <param name="vctArray"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelExporter.ExportData(System.String,VRageMath.Matrix[])">
            <summary>
            ExportData
            </summary>
            <param name="tagName"></param>
            <param name="vctArray"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelExporter.ExportData(System.String,VRageMath.Vector2[])">
            <summary>
            ExportData
            </summary>
            <param name="tagName"></param>
            <param name="vctArray"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelExporter.ExportData(System.String,VRageMath.Vector4[])">
            <summary>
            ExportData
            </summary>
            <param name="tagName"></param>
            <param name="strArr"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelExporter.ExportData(System.String,System.String[])">
            <summary>
            ExportData
            </summary>
            <param name="tagName"></param>
            <param name="strArr"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelExporter.ExportData(System.String,System.Int32[])">
            <summary>
            ExportData
            </summary>
            <param name="tagName"></param>
            <param name="strArr"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelExporter.ExportData(System.String,System.Byte[])">
            <summary>
            ExportData
            </summary>
            <param name="tagName"></param>
            <param name="strArr"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelExporter.ExportData(System.String,VRageRender.Import.MyModelInfo)">
            <summary>
            ExportData
            </summary>
            <param name="tagName"></param>
            <param name="strArr"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelExporter.ExportData(System.String,VRageMath.BoundingBox)">
            <summary>
            ExportData
            </summary>
            <param name="tagName"></param>
            <param name="strArr"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelExporter.ExportData(System.String,VRageMath.BoundingSphere)">
            <summary>
            ExportData
            </summary>
            <param name="tagName"></param>
            <param name="strArr"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelExporter.ExportData(System.String,System.Collections.Generic.Dictionary{System.String,VRageMath.Matrix})">
            <summary>
            ExportData
            </summary>
            <param name="tagName"></param>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelExporter.ExportData(System.String,System.Collections.Generic.List{VRageRender.Import.MyMeshPartInfo})">
            <summary>
            ExportData
            </summary>
            <param name="tagName"></param>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelExporter.ExportData(System.String,System.Collections.Generic.Dictionary{System.String,VRageRender.Import.MyModelDummy})">
            <summary>
            ExportData
            </summary>
            <param name="tagName"></param>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelExporter.ExportFloat(System.String,System.Single)">
            <summary>
            ExportFloat
            </summary>
            <param name="tagName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelExporter.ExportBool(System.String,System.Boolean)">
            <summary>
            ExportFloat
            </summary>
            <param name="tagName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelExporter.WriteQuaternion(VRageMath.Quaternion)">
            <summary>
            WriteQuaternion
            </summary>
            <param name="vct"></param>
        </member>
        <member name="M:VRageRender.Import.MyModelImporter.ReadVector3(System.IO.BinaryReader)">
            <summary>
            Read Vector34
            </summary>
        </member>
        <member name="M:VRageRender.Import.MyModelImporter.ReadHalfVector4(System.IO.BinaryReader)">
            <summary>
            Read HalfVector4
            </summary>
        </member>
        <member name="M:VRageRender.Import.MyModelImporter.ReadHalfVector2(System.IO.BinaryReader)">
            <summary>
            Read HalfVector2
            </summary>
        </member>
        <member name="M:VRageRender.Import.MyModelImporter.ReadByte4(System.IO.BinaryReader)">
            <summary>
            Read Byte4
            </summary>
        </member>
        <member name="M:VRageRender.Import.MyModelImporter.ImportVector3(System.IO.BinaryReader)">
            <summary>
            ImportVector3
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelImporter.ImportVector4(System.IO.BinaryReader)">
            <summary>
            ImportVector4
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelImporter.ImportQuaternion(System.IO.BinaryReader)">
            <summary>
            ImportQuaternion
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelImporter.ImportVector4Int(System.IO.BinaryReader)">
            <summary>
            ImportVector4Int
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelImporter.ImportVector3Int(System.IO.BinaryReader)">
            <summary>
            ImportVector3Int
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelImporter.ImportVector2(System.IO.BinaryReader)">
            <summary>
            ImportVector2
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelImporter.ReadArrayOfHalfVector4(System.IO.BinaryReader)">
            <summary>
            Read array of HalfVector4
            </summary>
        </member>
        <member name="M:VRageRender.Import.MyModelImporter.ReadArrayOfByte4(System.IO.BinaryReader)">
            <summary>
            Read array of Byte4
            </summary>
        </member>
        <member name="M:VRageRender.Import.MyModelImporter.ReadArrayOfHalfVector2(System.IO.BinaryReader)">
            <summary>
            Read array of HalfVector2
            </summary>
        </member>
        <member name="M:VRageRender.Import.MyModelImporter.ReadArrayOfVector3(System.IO.BinaryReader)">
            <summary>
            ReadArrayOfVector3
            </summary>
            <param name="br"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelImporter.ReadArrayOfVector4(System.IO.BinaryReader)">
            <summary>
            ReadArrayOfVector4
            </summary>
            <param name="br"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelImporter.ReadArrayOfVector4Int(System.IO.BinaryReader)">
            <summary>
            ReadArrayOfVector4
            </summary>
            <param name="br"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelImporter.ReadArrayOfVector3Int(System.IO.BinaryReader)">
            <summary>
            ReadArrayOfVector3I
            </summary>
            <param name="br"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelImporter.ReadArrayOfVector2(System.IO.BinaryReader)">
            <summary>
            ReadArrayOfVector2
            </summary>
            <param name="br"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelImporter.ReadArrayOfString(System.IO.BinaryReader)">
            <summary>
            ReadArrayOfString
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelImporter.ReadBoundingBox(System.IO.BinaryReader)">
            <summary>
            ReadBoundingBox
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelImporter.ReadBoundingSphere(System.IO.BinaryReader)">
            <summary>
            ReadBoundingSphere
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelImporter.ReadMatrix(System.IO.BinaryReader)">
            <summary>
            ReadMatrix
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelImporter.ReadMeshParts(System.IO.BinaryReader,System.Int32)">
            <summary>
            ReadMeshParts
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelImporter.ReadDummies(System.IO.BinaryReader)">
            <summary>
            ReadDummies
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelImporter.ReadArrayOfInt(System.IO.BinaryReader)">
            <summary>
            ReadArrayOfInt
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Import.MyModelImporter.LinearKeyframeReduction(System.Collections.Generic.LinkedList{VRageRender.Animations.MyAnimationClip.Keyframe},System.Single,System.Single)">
            <summary>
            This function filters out keyframes that can be approximated well with 
            linear interpolation.
            </summary>
            <param name="keyframes"></param>
        </member>
        <member name="F:VRageRender.Import.MyMwmFormat.CurrentVersion">
            <summary>
            Current max format version.
            </summary>
        </member>
        <member name="F:VRageRender.Import.MyMwmFormat.SinglePrecisionPositionVersion">
            <summary>
            Version where single precision position data was introduced.
            </summary>
        </member>
        <member name="T:VRageRender.VideoState">
            <summary>
            Describes the state of a video player
            </summary>
        </member>
        <member name="P:VRageRender.IMyRender.IsSupported">
            <summary>
            Must be possible to query during startup before render thread and window is created.
            </summary>
        </member>
        <member name="P:VRageRender.IRenderSystem.Synchronous">
            <summary>
            Whether this render system should be updated synchronously by the game.
            </summary>
            TODO: This flag should be replaced by moving all rendering specific setup and management into this interface, which should be converted into an abstract base class.
        </member>
        <member name="F:VRageRender.Messages.MyRenderMessageAlphaTransitionBegin.RenderObjectId">
            <summary>
            The render object.
            </summary>
        </member>
        <member name="F:VRageRender.Messages.MyRenderMessageAlphaTransitionBegin.PartId">
            <summary>
            Identifier for the part to transition.
            
            For meshes this should be a subpart index.
            For voxel meshes this is the id of the voxel mesh.
            
            To blend the whole object use RENDER_ID_UNASSIGNED (= uint.MaxValue)
            </summary>
        </member>
        <member name="F:VRageRender.Messages.MyRenderMessageAlphaTransitionBegin.Duration">
            <summary>
            Duration in seconds.
            </summary>
        </member>
        <member name="F:VRageRender.Messages.MyRenderMessageAlphaTransitionBegin.Direction">
            <summary>
            The direction for the alpha transition.
            </summary>
        </member>
        <member name="F:VRageRender.Messages.MyRenderMessageAlphaTransitionBegin.TransitionFinishedCallback">
            <summary>
            The callback to be called when the fade finishes.
            </summary>
        </member>
        <member name="F:VRageRender.Messages.MyRenderMessageAlphaTransitionEnd.RenderObjectId">
            <summary>
            The render object.
            </summary>
        </member>
        <member name="F:VRageRender.Messages.MyRenderMessageAlphaTransitionEnd.PartId">
            <summary>
            Identifier for the part to transition.
            
            For meshes this should be a subpart index.
            For voxel meshes this is the id of the voxel mesh.
            
            To blend the whole object use RENDER_ID_UNASSIGNED (= uint.MaxValue)
            </summary>
        </member>
        <member name="F:VRageRender.Messages.MyRenderMessageAlphaTransitionEnd.Direction">
            <summary>
            The direction for the finished alpha transition.
            </summary>
        </member>
        <member name="F:VRageRender.Messages.MyRenderMessageAlphaTransitionEnd.TransitionFinishedCallback">
            <summary>
            The callback to be called when the fade finishes.
            </summary>
        </member>
        <member name="P:VRageRender.Messages.MyRenderMessageBase.MessageClass">
            <summary>
            Get message class
            </summary>
        </member>
        <member name="P:VRageRender.Messages.MyRenderMessageBase.MessageType">
            <summary>
            Gets message type
            </summary>
        </member>
        <member name="P:VRageRender.Messages.MySpriteDrawRenderMessage.MessageClass">
            <summary>If it has a target offscreen texture, then the message has to be processed earlier</summary>
        </member>
        <member name="T:VRageRender.Messages.LineObjectUvLayout">
            <summary>
            Layout for the generated uv coordinates of a line object.
            </summary>
        </member>
        <member name="F:VRageRender.Messages.LineObjectUvLayout.Start">
            <summary>
            Start is always zero.
            </summary>
        </member>
        <member name="F:VRageRender.Messages.LineObjectUvLayout.End">
            <summary>
            End is always one.
            </summary>
        </member>
        <member name="F:VRageRender.Messages.LineObjectUvLayout.Even">
            <summary>
            The center point of the rope is always at .5.
            </summary>
        </member>
        <member name="T:VRageRender.Messages.MyRenderMessageUpdateRenderInstanceBufferRange">
            This is kinda your universal array operator splice().
            
            The only thing is we cannot move elements with this.
        </member>
        <member name="F:VRageRender.Messages.MyGeneratedTextureType.RGBA">
            <summary>sRGB</summary>
        </member>
        <member name="F:VRageRender.Messages.MyGeneratedTextureType.RGBA_Linear">
            <summary>Linear RGB</summary>
        </member>
        <member name="F:VRageRender.Messages.MyRenderMessageSetInstanceBuffer.InstanceData">
            <summary>
            Fill in only the relevant data. Data ouside of the specified range would not be used.
            </summary>
        </member>
        <member name="T:VRageRender.Messages.MyRenderMessageSwitchRenderSettings">
            <summary>
            1 at the end is naming convention from DX, saying this is newer version (for Dx11 render).
            </summary>
        </member>
        <member name="F:VRageRender.Messages.MyRenderMessageType.Draw">
            <summary>
            Draw message
            Skipped when renderer is falling behind and has to process multiple queued frames (only handled in last frame before draw)
            Draw sprite, Draw light
            </summary>
        </member>
        <member name="F:VRageRender.Messages.MyRenderMessageType.DebugDraw">
            <summary>
            Debug Draw message, in render11 these messages are queued internally
            Skipped when renderer is falling behind and has to process multiple queued frames (only handled in last frame before draw)
            Draw sprite, debug draw...
            </summary>
        </member>
        <member name="F:VRageRender.Messages.MyRenderMessageType.StateChangeOnce">
            <summary>
            State change which can be applied only once, not applied when rendering same frame second time or more
            Add render object, remove render object...
            </summary>
        </member>
        <member name="F:VRageRender.Messages.MyRenderMessageType.StateChangeEvery">
            <summary>
            State change which must be applied every time, even when drawing same frame multiple times
            Move render object, other interpolation messages
            </summary>
        </member>
        <member name="T:VRageRender.Messages.MyRenderMessageUpdateRenderEnvironment">
            <summary>
            The difference between environment and RenderSettings is that environment are game play values,
            on the other hand render settings are render internal/debugging values
            </summary>
        </member>
        <member name="M:VRageRender.Models.MyMesh.#ctor(VRageRender.Import.MyMeshPartInfo,System.String)">
            <summary>
            c-tor - generic way for collecting resources
            </summary>
            <param name="meshInfo"></param>
            assetName - just for debug output
        </member>
        <member name="P:VRageRender.MyDecalMaterial.Rotation">
            <summary>
            Positive infinity for random rotation
            </summary>
        </member>
        <member name="F:VRageRender.MyEnvironmentLightData.SunLightDirection">
            <summary>Direction FROM sun</summary>
        </member>
        <member name="F:VRageRender.MyFont.ReplacementCharacter">
            <summary>
            Replacement character shown when we don't have something in our texture.
            </summary>
        </member>
        <member name="F:VRageRender.MyFont.Ellipsis">
            <summary>
            Ellipsis character.
            </summary>
        </member>
        <member name="F:VRageRender.MyFont.NewLine">
            <summary>
            Newline Character.
            </summary>
        </member>
        <member name="F:VRageRender.MyFont.ResourceAssembly">
            <summary>
            Assembly that contains the embedded resources for this font.
            </summary>
        </member>
        <member name="P:VRageRender.MyFont.IsFromResource">
            <summary>
            Whether data for this font is pulled from an embedded resource instead of the file system.
            </summary>
        </member>
        <member name="F:VRageRender.MyFont.FontPath">
            <summary>
            Path where this font was originally loaded from.
            </summary>
        </member>
        <member name="F:VRageRender.MyFont.FontDirectory">
            <summary>
            Directory that should contain the textures for this font.
            </summary>
        </member>
        <member name="F:VRageRender.MyFont.Spacing">
            <summary>
            This is artificial spacing in between two characters (in pixels).
            Using it we can make spaces wider or narrower
            </summary>
        </member>
        <member name="F:VRageRender.MyFont.KernEnabled">
            <summary>
            Enable / disable kerning of adjacent character pairs.
            </summary>
        </member>
        <member name="P:VRageRender.MyFont.Baseline">
            <summary>
            Distance from top of font to the baseline
            </summary>
        </member>
        <member name="P:VRageRender.MyFont.LineHeight">
            <summary>
            Distance from top to bottom of the font
            </summary>
        </member>
        <member name="P:VRageRender.MyFont.CapHeight">
            <summary>
            Height of a capital letter
            </summary>
        </member>
        <member name="P:VRageRender.MyFont.Leading">
            <summary>
            Distance between cap height and top of the font
            </summary>
        </member>
        <member name="P:VRageRender.MyFont.Descent">
            <summary>
            Distnace from the baseline to the bottom of the font
            </summary>
        </member>
        <member name="F:VRageRender.MyFont.Depth">
            <summary>
            The depth at which to draw the font
            </summary>
        </member>
        <member name="M:VRageRender.MyFont.#ctor(System.String,System.Int32)">
            <summary>
            Create a new font from the info in the specified font descriptor (XML) file
            </summary>
        </member>
        <member name="M:VRageRender.MyFont.#ctor(System.Reflection.Assembly,System.String,System.Int32)">
            <summary>
            Create a new font from the info in the specified font descriptor (XML) file
            </summary>
            <exception cref="T:System.Resources.MissingManifestResourceException">If the specified resource does not exist.</exception>
        </member>
        <member name="M:VRageRender.MyFont.GetTextureStream(System.String)">
            <summary>
            Open a reading stream for a given page texture.
            </summary>
            <param name="texturePage"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.MyFont.MeasureNext(System.Char@,System.Char,System.Single@)">
             <summary>
             This method allows the user to control font metrics on a per character level.
            
             Given the previous measured witdh and previously measured character we calculate the line width when advancing by the second character.
            
             As a convenience the next character is moved to the previous after computing the new offset.
             It is important to use whatver value it was set to because the character might also be replaced (say when the requested glyph was not printable).
             </summary>
             <param name="previous">The previously measured character, used for kerning, use null for the first character in a string.</param>
             <param name="next">The next character on a string.</param>
             <param name="width">The previous and then the updated line width.</param>
        </member>
        <member name="T:VRageRender.MyFont.MyGlyphInfo">
            <summary>
             Info for each glyph in the font - where to find the glyph image and other properties
            </summary>
        </member>
        <member name="T:VRageRender.MyFont.MyBitmapInfo">
            <summary>
            Info for each font bitmap
            </summary>
        </member>
        <member name="T:VRageRender.MyMessagePool">
            <summary>
            TODO: This should use some better sync, it could introduce delays with current state
            1) Use spin lock
            2) Lock only queue, not whole dictionary
            3) Test count first and when it's insufficient, create new message, both should be safe to do out of any lock
            4) Custom consumer/producer non-locking (except resize) queue could be better (maybe overkill)
            </summary>
        </member>
        <member name="P:VRageRender.Profiler.MyRenderProfilerRendering.ViewportSize">
            <summary>
            Returns viewport size in pixels
            </summary>
        </member>
        <member name="T:VRageRender.RenderFlags">
            <summary>
            Entity flags.
            </summary>
        </member>
        <member name="F:VRageRender.RenderFlags.SkipIfTooSmall">
            <summary>
            Skip the object in render if detected that it is too small
            </summary>
        </member>
        <member name="F:VRageRender.RenderFlags.NeedsResolveCastShadow">
            <summary>
            Needs resolve cast shadows flag (done by parallel raycast to sun)
            </summary>
        </member>
        <member name="F:VRageRender.RenderFlags.FastCastShadowResolve">
            <summary>
            Casts only one raycast to determine shadow casting
            </summary>
        </member>
        <member name="F:VRageRender.RenderFlags.CastShadows">
            <summary>
            Tells if this object should cast shadows
            </summary>
        </member>
        <member name="F:VRageRender.RenderFlags.Visible">
            <summary>
            Specifies whether draw this entity or not.
            </summary>
        </member>
        <member name="F:VRageRender.RenderFlags.DrawOutsideViewDistance">
            <summary>
            Specifies whether this entity should be drawn even when it is outside the set view distance
            </summary>
        </member>
        <member name="F:VRageRender.RenderFlags.UseCustomDrawMatrix">
            <summary>
            Tells if this object should use PlayerHeadMatrix as matrix for draw
            </summary>
        </member>
        <member name="F:VRageRender.RenderFlags.ShadowLodBox">
            <summary>
            Use local AABB box for shadow LOD, not used
            </summary>
        </member>
        <member name="F:VRageRender.RenderFlags.NoBackFaceCulling">
            <summary>
            No culling of back faces
            </summary>
        </member>
        <member name="T:VRageRender.LightTypeEnum">
            <summary>
            Light type, flags, could be combined
            </summary>
        </member>
        <member name="F:VRageRender.Lights.MyGlareTypeEnum.Normal">
            <summary>
            This is the glare that is dependent on occlusion queries.
            Physically, this phenomenon originates in the lens.
            </summary>
        </member>
        <member name="F:VRageRender.Lights.MyGlareTypeEnum.Distant">
            <summary>
            Sun
            </summary>
        </member>
        <member name="T:VRageRender.MyRenderQualityEnum">
            <summary>
            Generic enum for render quality 
            </summary>
        </member>
        <member name="T:VRageRender.Textures.TextureQuality">
            <summary>
            Reresent loading quality for textures.
            This works only for dds textures with mipmaps. Other textures will retains their original properties.
            </summary>
        </member>
        <member name="F:VRageRender.Textures.TextureQuality.Full">
            <summary>
            Full quality.
            </summary>
        </member>
        <member name="F:VRageRender.Textures.TextureQuality.Half">
            <summary>
            1/2 quality.
            </summary>
        </member>
        <member name="F:VRageRender.Textures.TextureQuality.OneFourth">
            <summary>
            1/4 quality
            </summary>
        </member>
        <member name="F:VRageRender.Textures.TextureQuality.OneEighth">
            <summary>
            1/8 quality
            </summary>
        </member>
        <member name="F:VRageRender.Textures.TextureQuality.OneSixteenth">
            <summary>
            1/16 quality
            </summary>
        </member>
        <member name="P:VRageRender.MyRenderProxy.Headless">
            <summary>
            Whether this proxy is not initialized or set to a null renderer (meaning nothing is drawn, usually because the current process is a server).
            </summary>
        </member>
        <member name="P:VRageRender.MyRenderProxy.ObjectRecord.DebugName">
            <summary>
            Debug name of this object.
            </summary>
        </member>
        <member name="F:VRageRender.MyRenderProxy.TrackObjectType">
            <summary>
            Mapping that specifies whether a given object type should be tracked.
            </summary>
        </member>
        <member name="F:VRageRender.MyRenderProxy.m_objectRecords">
            <summary>
            Mapping of tracked Render Objects to their data.
            </summary>
        </member>
        <member name="F:VRageRender.MyRenderProxy.ObjectsToRemove">
            <summary>
            Set of objects queued for removal.
            </summary>
        </member>
        <member name="F:VRageRender.MyRenderProxy.StackTracker">
            <summary>
            Tracker of stack traces for created objects.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VRageRender.MyRenderProxy.DrawSprite(System.String,VRageMath.RectangleF@,System.Boolean,System.Nullable{VRageMath.Rectangle}@,VRageMath.Color,System.Single,VRageMath.Vector2,VRageMath.Vector2@,VRageRender.SpriteEffects,System.Single,System.Boolean,System.String,VRageRender.Messages.SpriteBatchMode)" -->
        <!-- Badly formed XML comment ignored for member "M:VRageRender.MyRenderProxy.DrawSprite(System.String,VRageMath.Vector2,VRageMath.Vector2,VRageMath.Color,VRage.Utils.MyGuiDrawAlignEnum,System.Single,VRageMath.Vector2,System.Single,System.Nullable{VRageMath.Vector2},System.Single,System.Boolean,System.String,VRageRender.Messages.SpriteBatchMode)" -->
        <member name="M:VRageRender.MyRenderProxy.IsValidGeneratedTextureName(System.String)">
            <returns>True if the texture name is valid and doesn't contant reserved characters</returns>
        </member>
        <member name="M:VRageRender.MyRenderProxy.CreateGeneratedTexture(System.String,System.Int32,System.Int32,VRageRender.Messages.MyGeneratedTextureType,System.Int32)">
            <returns>Qualified texture</returns>
        </member>
        <member name="M:VRageRender.MyRenderProxy.ResetGeneratedTexture(System.String,System.Byte[]@)">
            <summary>
            Reset a user texture with user provided pixel data.
            </summary>
            <remarks>
            This call will take ownership of the provided data, the user must be sure to not keep any references to it after that.
            </remarks>
            <param name="textureName">The name of the generated texture to update.</param>
            <param name="data">The provided user data, the data is taken ownership by the renderer and the user reference is reste to null.</param>
        </member>
        <member name="M:VRageRender.MyRenderProxy.ResetGeneratedTexture(System.String,System.Byte[])">
            <summary>
            Reset a user texture with user provided pixel data.
            </summary>
            <remarks>
            This call will not take ownership of the user data, but to avoid a race condition the data is copied.
            </remarks>
            <param name="textureName">The name of the generated texture to update.</param>
            <param name="data">The provided user data, this call will make a copy of it.</param>
        </member>
        <member name="M:VRageRender.MyRenderProxy.CreateRenderInstanceBuffer(System.String,VRageRender.Messages.MyRenderInstanceBufferType,System.UInt32)">
            <param name="parentId">Parent of the instance. Currently used for debugging. May be left unassingned</param>
        </member>
        <member name="M:VRageRender.MyRenderProxy.UpdateModelHighlight(System.UInt32,System.String[],System.UInt32[],System.Nullable{VRageMath.Color},System.Single,System.Single,System.Int32)">
            <param name="thickness">Zero or negative to remove highlight</param>
        </member>
        <member name="M:VRageRender.MyRenderProxy.UpdateHighlightOverlappingModel(System.UInt32,System.Boolean)">
            <summary>
            Makes the actor of given RenderId overlap highlights.
            If possible use MyHighlightSystem session component instead.
            </summary>
            <param name="modelRenderId">Actor Id.</param>
            <param name="enable">Enable flag.</param>
        </member>
        <member name="M:VRageRender.MyRenderProxy.ChangeModel(System.UInt32,System.String,System.Single)">
            <summary>
            New model should have similar size to previous model because of prunning structure recalculation
            </summary>
            <param name="id"></param>
            <param name="LOD"></param>
            <param name="model"></param>
            <param name="useForShadow"></param>
        </member>
        <member name="M:VRageRender.MyRenderProxy.AlphaTransitionBegin(System.UInt32,System.UInt32,System.Double,VRage.Render.MyAlphaTransitionDirection,System.Action{System.UInt32})">
            <summary>
            Interpolate the custom alpha value of a given render obbject or part thereof over a period of time.
            </summary>
            <param name="renderEntity">The render object to go through the transition.</param>
            <param name="entitySubpart">The subpart of the entity if applicable. For voxels this is the id of the mesh,
            for other entities this could be the subpart index but it is not used yet.</param>
            <param name="duration">How long the transition will last in seconds.</param>
            <param name="direction">To what value the transition fades to.</param>
        </member>
        <member name="M:VRageRender.MyRenderProxy.AlphaTransitionEnd(System.UInt32,System.UInt32,VRage.Render.MyAlphaTransitionDirection,System.Action{System.UInt32})">
            <summary>
            Inform the game that a render entity or one of it's parts finished transitioning.
            </summary>
            <param name="renderEntity">The render object that finished the trabnsition.</param>
            <param name="entitySubpart">The subpart of the entity if any.</param>
            <param name="direction">The direction of the  finished transition.</param>
        </member>
        <member name="M:VRageRender.MyRenderProxy.RenderOffscreenTextureToMaterial(System.UInt32,System.String,System.String,System.Nullable{VRageMath.Color},VRageRender.Messages.MyTextureType)">
            <param name="backgroundColor">null means no background</param>
            <param name="blendAlphaChannel">Blend alpha channel</param>
        </member>
        <member name="M:VRageRender.MyRenderProxy.RenderVoxelCreate(System.String,VRageMath.MatrixD,System.Single,VRageRender.Voxels.IMyLodController,System.Nullable{System.Single},VRageMath.Vector3D,VRageRender.RenderFlags)">
            <summary>
            Create a new render entity for voxel meshes.
            </summary>
            <param name="debugName">Debug name of this object.</param>
            <param name="worldMatrix">World matrix of the created object, scale not allowed.</param>
            <param name="scale">Scale of the voxel entity.</param>
            <param name="clipmap">The clipmap that will control rendering for this voxel entity.</param>
            <param name="spherizeRadius">Radius to which the shape attempts to turn into a sphere, used for planets.</param>
            <param name="spherizePosition">Center for the spherization process, best left default.</param>
            <param name="flags">Additional flags for the voxel entity.</param>
            <returns>The id for the new render entity.</returns>
        </member>
        <member name="M:VRageRender.MyRenderProxy.RenderVoxelUpdate(System.UInt32,System.Nullable{System.Single},System.Nullable{System.Boolean},System.Nullable{System.Single},VRageMath.Vector3D)">
            <summary>
            Update the properties of a voxel entity.
            </summary>
            <param name="id">Id of the voxel entity</param>
            <param name="scale">Scale of the voxel entity.</param>
            <param name="spherize">Weather the planet should spherize.</param>
            <param name="spherizeRadius">Radius to which the shape attempts to turn into a sphere, used for planets.</param>
            <param name="spherizePosition">Center for the spherization process, best left default.</param>
            <returns>The id for the new render entity.</returns>
        </member>
        <member name="M:VRageRender.MyRenderProxy.DebugDrawUpdateMesh(System.UInt32,System.Collections.Generic.List{VRageRender.Messages.MyFormatPositionColor},System.Nullable{VRageMath.MatrixD},System.Nullable{System.Single},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Update the properties of a persistent debug draw mesh.
            </summary>
            <param name="id">The id of the mesh.</param>
            <param name="vertices">The vertices, use null for no change.</param>
            <param name="worldMatrix">World matrix.</param>
            <param name="alpha">Alpha value</param>
            <param name="depthRead">Weather to bind the depth target as readable.</param>
            <param name="shaded">Weather to draw the mesh shaded or wireframe.</param>
            <param name="depthWrite">Weather to bind the depth target as writable, this implies readable.</param>
        </member>
        <member name="M:VRageRender.MyRenderProxy.SetFrameTimeStep(System.Single)">
            <param name="timestep">Greter than zero: fixed timestep in seconds. If timestep is zero, the time step is computed</param>
        </member>
        <member name="M:VRageRender.MyRenderProxy.UpdateLodImmediately(System.UInt32)">
            <summary>
            Request that the level of detail for a given actor be updated instantaneously, instead of cross fading models.
            
            This request remains until the next lod update and is then discarded.
            </summary>
            <param name="actor"></param>
        </member>
        <member name="T:VRageRender.MyRenderSettings">
            <summary>
            Settings for whole render. To make settings per draw, use RenderSetup
            </summary>
        </member>
        <member name="T:VRageRender.MyAntialiasingMode">
            <summary>
            VRage.Render11 only.
            </summary>
        </member>
        <member name="T:VRageRender.MyShadowsQuality">
            <summary>
            VRage.Render11 only.
            </summary>
        </member>
        <member name="T:VRageRender.MyTextureQuality">
            <summary>
            VRage.Render11 only.
            </summary>
        </member>
        <member name="T:VRageRender.MyTextureAnisoFiltering">
            <summary>
            VRage.Render11 only.
            </summary>
        </member>
        <member name="T:VRageRender.MyUserRenderSettings">
            <inheritdoc cref="T:System.IEquatable`1" />
            <summary>
            Naming convention from DX. Newer version for Dx11 render.
            Put only settings that player can control (either directly or indirectly) using options here.
            Don't put debug crap here!
            </summary>
        </member>
        <member name="P:VRageRender.MyUserRenderSettings.ShadingQuality">
            <summary>
            wrapper for all shading quality enums.
            </summary>
        </member>
        <member name="T:VRageRender.Utils.MyDebugDrawHelper">
            <summary>
            Set of helper functions for debug drawing.
            </summary>
        </member>
        <member name="M:VRageRender.Utils.MyDebugDrawHelper.DrawNamedPoint(VRageMath.Vector3D,System.String,System.Nullable{VRageMath.Color},System.Nullable{VRageMath.MatrixD},System.Boolean)">
            <summary>
            Debug draw a point with an explanation name next to it.
            </summary>
            <param name="pos">world space coordinates of the point</param>
            <param name="name">point name, caption, can be null</param>
            <param name="color">point color, pass null to keep default white</param>
            <param name="cameraViewMatrix">helper camera matrix, pass null to ignore camera transform - this just makes the debug draw prettier</param>
            <param name="fancy">when set to true, the point name is drawed a bit further with nice dashed line leading to it. there. just like that.</param>
        </member>
        <member name="M:VRageRender.Utils.MyDebugDrawHelper.DrawNamedColoredAxis(VRageMath.MatrixD,System.Single,System.String,System.Nullable{VRageMath.Color})">
            <summary>
            Draw colored named axis.
            </summary>
            <param name="matrix">matrix containing axes</param>
            <param name="axisLengthScale">axis visualization length</param>
            <param name="name">helper label, can be null</param>
            <param name="color">helper color</param>
        </member>
        <member name="M:VRageRender.Utils.MyDebugDrawHelper.DrawFrustum(VRageMath.MatrixD)">
            <summary>
            Draw view frustum matrix.
            </summary>
            <param name="viewProjection"></param>
        </member>
        <member name="M:VRageRender.Utils.MyDebugDrawHelper.DrawLine(VRageMath.Vector3D,VRageMath.Vector3D,VRageMath.Color)">
            <summary>
            Draw a line.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="c"></param>
        </member>
        <member name="T:VRageRender.Utils.MyRenderStats">
            <summary>
            Draws statistics
            </summary>
        </member>
        <member name="P:VRageRender.Utils.MyWingedEdgeMesh.EdgeTableEntry.NextFreeEntry">
            <summary>
            Only valid for empty (deallocated) table entries. In that case, it points to the next free table entry.
            If this is -1, this entry is the last free entry.
            </summary>
        </member>
        <member name="M:VRageRender.Utils.MyWingedEdgeMesh.EdgeTableEntry.TryGetSharedVertex(VRageRender.Utils.MyWingedEdgeMesh.EdgeTableEntry@)">
            <summary>
            Returns -1 if there is no shared edge
            </summary>
        </member>
        <member name="M:VRageRender.Utils.MyWingedEdgeMesh.EdgeTableEntry.VertexLeftFace(System.Int32)">
            <summary>
            Returns a face to the left when going towards the given vertex
            </summary>
        </member>
        <member name="M:VRageRender.Utils.MyWingedEdgeMesh.EdgeTableEntry.VertexRightFace(System.Int32)">
            <summary>
            Returns a face to the right when going towards the given vertex
            </summary>
        </member>
        <member name="M:VRageRender.Utils.MyWingedEdgeMesh.EdgeTableEntry.FaceSucc(System.Int32)">
            <summary>
            Returns the successor of this edge in the given face
            </summary>
        </member>
        <member name="M:VRageRender.Utils.MyWingedEdgeMesh.EdgeTableEntry.SetFaceSucc(System.Int32,System.Int32)">
            <summary>
            Sets the successor of this edge in the given face
            </summary>
        </member>
        <member name="M:VRageRender.Utils.MyWingedEdgeMesh.EdgeTableEntry.FacePred(System.Int32)">
            <summary>
            Returns the predecessor of this edge in the given face
            </summary>
        </member>
        <member name="M:VRageRender.Utils.MyWingedEdgeMesh.EdgeTableEntry.SetFacePred(System.Int32,System.Int32)">
            <summary>
            Sets the predecessor of this edge in the given face
            </summary>
        </member>
        <member name="M:VRageRender.Utils.MyWingedEdgeMesh.EdgeTableEntry.VertexSucc(System.Int32)">
            <summary>
            Gets the successor around the given vertex.
            </summary>
        </member>
        <member name="M:VRageRender.Utils.MyWingedEdgeMesh.EdgeTableEntry.SetVertexSucc(System.Int32,System.Int32)">
            <summary>
            Sets the successor around the given vertex.
            </summary>
            <returns>The old successor value</returns>
        </member>
        <member name="M:VRageRender.Utils.MyWingedEdgeMesh.EdgeTableEntry.VertexPred(System.Int32)">
            <summary>
            Gets the predecessor around the given vertex
            </summary>
        </member>
        <member name="M:VRageRender.Utils.MyWingedEdgeMesh.EdgeTableEntry.SetVertexPred(System.Int32,System.Int32)">
            <summary>
            Sets the predecessor around the given vertex.
            </summary>
            <returns>The old predecessor value</returns>
        </member>
        <member name="P:VRageRender.Utils.MyWingedEdgeMesh.VertexTableEntry.NextFreeEntry">
            <summary>
            Only valid for empty (deallocated) table entries. In that case, it points to the next free table entry.
            If this is -1, this entry is the last free entry.
            </summary>
        </member>
        <member name="P:VRageRender.Utils.MyWingedEdgeMesh.FaceTableEntry.NextFreeEntry">
            <summary>
            Only valid for empty (deallocated) table entries. In that case, it points to the next free table entry.
            If this is -1, this entry is the last free entry.
            </summary>
        </member>
        <member name="T:VRageRender.Utils.MyWingedEdgeMesh.Edge">
            <summary>
            Note: This is invalid after the mesh changes!
            </summary>
        </member>
        <member name="T:VRageRender.Utils.MyWingedEdgeMesh.Face">
            <summary>
            Note: This is invalid after the mesh changes!
            </summary>
        </member>
        <member name="T:VRageRender.Utils.MyWingedEdgeMesh.VertexEdgeEnumerator">
            <summary>
            Note: This is invalid after the mesh changes!
            </summary>
        </member>
        <member name="T:VRageRender.Utils.MyWingedEdgeMesh.FaceEdgeEnumerator">
            <summary>
            Note: This is invalid after the mesh changes!
            </summary>
        </member>
        <member name="T:VRageRender.Utils.MyWingedEdgeMesh.FaceVertexEnumerator">
            <summary>
            Note: This is invalid after the mesh changes!
            </summary>
        </member>
        <member name="T:VRageRender.Utils.MyWingedEdgeMesh.EdgeEnumerator">
            <summary>
            Note: This is invalid after the mesh changes!
            </summary>
        </member>
        <member name="M:VRageRender.Utils.MyWingedEdgeMesh.Copy">
            <summary>
            For testing purposes only! The copy is only a shallow copy (i.e. userdata is not copied)
            </summary>
        </member>
        <member name="M:VRageRender.Utils.MyWingedEdgeMesh.MakeEdgeFace(System.Int32,System.Int32,System.Int32,System.Int32,System.Object,System.Int32@)">
            <summary>
            Creates a new face by closing the gap between vertices vert1 and vert2 by a new edge
            </summary>
            <param name="vert1">Point that will be shared by the new edge and edge1</param>
            <param name="vert2">Point that will be shared by the new edge and edge2</param>
            <param name="edge1">Predecessor of the new edge</param>
            <param name="edge2">Successor of the new edge</param>
            <param name="faceUserData">User data for the newly created face</param>
        </member>
        <member name="M:VRageRender.Utils.MyWingedEdgeMesh.MergeEdges(System.Int32,System.Int32)">
            <summary>
            Merges two edges together into one. These edges have to border on the edge of the mesh (i.e. face -1)
            Note that this also merges the corresponding vertices!
            </summary>
            <param name="edge1">The edge that will be merged</param>
            <param name="edge2">The edge that will be kept</param>
        </member>
        <member name="M:VRageRender.Utils.MyWingedEdgeMesh.ExtrudeTriangleFromEdge(VRageMath.Vector3@,System.Int32,System.Object,System.Int32@,System.Int32@)">
            <summary>
            Creates a new triangle by adding a vertex to an existing edge
            </summary>
            <param name="newVertex">Position of the new vertex</param>
            <param name="edge">The edge from which we want to extrude</param>
            <param name="faceUserData">User data that will be saved in the face</param>
            <param name="newEdgeS">Index of the new edge that follows edge "edge" in the new triangle.</param>
            <param name="newEdgeP">Index of the new edge that precedes edge "edge" in the new triangle.</param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Utils.MyWingedEdgeMesh.MakeFace(System.Object,System.Int32)">
            <summary>
            Makes a face by filling in the empty edge loop incident to incidentEdge
            </summary>
            <param name="userData"></param>
            <param name="incidentEdge"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Utils.MyWingedEdgeMesh.SortFreeFaces">
            <summary>
            Sorts the list of free faces. This ensures that subsequent face allocations will return increasing sequence of face indices,
            unless interrupted by face deallocation. This can be useful in some algorithms that rely on ordering of the face indices.
            </summary>
        </member>
        <member name="M:VRageRender.Utils.MyWingedEdgeMesh.CheckFreeEntryConsistency">
            <summary>
            Checks for loops in the meshe's tables' freed entries
            </summary>
        </member>
        <member name="T:VRageRender.MySharedData">
            <summary>
            Data shared between render and update
            </summary>
        </member>
        <member name="M:VRageRender.MySharedData.BeforeUpdate">
            <summary>
            Refresh data from render (visible objects, render messages)
            </summary>
        </member>
        <member name="M:VRageRender.MyUpdateData.CommitUpdateFrame(VRage.Library.Threading.SpinLockRef)">
            <summary>
            Commits current frame as atomic operation and prepares new frame
            </summary>
        </member>
        <member name="M:VRageRender.MyUpdateData.GetRenderFrame(System.Boolean@)">
            <summary>
            Gets next frame for rendering, can return null in case there's nothing for rendering (no update frame submitted).
            When isPreFrame is true, don't handle draw messages, just process update messages and call method again.
            Pre frame must release messages and must be returned.
            Final frame is kept unmodified in queue, in case of slower update, so we can interpolate and draw frame again.
            </summary>
        </member>
        <member name="M:VRageRender.MyUpdateData.ReturnPreFrame(VRageRender.MyUpdateFrame)">
            <summary>
            PreFrame must be empty in this place
            </summary>
        </member>
        <member name="T:VRageRender.MyUpdateFrame">
            <summary>
            Contains data produced by update frame, sent to render in thread-safe manner
            </summary>
        </member>
        <member name="T:VRageRender.SpriteEffects">
            <summary>
            Defines sprite mirroring options.
            </summary>
            <remarks>
            Description is taken from original XNA <a href='http://msdn.microsoft.com/en-us/library/VRageMath.graphics.spriteeffects.aspx'>SpriteEffects</a> class.
            </remarks>
        </member>
        <member name="F:VRageRender.SpriteEffects.None">
            <summary>
            No rotations specified.
            </summary>
        </member>
        <member name="F:VRageRender.SpriteEffects.FlipHorizontally">
            <summary>
            Rotate 180 degrees around the Y axis before rendering.
            </summary>
        </member>
        <member name="F:VRageRender.SpriteEffects.FlipVertically">
            <summary>
            Rotate 180 degrees around the X axis before rendering.
            </summary>
        </member>
        <member name="F:VRageRender.SpriteEffects.FlipBoth">
            <summary>
            Rotate 180 degress around both the X and Y axis before rendering.
            </summary>
        </member>
        <member name="T:VRageRender.SpriteScissorStack">
            <summary>
            Stores stack of scissor rectangles where top rectangle has already
            been cut using all the rectangles below it, so that only one
            rectangle is checked during scissor test.
            </summary>
        </member>
        <member name="M:VRageRender.SpriteScissorStack.Cut(VRageMath.RectangleF@,VRageMath.RectangleF@)">
            <summary>
            Cuts the destination rectangle using top of the scissor stack.
            Source rectangle is modified using scaled change of destination
            as well.
            </summary>
        </member>
        <member name="T:VRageRender.Voxels.IMyLodController">
             <summary>
             Interface describing a lod controller for a voxel object.
            
             The lod controller is a class responsible for managing the visibility state of voxel objects and their parts.
             </summary>
        </member>
        <member name="P:VRageRender.Voxels.IMyLodController.Cells">
            <summary>
            Provide an enumeration of all voxel cells the controller deems visible.
            </summary>
        </member>
        <member name="P:VRageRender.Voxels.IMyLodController.Actor">
             <summary>
             Get the actor bound to this lod controller if any.
            
             This reference may not be thread safe.
             </summary>
        </member>
        <member name="P:VRageRender.Voxels.IMyLodController.Size">
            <summary>
            The size in voxels of this voxel object.
            </summary>
        </member>
        <member name="E:VRageRender.Voxels.IMyLodController.Loaded">
            <summary>
            Event raised whenever the lod controller finishes updating all cells ton the current view.
            This event is only ever invoked in the update thread.
            </summary>
        </member>
        <member name="M:VRageRender.Voxels.IMyLodController.Update(VRageMath.MatrixD@,VRageMath.BoundingFrustumD,System.Single)">
              <summary>
              Update cell visibility based on a view frustum.
            
              Cells visibility should be updated based on the view frustum.
              </summary>
             <param name="view">View matrix relative to the lod controller.</param>
             <param name="viewFrustum">The view frustum for the current camera.</param>
             <param name="farClipping">Distance to the far clipping plane from the view matrix.</param>
        </member>
        <member name="M:VRageRender.Voxels.IMyLodController.BindToActor(VRageRender.Voxels.IMyVoxelActor)">
             <summary>
             Bind to the cell handler, which is the component responsible for creating cells on behalf of the lod controller.
             </summary>
            
             It should only be legal to provide the cell handler once to a lod controller. Any future calls should be met with <see cref="T:System.InvalidOperationException"/>
             <param name="actor">The cell handler to use for this lod controller.</param>
        </member>
        <member name="M:VRageRender.Voxels.IMyLodController.Unload">
            <summary>
            Unload all data for this lod controller, this is only invoked at shutdown.
            </summary>
        </member>
        <member name="M:VRageRender.Voxels.IMyLodController.GetMaxLodInRange(System.Single)">
            <summary>
            Determine the maximum Level of Detail visible in the provided radius around the camera.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:VRageRender.Voxels.IMyLodController.InvalidateRange(VRageMath.Vector3I,VRageMath.Vector3I)">
            <summary>
            Let the lod controller know the provided range needs to be recalculated.
            </summary>
            <param name="min">min range in voxels</param>
            <param name="max">max range in voxels</param>
        </member>
        <member name="M:VRageRender.Voxels.IMyLodController.InvalidateAll">
             <summary>
             Invalidate all data in the lod controller.
            
             This should not trigger recalculation immediately, that should happen upon the next update.
             </summary>
        </member>
        <member name="M:VRageRender.Voxels.IMyLodController.DebugDraw(VRageMath.MatrixD@)">
             <summary>
             Debug draw the contents of the lod controller.
            
             For debug use only.
             </summary>
            <param name="cameraMatrix"></param>
        </member>
        <member name="T:VRageRender.Voxels.IMyMeshProcessor">
            <summary>
            Interface describing an object capable of of transforming a valid VrVoxelMesh into a ready to render format.
            
            The methods described in this interface are thread safe.
            </summary>
        </member>
        <member name="M:VRageRender.Voxels.IMyMeshProcessor.ProcessMesh(VRage.Voxels.VrVoxelMesh,VRageRender.Voxels.IMyLodController)">
            <summary>
            Process a mesh and return a ready to draw representation. The returned object can be supplied to <see cref="M:VRageRender.Voxels.IMyVoxelActorCell.UpdateMesh(VRageRender.Voxels.IMyProcessedMesh)"/> calls in <see cref="T:VRageRender.Voxels.IMyVoxelActorCell"/>.
            </summary>
            <param name="input"></param>
            <param name="lodController"></param>
            <returns></returns>
        </member>
        <member name="T:VRageRender.Voxels.IMyVoxelActorCell">
            <summary>
            Represents a chunk of voxel mesh in a voxel actor.
            </summary>
        </member>
        <member name="P:VRageRender.Voxels.IMyVoxelActorCell.Offset">
            <summary>
            Position and lod of this voxel cell.
            </summary>
        </member>
        <member name="P:VRageRender.Voxels.IMyVoxelActorCell.Lod">
            <summary>
            Lod index of this cell.
            </summary>
        </member>
        <member name="M:VRageRender.Voxels.IMyVoxelActorCell.UpdateMesh(VRageRender.Voxels.IMyProcessedMesh)">
            <summary>
            Update the mesh inside this voxel cell.
            </summary>
            <param name="data">Render data for the cell.</param>
        </member>
        <member name="M:VRageRender.Voxels.IMyVoxelActorCell.SetVisible(System.Boolean,System.Boolean)">
            <summary>
            Set the visibility of the cell. False means the cell will not be considered at all during rendering.
            </summary>
            <param name="visible">Wether the cell should be visible or not.</param>
            <param name="notify">Whther to raise the cell change event form the voxel actor after this visibility change is complete.</param>
        </member>
        <member name="P:VRageRender.Voxels.IMyVoxelActorCell.Visible">
            <summary>
            Weather this cell is visible or not.
            </summary>
        </member>
        <member name="T:VRageRender.Voxels.VisibilityChange">
            <summary>
            Signature for the event fired once the visibility of a voxel actor cell changes.
            </summary>
            <param name="offset">The cell's offset.</param>
            <param name="lod">The lod of the cell.</param>
            <param name="visible">Whether the cell if visible after the change.</param>
        </member>
        <member name="T:VRageRender.Voxels.MyVoxelActorTransitionMode">
            <summary>
            Specifies
            </summary>
        </member>
        <member name="T:VRageRender.Voxels.IMyVoxelActor">
             <summary>
             Defines a render actor for a voxel entity.
            
             Voxels entities differ from other entities in that they have multi-part meshes,
             where each part can be shown at different levels of detail.
            
             These parts are called cells or chunks.
             </summary>
        </member>
        <member name="P:VRageRender.Voxels.IMyVoxelActor.Id">
            <summary>
            Render Object Id for this actor.
            </summary>
        </member>
        <member name="P:VRageRender.Voxels.IMyVoxelActor.Size">
            <summary>
            Size in voxels of this actor.
            </summary>
        </member>
        <member name="P:VRageRender.Voxels.IMyVoxelActor.TransitionMode">
             <summary>
             Transition mode used for visibility changes to meshes in this clipmap.
            
             This will also affect cell updates.
             </summary>
             <remarks>
             It is an error to change the mode when there is an open batch.
             </remarks>
        </member>
        <member name="P:VRageRender.Voxels.IMyVoxelActor.MeshProcessor">
            <summary>
            Get the mesh processor instance that can be used with this actor.
            </summary>
        </member>
        <member name="M:VRageRender.Voxels.IMyVoxelActor.CreateCell(VRageMath.Vector3D,System.Int32,System.Boolean)">
             <summary>
             Create a clipmap cell.
            
             Cell add event is fired once the cell is actually visible.
             </summary>
             <param name="offset">Offset of the mesh.</param>
             <param name="lod">Mesh lod, used to calculate scale.</param>
             <param name="notify">Whether to raise an event for this operation.</param>
             <returns></returns>
        </member>
        <member name="M:VRageRender.Voxels.IMyVoxelActor.DeleteCell(VRageRender.Voxels.IMyVoxelActorCell,System.Boolean)">
             <summary>
             Destroy a voxel cell in this actor.
            
             Once a the cell is no longer visible and the notify flag was set, the CellChange event is raised.
             </summary>
             <param name="cell">The cell to remove</param>
             <param name="notify">Whether to raise an event for this operation.</param>
        </member>
        <member name="M:VRageRender.Voxels.IMyVoxelActor.BeginBatch(System.Nullable{VRageRender.Voxels.MyVoxelActorTransitionMode})">
             <summary>
             Begin caching add/remove update operations.
            
             To dispatch them all at once call EndBatch();
             </summary>
             <param name="switchMode">Optionally switch into this transition mode before beginning the batch.</param>
        </member>
        <member name="M:VRageRender.Voxels.IMyVoxelActor.EndBatch">
            <summary>
            Dispatch all queued operations.
            </summary>
            <seealso cref="M:VRageRender.Voxels.IMyVoxelActor.BeginBatch(System.Nullable{VRageRender.Voxels.MyVoxelActorTransitionMode})"/>
        </member>
        <member name="P:VRageRender.Voxels.IMyVoxelActor.IsBatching">
            <summary>
            Whether this actor is currently batching cell changes.
            </summary>
        </member>
        <member name="P:VRageRender.Voxels.IMyVoxelActor.Fading">
            <summary>
            Weather any cell is currently fading.
            </summary>
        </member>
        <member name="E:VRageRender.Voxels.IMyVoxelActor.CellChange">
             <summary>
             Event fired when a cell is added or removed.
            
             The event is only fired when the operation is done (which could be asynchronous, but not on a different thread as the renderer).
            
             The event is only fired for operations that specify the notify flag = true.
             </summary>
        </member>
        <member name="E:VRageRender.Voxels.IMyVoxelActor.Move">
            <summary>
            Event  fired when the actor moves.
            </summary>
        </member>
        <member name="F:VRageRender.Voxels.MyClipmap.EnableUpdate">
            <summary>
            Control whether clipmaps should be updated.
            </summary>
        </member>
        <member name="F:VRageRender.Voxels.MyClipmap.EnableDebugDraw">
            <summary>
            Control whether clipmap debug data is to be drawn on the screen.
            </summary>
        </member>
        <member name="F:VRageRender.Voxels.MyClipmap.LodCount">
            <summary>
            Count of clipmap lods.
            </summary>
        </member>
        <member name="F:VRageRender.Voxels.MyClipmap.LodColors">
            <summary>
            Mapping of lod index to it's preferred debug color.
            </summary>
        </member>
        <member name="F:VRageRender.Voxels.MyRenderFoliageData.FoliageEntry.Size">
            <summary>
            Absolute size of the blade.
            </summary>
        </member>
        <member name="F:VRageRender.Voxels.MyRenderFoliageData.FoliageEntry.SizeVariation">
            <summary>
            Random variation ratio.
            </summary>
        </member>
        <member name="F:VRageRender.Voxels.MyRenderFoliageData.FoliageEntry.ColorAlphaTexture">
            <summary>
            Color metal texture for this entry.
            </summary>
        </member>
        <member name="F:VRageRender.Voxels.MyRenderFoliageData.FoliageEntry.NormalGlossTexture">
            <summary>
            Normal texture for this entry.
            </summary>
        </member>
        <member name="F:VRageRender.Voxels.MyRenderFoliageData.FoliageEntry.Probability">
            <summary>
            Probability of this blade being displayed.
            </summary>
        </member>
        <member name="F:VRageRender.Voxels.MyRenderFoliageData.Density">
            <summary>
            Density of the foliage in blades per sq meter.
            </summary>
        </member>
        <member name="F:VRageRender.Voxels.MyRenderFoliageData.Type">
            <summary>
            Type of the foliage blade to generate.
            </summary>
        </member>
        <member name="F:VRageRender.Voxels.MyRenderFoliageData.Entries">
            <summary>
            The possible grass blades.
            </summary>
        </member>
        <member name="T:VRageRender.Voxels.MyFoliageType">
            <summary>
            Supported foliage types.
            </summary>
        </member>
        <member name="F:VRage.Render.MyAlphaTransitionDirection.FadeIn">
            <summary>
            The object fades in (0 to 1).
            </summary>
        </member>
        <member name="F:VRage.Render.MyAlphaTransitionDirection.FadeOut">
            <summary>
            The object fades out (1 to  0).
            </summary>
        </member>
    </members>
</doc>
